[{"path":"https://e-sensing.github.io/sits/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"sits package follows RopenSci Code Conduct. fully endorse ROpenSci’s principles support welcoming safe community developers users.","code":""},{"path":"https://e-sensing.github.io/sits/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://e-sensing.github.io/sits/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://e-sensing.github.io/sits/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://e-sensing.github.io/sits/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team gilberto.camara.inpe@gmail.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://e-sensing.github.io/sits/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://e-sensing.github.io/sits/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rolf Simoes. Author. Gilberto Camara. Author, maintainer, thesis advisor. Felipe Souza. Author. Felipe Carlos. Author. Lorena Santos. Contributor. Charlotte Pelletier. Contributor. Estefania Pizarro. Contributor. Karine Ferreira. Contributor, thesis advisor. Alber Sanchez. Contributor. Alexandre Assuncao. Contributor. Daniel Falbel. Contributor. Gilberto Queiroz. Contributor. Johannes Reiche. Contributor. Pedro Andrade. Contributor. Pedro Brito. Contributor. Renato Assuncao. Contributor. Ricardo Cartaxo. Contributor.","code":""},{"path":"https://e-sensing.github.io/sits/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Simoes R, Camara G, Queiroz G, Souza F, Andrade P, Santos L, Carvalho , Ferreira K (2021). “Satellite Image Time Series Analysis Big Earth Observation Data.” Remote Sensing, 13(13), 2428. doi:10.3390/rs13132428.","code":"@Article{,   title = {Satellite Image Time Series Analysis for Big Earth Observation Data},   author = {Rolf Simoes and Gilberto Camara and Gilberto Queiroz and Felipe Souza and Pedro Andrade and Lorena Santos and Alexandre Carvalho and Karine Ferreira},   journal = {Remote Sensing},   year = {2021},   volume = {13},   number = {13},   pages = {2428},   doi = {10.3390/rs13132428}, }"},{"path":"https://e-sensing.github.io/sits/contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing to the sits R package","title":"Contributing to the sits R package","text":"welcome contributors sits package! Please submit questions, bug reports, requests issues tracker. plan contribute code, go ahead! Fork repo submit pull request. notes: package released Contributor Code Conduct. participating project agree abide terms. large changes, please open issue first discuss. include contributors authors DESCRIPTION file (permission) contributions go beyond small typos code documentation. package generally uses rOpenSci packaging guidelines style structure. Documentation generated roxygen2. Please write documentation code files let auto-generate documentation files. substantial contributions, consider adding new section one chapters SITS book (https://e-sensing.github.io/sitsbook/), written R markdown whose source available sitsbook repository. aim testing high coverage robust. Include tests major contribution code. particularly welcome additions two areas: new STAC-based image repositories new raster machine learning/deep learning algorithms. Please see details .","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"general-structure-of-sits-code","dir":"","previous_headings":"","what":"General structure of sits code.","title":"Contributing to the sits R package","text":"New functions build sits API follow general principles .","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"api-design","dir":"","previous_headings":"General structure of sits code.","what":"API design","title":"Contributing to the sits R package","text":"target audience sits community remote sensing experts Earth Sciences background want use state---art data analysis methods minimal investment programming skills. design sits API considers typical workflow land classification using satellite image time series thus provides clear direct set functions, easy learn master. reason, welcome contributors provide useful additions existing API, new ML/DL classification algorithms. case new API function, making pull request please raise issue stating rationale new function.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"r-programming-models","dir":"","previous_headings":"General structure of sits code.","what":"R programming models","title":"Contributing to the sits R package","text":"functions sits use S3 programming model strong emphasis generic methods wich specialized depending input data type. See example implementation sits_bands() function. Please include contributed code using S4 programming model. break structure logic existing code. Convert code S4 S3. Use generic functions much possible, improve modularity maintenance. code decision points using -else clauses, , X; else Y consider using generic functions. Functions use torch package use R6 model compatible package. See example, code sits_tempcnn.R api_torch.R. convert pyTorch code R include straightforward. Please see Technical Annex sits -line book.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"adherence-to-the-tidyverse-sf-and-terra","dir":"","previous_headings":"General structure of sits code.","what":"Adherence to the tidyverse, sf and terra","title":"Contributing to the sits R package","text":"sits code relies packages tidyverse work tables list. use dplyr tidyr data selection wrangling, purrr slider loops lists table, lubridate handle dates times.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"adherence-to-the-sits-data-types","dir":"","previous_headings":"General structure of sits code.","what":"Adherence to the sits data types","title":"Contributing to the sits R package","text":"sits package built top three data types: time series tibble, data cubes models. sits functions one types inputs one return values. time series tibble contains data metadata. first six columns contain metadata: spatial temporal information, label assigned sample, data cube data extracted. time_series column contains time series data spatiotemporal location. time series tibbles objects class sits. cube data type designed store metadata image files. principle, images part data cube share geographical region, bands, regularized fit pre-defined temporal interval. Data cubes sits organized tiles. tile element satellite’s mission reference system, example MGRS Sentinel-2 WRS2 Landsat. cube tibble row contains information data covering one tile. row cube tibble contains column named file_info; column contains list stores tibble cube data type specialised raster_cube (ARD images), vector_cube (ARD cube segmentation vectors). probs_cube (probabilities produced classification algorithms raster data), probs_vector_cube(probabilites generated vector classification segments), uncertainty_cube (cubes uncertainty information), class_cube (labelled maps). See code sits_plot.R example specialisation plot handle different classes raster data. ML/DL models sits result sits_train belong ml_model class. addition, models assigned second class, unique ML models (e.g, rfor_model, svm_model) generic DL torch based models (torch_model). class information used plotting models establishing model can run GPUs.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"literal-values-error-messages-and-colors","dir":"","previous_headings":"General structure of sits code.","what":"Literal values, error messages and colors","title":"Contributing to the sits R package","text":"internal sits code literal values, stored YAML configuration files ./inst/extdata/config.yml ./inst/extdata/config_internals.yml. first file contains configuration parameters relevant users, related visualisation plotting; second contains parameters relevant developers. values accessible using .conf function. example, value default size leaflet objects (64 MB) accessed using command .conf[\"view\", \"leaflet_megabytes\"]. Error messages also stored outside code YAML configuration file ./inst/extdata/config_messages.yml. values accessible using .conf function. example, error associated invalid NA value input parameter accessible using th function .conf(\"messages\", \".check_na_parameter\"). Color handling sits described Technical Annex section “colors work sits”. legends colors available default described YAML file ./inst/extdata/config_colors.yml.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"supporting-new-stac-based-image-catalogues","dir":"","previous_headings":"General structure of sits code.","what":"Supporting new STAC-based image catalogues","title":"Contributing to the sits R package","text":"want include STAC-based catalogue yet supported sits, encourage look existing implementations catalogues Microsoft Planetary Computer (MPC), Digital Earth Africa (DEA) AWS. STAC-based catalogues sits associated YAML description files, available directory .inst/exdata/sources. example, YAML file config_source_mpc.yml describes contents MPC collections supported sits. Please first provide YAML file lists detailed contents new catalogue wish include. Follow examples provided. writing YAML file, need consider access query new catalogue. entry point access catalogues sits_cube.stac_cube() function, turn calls sequence functions described generic interface api_source.R. calls API handled functions api_source_stac.R provides interface rstac package handles STAC queries. STAC catalogue different. STAC specification allows providers implement data descriptions specific information. reason, generic API described api_source.R needs specialized provider. Whenever provider needs specific implementations parts STAC protocol, include separate files. example, api_source_mpc.R implements specific quirks MPC platform. Similarly, specific support CDSE (Copernicus Data Space Environment) available api_source_cdse.R.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"supporting-new-machine-learning-and-deep-learning-algorithms","dir":"","previous_headings":"General structure of sits code.","what":"Supporting new Machine Learning and Deep Learning algorithms","title":"Contributing to the sits R package","text":"general terms, ML/DL algorithms sits encapsulated closures output sits_train() function. line established practices R, closure contains function classifies input values, well information samples used train model. Please read Technical Annex sits book. describes include new ML method, case lightGBM algorithm. Follow guidelines include new ML algorithm. aim include torch based deep learning method, addition understanding concepts presented Technical Annex please study carefully implementation sits_tempcnn() sits_lighttae(). Bear mind task provide new function compatible requirements ML/DL methods sits. function correctly implemented, able use connection rest sits.","code":""},{"path":"https://e-sensing.github.io/sits/contributing.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Contributing to the sits R package","text":"roadmap sits included part issues tracker. Issues created developers assigned milestones. milestone corresponds expected new version sits released CRAN.","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"sits open source R/Python package satellite image time series analysis. package developed R provides full access functions Python API. enables users apply machine learning techniques classifying image time series obtained earth observation data cubes. basic workflow sits : Select image collection cloud providers AWS, Brazil Data Cube, Digital Earth Africa, Copernicus Data Space Ecosystem, Digital Earth Australia, Microsoft Planetary Computer, NASA Harmonized Landsat/Sentinel, Open Geo Hub, Swiss Data Cube. Build regular data cube analysis-ready image collections. Merge data cube multisource analysis (e.g., Sentinel-1 Sentinel-2). Extract labelled time series data cubes used training samples. Perform samples quality control using self-organised maps. Train machine learning deep learning models. Tune deep learning models improved accuracy. Classify data cubes using machine learning deep learning models, GPU support available. Run spatial-temporal segmentation methods object-based time series classification. Post-process classified images Bayesian smoothing remove outliers. Estimate uncertainty values classified images. Evaluate classification accuracy using best practices. Improve results active learning self-supervised learning methods. Conceptual view data cubes (source: authors)","code":""},{"path":"https://e-sensing.github.io/sits/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"Detailed documentation use sits available e-book “Satellite Image Time Series Analysis Earth Observation Data Cubes”.","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/index.html","id":"pre-requisites","dir":"","previous_headings":"Installation","what":"Pre-Requisites","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"Since sits package developed R, run need R environment install R version sits. , users can optionally install Python API interface described .","code":""},{"path":"https://e-sensing.github.io/sits/index.html","id":"obtaining-sits-in-r","dir":"","previous_headings":"Installation","what":"Obtaining sits in R","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"installing latest version R CRAN archive, sits can also installed CRAN: latest supported version available github. may additional fixes version available CRAN.","code":"install.packages(\"sits\", dependencies = TRUE) devtools::install_github(\"e-sensing/sits\", dependencies = TRUE) # load the sits library library(sits) #> SITS - satellite image time series analysis. #> Loaded sits v1.5.3-1. #>         See ?sits for help, citation(\"sits\") for use in publication. #>         Documentation avaliable in https://e-sensing.github.io/sitsbook/"},{"path":"https://e-sensing.github.io/sits/index.html","id":"configuring-the-python-environment","dir":"","previous_headings":"Installation","what":"Configuring the Python environment","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"Python interface sits wrapper around R implementation. gives Python users access features sits package. use sits Python, one needs Python 3.10 higher. installing R version sits, please also install arrow R package. Python API sits available PyPi, can installed follows: Please follow examples SITS book examples Python usage.","code":"pip install pysits"},{"path":"https://e-sensing.github.io/sits/index.html","id":"support-for-gpu","dir":"","previous_headings":"Installation","what":"Support for GPU","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"users working deep learning models, sits supports GPU acceleration torch package, already included dependency install sits. provides significant performance improvements deep learning operations. torch package automatically detects available GPUs utilizes possible, requiring additional configuration cases.","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/index.html","id":"image-collections-accessible-by-sits","dir":"","previous_headings":"Building Earth Observation Data Cubes","what":"Image Collections Accessible by sits","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"Users create data cubes analysis-ready data (ARD) image collections available cloud services. collections accessible sits 1.5.3.1 : Brazil Data Cube - BDC: Open data collections Sentinel-2, Landsat-8 CBERS-4 images. Copernicus Data Space Environment CDSE: Open data collections EU Copernicus programme. Earth AWS - AWS: Sentinel-2/2A level 2A collections. Digital Earth Africa - DEAFRICA: Open data collection Sentinel-2/2A Landsat-8 Africa. Digital Earth Australia - DEAUSTRALIA: Open data collections Australian subcontinent. Microsoft Planetary Computer - MPC: Open data collection Sentinel-2/2A Landsat-8. NASA Harmonized Landsat/Sentinel Collection HLS. Open Geo Hub Harmonized Landsat-5/7/8 Collection OGH. Swiss Data Cube (SDC): Open data collection Sentinel-2/2A Landsat-8. USGS: Landsat-4/5/7/8 collections, open data. Open data collections require payment access fees. Except Brazil Data Cube, collections regular. Irregular collections require processing can used classification using machine learning models.","code":""},{"path":"https://e-sensing.github.io/sits/index.html","id":"building-a-data-cube-from-an-ard-image-collection","dir":"","previous_headings":"Building Earth Observation Data Cubes","what":"Building a Data Cube from an ARD Image Collection","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"following code defines irregular data cube Sentinel-2/2A images available Microsoft Planetary Computer, using open data collection \"SENTINEL-2-L2A\". geographical area data cube defined tiles \"20LKP\" \"20LLKP\", temporal extent start end date. Access cloud services works similar ways. cube irregular. timelines tiles \"20LKP\" \"20LLKP\" resolutions bands different. Sentinel-2 bands \"B03\" \"B08\" 10-meters resolution, band \"B11\" cloud band \"SCL\" 20-meters resolution. Irregular collections need additional processing step converted regular data cubes, described . Conceptual view data cubes (source: authors) defining irregular ARD image collection cloud service using sits_cube(), users run sits_regularize() build regular data cube. function uses gdalcubes R package, described Appel Pebesma, 2019. command builds regular data cube bands interpolated 60 m spatial resolution 15-days temporal resolution. Regular data cubes input sits functions time series retrieval, building machine learning models, classification raster images time series.","code":"s2_cube <- sits_cube(     source = \"MPC\",     collection = \"SENTINEL-2-L2A\",     tiles = c(\"20LKP\", \"20LLP\"),     bands = c(\"B03\", \"B08\", \"B11\", \"SCL\"),     start_date = as.Date(\"2018-07-01\"),     end_date = as.Date(\"2019-06-30\"),     progress = FALSE ) gc_cube <- sits_regularize(     cube          = s2_cube,     output_dir    = tempdir(),     period        = \"P15D\",     res           = 60,     multicores    = 4 )"},{"path":[]},{"path":"https://e-sensing.github.io/sits/index.html","id":"accessing-time-series-in-data-cubes","dir":"","previous_headings":"Working with Time Series in sits","what":"Accessing Time Series in Data Cubes","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"sits designed use satellite image time series derive machine learning models. data cube created, time series can retrieved individually using CSV SHP files, following example. example uses data cube local directory, whose images obtained \"MOD13Q1-6\" collection Brazil Data Cube. time series obtained, loaded tibble. first six columns contain metadata: spatial temporal location, label assigned sample, coverage data extracted. spatial location given longitude latitude coordinates. first sample labelled “Pasture”, location (-55.65931, -11.76267), considered valid period (2013-09-14, 2014-08-29).","code":"library(sits) # this data cube uses images from the Brazil Data Cube that have # downloaded to a local directory data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\") # create a cube from downloaded files raster_cube <- sits_cube(     source = \"BDC\",     collection = \"MOD13Q1-6.1\",     data_dir = data_dir,     delim = \"_\",     parse_info = c(\"X1\", \"X2\", \"tile\", \"band\", \"date\"),     progress = FALSE ) # obtain a set of samples defined by a CSV file csv_file <- system.file(\"extdata/samples/samples_sinop_crop.csv\",     package = \"sits\" ) # retrieve the time series associated with the samples from the data cube points <- sits_get_data(raster_cube, samples = csv_file) # show the time series points[1:3, ] #> # A tibble: 3 × 7 #>   longitude latitude start_date end_date   label    cube        time_series #>       <dbl>    <dbl> <date>     <date>     <chr>    <chr>       <list>      #> 1     -55.8    -11.7 2013-09-14 2014-08-29 Cerrado  MOD13Q1-6.1 <tibble>    #> 2     -55.8    -11.7 2013-09-14 2014-08-29 Cerrado  MOD13Q1-6.1 <tibble>    #> 3     -55.7    -11.7 2013-09-14 2014-08-29 Soy_Corn MOD13Q1-6.1 <tibble>"},{"path":[]},{"path":"https://e-sensing.github.io/sits/index.html","id":"training-machine-learning-models","dir":"","previous_headings":"Time Series Classification","what":"Training Machine Learning Models","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"sits provides support classification individual time series well data cubes. following machine learning methods available sits: Support vector machines (sits_svm()) Random forests (sits_rfor()) Extreme gradient boosting (sits_xgboost()) Multi-layer perceptrons (sits_mlp()) 1D convolution neural networks (sits_tempcnn()) Temporal self-attention encoder (sits_tae()) Lightweight temporal attention encoder (sits_lighttae()) following example illustrate train dataset classify individual time series. First use sits_train() function two parameters: training dataset (described ) chosen machine learning model (case, TempCNN). trained model used classify time series Mato Grosso Brazilian state, using sits_classify(). results can shown text format using function sits_show_prediction() graphically using plot. Classification NDVI time series using TempCNN following example shows classify data cube organized set raster images. result can also visualized interactively using sits_view(). Land use Land cover Sinop, MT, Brazil 2018","code":"# training data set data(\"samples_modis_ndvi\") # point to be classified data(\"point_mt_6bands\") # Train a deep learning model tempcnn_model <- sits_train(     samples = samples_modis_ndvi,     ml_method = sits_tempcnn() ) # Select NDVI band of the point to be classified # Classify using TempCNN model # Plot the result point_mt_6bands |>     sits_select(bands = \"NDVI\") |>     sits_classify(tempcnn_model) |>     plot() # Create a data cube to be classified # Cube is composed of MOD13Q1 images from the Sinop region in Mato Grosso (Brazil) data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\") sinop <- sits_cube(     source = \"BDC\",     collection = \"MOD13Q1-6.1\",     data_dir = data_dir,     delim = \"_\",     parse_info = c(\"X1\", \"X2\", \"tile\", \"band\", \"date\"),     progress = FALSE ) # Classify the raster cube, generating a probability file # Filter the pixels in the cube to remove noise probs_cube <- sits_classify(     data = sinop,     ml_model = tempcnn_model,     output_dir = tempdir() ) # apply a bayesian smoothing to remove outliers bayes_cube <- sits_smooth(     cube = probs_cube,     output_dir = tempdir() ) # generate a thematic map label_cube <- sits_label_classification(     cube = bayes_cube,     output_dir = tempdir() ) # plot the the labelled cube plot(label_cube)"},{"path":[]},{"path":"https://e-sensing.github.io/sits/index.html","id":"citable-papers-for-sits","dir":"","previous_headings":"Time Series Classification > References","what":"Citable papers for sits","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"use sits, please cite following paper: Rolf Simoes, Gilberto Camara, Gilberto Queiroz, Felipe Souza, Pedro R. Andrade, Lorena Santos, Alexandre Carvalho, Karine Ferreira. “Satellite Image Time Series Analysis Big Earth Observation Data”. Remote Sensing, 13: 2428, 2021. doi:10.3390/rs13132428. Additionally, sample quality control methods use self-organized maps described following reference: Lorena Santos, Karine Ferreira, Gilberto Camara, Michelle Picoli, Rolf Simoes, “Quality control class noise reduction satellite image time series”. ISPRS Journal Photogrammetry Remote Sensing, 177:75-88, 2021. doi:10.1016/j.isprsjprs.2021.04.014.","code":""},{"path":"https://e-sensing.github.io/sits/index.html","id":"acknowledgements-for-community-support","dir":"","previous_headings":"Time Series Classification","what":"Acknowledgements for community support","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"authors thankful contributions Edzer Pebesma, Jakub Nowosad. Marius Appel, Martin Tennekes, Robert Hijmans, Ron Wehrens, Tim Appelhans, respectively chief developers packages sf/stars, supercells, gdalcubes, tmap, terra, kohonen, leafem. grateful work Dirk Eddelbuettel Rcpp RcppArmadillo. sits package recognises great work RStudio team, including tidyverse. Many thanks Daniel Falbel great work torch luz packages. Charlotte Pelletier shared python code reused TempCNN machine learning model. like thank Maja Schneider sharing python code helped implementation sits_lighttae() sits_tae() model. recognize importance work Chris Holmes Mattias Mohr STAC specification API.","code":""},{"path":"https://e-sensing.github.io/sits/index.html","id":"acknowledgements-for-financial-and-material-support","dir":"","previous_headings":"Time Series Classification","what":"Acknowledgements for Financial and Material Support","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"acknowledge thank project funders provided financial material support: Amazon Fund, established Brazilian government financial contribution Norway, project contract Brazilian Development Bank (BNDES) Foundation Science, Technology Space Applications (FUNCATE), establishment Brazil Data Cube, process 17.2.0536.1. Coordenação de Aperfeiçoamento de Pessoal de Nível Superior-Brasil (CAPES) Conselho Nacional de Desenvolvimento Científico e Tecnológico (CNPq), providing MSc PhD scholarships. Sao Paulo Research Foundation (FAPESP) eScience Program grant 2014/08398-6, providing MSc, PhD post-doc scholarships, equipment, travel support. International Climate Initiative Germany Federal Ministry Environment, Nature Conservation, Building Nuclear Safety (IKI) grant 17-III-084- Global--RESTORE+ (“RESTORE+: Addressing Landscape Restoration Degraded Land Indonesia Brazil”). Microsoft Planetary Computer GEO-Microsoft Cloud Computer Grants Programme. Instituto Clima e Sociedade, project grant “Modernization PRODES DETER Amazon monitoring systems”. Open-Earth-Monitor Cyberinfrastructure project, received funding European Union’s Horizon Europe research innovation programme grant agreement . 101059548. FAO-EOSTAT initiative, uses next generation Earth observation tools produce land cover land use statistics.","code":""},{"path":"https://e-sensing.github.io/sits/index.html","id":"how-to-contribute","dir":"","previous_headings":"Time Series Classification","what":"How to contribute","title":"Satellite Image Time Series Analysis for Earth Observation Data Cubes","text":"sits project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://e-sensing.github.io/sits/reference/cerrado_2classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples of classes Cerrado and Pasture — cerrado_2classes","title":"Samples of classes Cerrado and Pasture — cerrado_2classes","text":"dataset containing tibble time series samples   Cerrado Pasture areas Mato Grosso state.   time series come MOD13Q1 collection 5 images.","code":""},{"path":"https://e-sensing.github.io/sits/reference/cerrado_2classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples of classes Cerrado and Pasture — cerrado_2classes","text":"","code":"data(cerrado_2classes)"},{"path":"https://e-sensing.github.io/sits/reference/cerrado_2classes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Samples of classes Cerrado and Pasture — cerrado_2classes","text":"tibble 736 rows 7 variables:   longitude: East-west coordinate time series sample (WGS 84),   latitude (North-south coordinate time series sample WGS 84),   start_date (initial date time series),   end_date (final date time series),   label (class label associated sample),   cube (name cube associated data),   time_series (list containing tibble values time series).","code":""},{"path":"https://e-sensing.github.io/sits/reference/dot-check_date_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Check is date is valid — .check_date_parameter","title":"Check is date is valid — .check_date_parameter","text":"Check date valid","code":""},{"path":"https://e-sensing.github.io/sits/reference/dot-check_date_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check is date is valid — .check_date_parameter","text":"","code":".check_date_parameter(   x,   len_min = 1L,   len_max = 1L,   allow_null = FALSE,   msg = NULL )"},{"path":"https://e-sensing.github.io/sits/reference/dot-check_date_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check is date is valid — .check_date_parameter","text":"x parameter checked len_min minimum length vector len_max maximum length vector allow_null allow NULL? msg Error message","code":""},{"path":"https://e-sensing.github.io/sits/reference/dot-check_date_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check is date is valid — .check_date_parameter","text":"Called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.probs_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"histogram of prob cubes — hist.probs_cube","title":"histogram of prob cubes — hist.probs_cube","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.probs_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"histogram of prob cubes — hist.probs_cube","text":"","code":"# S3 method for class 'probs_cube' hist(x, ..., tile = x[[\"tile\"]][[1L]], label = NULL, size = 100000L)"},{"path":"https://e-sensing.github.io/sits/reference/hist.probs_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"histogram of prob cubes — hist.probs_cube","text":"x Object classes \"raster_cube\". ... specifications summary. tile Tile shown label Label shown size Number cells sampled","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.probs_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"histogram of prob cubes — hist.probs_cube","text":"histogram one label probability cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.probs_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"histogram of prob cubes — hist.probs_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.probs_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"histogram of prob cubes — hist.probs_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     modis_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     probs_cube <- sits_classify(         data = modis_cube,         ml_model = rfor_model,         output_dir = tempdir()     )     hist(probs_cube, label = \"Forest\") }"},{"path":"https://e-sensing.github.io/sits/reference/hist.raster_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"histogram of data cubes — hist.raster_cube","title":"histogram of data cubes — hist.raster_cube","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.raster_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"histogram of data cubes — hist.raster_cube","text":"","code":"# S3 method for class 'raster_cube' hist(   x,   ...,   tile = x[[\"tile\"]][[1L]],   date = NULL,   band = NULL,   size = 100000L )"},{"path":"https://e-sensing.github.io/sits/reference/hist.raster_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"histogram of data cubes — hist.raster_cube","text":"x Object classes \"raster_cube\". ... specifications summary. tile Tile shown date Date shown band Band shown size Number cells sampled","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.raster_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"histogram of data cubes — hist.raster_cube","text":"histogram one band  data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.raster_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"histogram of data cubes — hist.raster_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.raster_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"histogram of data cubes — hist.raster_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     hist(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/hist.sits.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram — hist.sits","title":"Histogram — hist.sits","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.sits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram — hist.sits","text":"","code":"# S3 method for class 'sits' hist(x, ...)"},{"path":"https://e-sensing.github.io/sits/reference/hist.sits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram — hist.sits","text":"x Object classes \"sits\". ... specifications hist.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.sits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram — hist.sits","text":"summary sits tibble.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.sits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Histogram — hist.sits","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.sits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram — hist.sits","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     hist(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/hist.uncertainty_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram uncertainty cubes — hist.uncertainty_cube","title":"Histogram uncertainty cubes — hist.uncertainty_cube","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.uncertainty_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram uncertainty cubes — hist.uncertainty_cube","text":"","code":"# S3 method for class 'uncertainty_cube' hist(x, ..., tile = x[[\"tile\"]][[1L]], size = 100000L)"},{"path":"https://e-sensing.github.io/sits/reference/hist.uncertainty_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram uncertainty cubes — hist.uncertainty_cube","text":"x Object class \"variance_cube\" ... specifications hist. tile Tile summarized size Sample size","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.uncertainty_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram uncertainty cubes — hist.uncertainty_cube","text":"histogram uncertainty cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.uncertainty_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Histogram uncertainty cubes — hist.uncertainty_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/hist.uncertainty_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram uncertainty cubes — hist.uncertainty_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     uncert_cube <- sits_uncertainty(         cube = probs_cube,         output_dir = tempdir()     )     hist(uncert_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/impute_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NA values by linear interpolation — impute_linear","title":"Replace NA values by linear interpolation — impute_linear","text":"Remove NA linear interpolation","code":""},{"path":"https://e-sensing.github.io/sits/reference/impute_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NA values by linear interpolation — impute_linear","text":"","code":"impute_linear(data = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/impute_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NA values by linear interpolation — impute_linear","text":"data time series vector matrix","code":""},{"path":"https://e-sensing.github.io/sits/reference/impute_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace NA values by linear interpolation — impute_linear","text":"set filtered time series using                       imputation function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/impute_linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace NA values by linear interpolation — impute_linear","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot classified images — plot.class_cube","title":"Plot classified images — plot.class_cube","text":"plots classified raster using tmap.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot classified images — plot.class_cube","text":"","code":"# S3 method for class 'class_cube' plot(   x,   y,   ...,   tile = x[[\"tile\"]][[1L]],   roi = NULL,   legend = NULL,   palette = \"Spectral\",   scale = 1,   max_cog_size = 1024L,   legend_position = \"outside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot classified images — plot.class_cube","text":"x Object class \"class_cube\". y Ignored. ... specifications plot. tile Tile plotted. roi Spatial extent plot WGS 84 - named vector either (lon_min, lon_max, lat_min, lat_max) (xmin, xmax, ymin, ymax) legend Named vector associates labels colors. palette Alternative RColorBrewer palette scale Relative scale (0.4 1.0) plot text max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"outside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot classified images — plot.class_cube","text":" color map, pixel color                         associated label, defined legend                         parameter.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot classified images — plot.class_cube","text":"following optional parameters available allow detailed       control plot output: graticules_labels_size: size coord labels (default = 0.8) legend_title_size: relative size legend title (default = 1.0) legend_text_size: relative size legend text (default = 1.0) legend_bg_color: color legend background (default = \"white\") legend_bg_alpha: legend opacity (default = 0.5)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot classified images — plot.class_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot classified images — plot.class_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # label cube with the most likely class     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     # plot the resulting classified image     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Segments — plot.class_vector_cube","title":"Plot Segments — plot.class_vector_cube","text":"Plot vector classified cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Segments — plot.class_vector_cube","text":"","code":"# S3 method for class 'class_vector_cube' plot(   x,   ...,   tile = x[[\"tile\"]][[1L]],   legend = NULL,   seg_color = \"black\",   line_width = 0.5,   palette = \"Spectral\",   scale = 1,   legend_position = \"outside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Segments — plot.class_vector_cube","text":"x Object class \"segments\". ... specifications plot. tile Tile plotted. legend Named vector associates labels colors. seg_color Segment color. line_width Segment line width. palette Alternative RColorBrewer palette scale Scale plot map (0.4 1.0) legend_position place legend (default = \"outside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Segments — plot.class_vector_cube","text":"plot object RGB image                       B/W image color                       scale using chosen palette","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Segments — plot.class_vector_cube","text":"see color palettes supported, please run","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Segments — plot.class_vector_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.class_vector_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Segments — plot.class_vector_cube","text":"","code":"if (sits_run_examples()) {     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # segment the image     segments <- sits_segment(         cube = cube,         output_dir = tempdir()     )     # create a classification model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify the segments     probs_segs <- sits_classify(         data = segments,         ml_model = rfor_model,         output_dir = tempdir()     )     #     # Create a classified vector cube     class_segs <- sits_label_classification(         cube = probs_segs,         output_dir = tempdir(),         multicores = 2,         memsize = 4     )     # plot the segments     plot(class_segs) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot DEM cubes — plot.dem_cube","title":"Plot DEM cubes — plot.dem_cube","text":"Plot RGB raster cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot DEM cubes — plot.dem_cube","text":"","code":"# S3 method for class 'dem_cube' plot(   x,   ...,   band = \"ELEVATION\",   tile = x[[\"tile\"]][[1L]],   roi = NULL,   palette = \"Spectral\",   rev = TRUE,   scale = 1,   max_cog_size = 1024L,   legend_position = \"inside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot DEM cubes — plot.dem_cube","text":"x Object class \"dem_cube\". ... specifications plot. band Band plotting grey images. tile Tile plotted. roi Spatial extent plot WGS 84 - named vector either (lon_min, lon_max, lat_min, lat_max) (xmin, xmax, ymin, ymax) palette RColorBrewer palette rev Reverse color order palette? scale Scale plot map (0.4 1.0) max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"inside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot DEM cubes — plot.dem_cube","text":"plot object DEM cube                       B/W image color scale","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot DEM cubes — plot.dem_cube","text":"Use scale parameter general output control. following optional parameters available allow detailed       control plot output: graticules_labels_size: size coord labels (default = 0.7) legend_title_size: relative size legend title (default = 0.7) legend_text_size: relative size legend text (default = 0.7) legend_bg_color: color legend background (default = \"white\") legend_bg_alpha: legend opacity (default = 0.3)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot DEM cubes — plot.dem_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.dem_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot DEM cubes — plot.dem_cube","text":"","code":"if (sits_run_examples()) {     # obtain the DEM cube     dem_cube_19HBA <- sits_cube(         source = \"MPC\",         collection = \"COP-DEM-GLO-30\",         bands = \"ELEVATION\",         tiles = \"19HBA\"     )     # plot the DEM reversing the palette     plot(dem_cube_19HBA, band = \"ELEVATION\") }"},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a kernel density plot of samples distances. — plot.geo_distances","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"Make kernel density plot samples distances.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"","code":"# S3 method for class 'geo_distances' plot(x, y, ...)"},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"x Object class \"geo_distances\". y Ignored. ... specifications plot.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"plot showing sample--sample distances                       sample--prediction distances.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"Hanna Meyer Edzer Pebesma, \"Machine learning-based global maps ecological variables challenge assessing \" Nature Communications, 13,2022. doi:10.1038/s41467-022-29838-9 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"Felipe Souza, lipecaso@gmail.com Rolf Simoes, rolfsimoes@gmail.com Alber Sanchez, alber.ipia@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.geo_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a kernel density plot of samples distances. — plot.geo_distances","text":"","code":"if (sits_run_examples()) {     # read a shapefile for the state of Mato Grosso, Brazil     mt_shp <- system.file(\"extdata/shapefiles/mato_grosso/mt.shp\",         package = \"sits\"     )     # convert to an sf object     mt_sf <- sf::read_sf(mt_shp)     # calculate sample-to-sample and sample-to-prediction distances     distances <- sits_geo_dist(samples_modis_ndvi, mt_sf)     # plot sample-to-sample and sample-to-prediction distances     plot(distances) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series and data cubes — plot","title":"Plot time series and data cubes — plot","text":"generic function. Parameters depend specific type input.  See function description required parameters. sits tibble: see plot.sits patterns: see plot.patterns classified time series: see plot.predicted raster cube: see plot.raster_cube SAR cube: see plot.sar_cube DEM cube: see plot.dem_cube vector cube: see plot.vector_cube classification probabilities: see plot.probs_cube classification uncertainty: see plot.uncertainty_cube uncertainty vector cubes:       see plot.uncertainty_vector_cube classified cube: see plot.class_cube classified vector cube: see plot.class_vector_cube dendrogram cluster: see plot.sits_cluster SOM map: see plot.som_map SOM evaluate cluster: see plot.som_evaluate_cluster geo-distances: see plot.geo_distances random forest model: see plot.rfor_model xgboost model: see plot.xgb_model torch ML model: see plot.torch_model Plots time series used classification","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series and data cubes — plot","text":"","code":"# S3 method for class 'sits' plot(x, y, ..., together = TRUE)"},{"path":"https://e-sensing.github.io/sits/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series and data cubes — plot","text":"x Object class \"sits\". y Ignored. ... specifications plot. together logical value indicating whether samples plotted together.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series and data cubes — plot","text":"series plot objects produced ggplot2 showing   time series associated combination band label,   including median, first third quartile ranges.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot time series and data cubes — plot","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time series and data cubes — plot","text":"","code":"if (sits_run_examples()) {     # plot sets of time series     plot(cerrado_2classes) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot patterns that describe classes — plot.patterns","title":"Plot patterns that describe classes — plot.patterns","text":"Plots patterns (one plot per band/class combination)                Useful understand trends time series.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot patterns that describe classes — plot.patterns","text":"","code":"# S3 method for class 'patterns' plot(x, y, ..., bands = NULL, year_grid = FALSE)"},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot patterns that describe classes — plot.patterns","text":"x Object class \"patterns\". y Ignored. ... specifications plot. bands Bands viewed (optional). year_grid Plot grid panels using labels columns years rows. Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot patterns that describe classes — plot.patterns","text":"plot object produced ggplot2                       one average pattern per label.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot patterns that describe classes — plot.patterns","text":"code reused dtwSat package Victor Maus.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot patterns that describe classes — plot.patterns","text":"Gilberto Camara, gilberto.camara@inpe.br Victor Maus, vwmaus1@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot patterns that describe classes — plot.patterns","text":"","code":"if (sits_run_examples()) {     # plot patterns     plot(sits_patterns(cerrado_2classes)) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series predictions — plot.predicted","title":"Plot time series predictions — plot.predicted","text":"Given sits tibble set predictions, plot .              Useful show multi-year predictions time series.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series predictions — plot.predicted","text":"","code":"# S3 method for class 'predicted' plot(x, y, ..., bands = \"NDVI\", palette = \"Harmonic\")"},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series predictions — plot.predicted","text":"x Object class \"predicted\". y Ignored. ... specifications plot. bands Bands visualization. palette HCL palette used visualization case classes default sits palette.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series predictions — plot.predicted","text":"plot object produced ggplot2                       showing time series label.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot time series predictions — plot.predicted","text":"code reused dtwSat package Victor Maus.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot time series predictions — plot.predicted","text":"Victor Maus, vwmaus1@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.predicted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time series predictions — plot.predicted","text":"","code":"if (sits_run_examples()) {     # Retrieve the samples for Mato Grosso     # train an svm model     ml_model <- sits_train(samples_modis_ndvi, ml_method = sits_svm)     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     point_class <- sits_classify(         data = point_ndvi, ml_model = ml_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot probability cubes — plot.probs_cube","title":"Plot probability cubes — plot.probs_cube","text":"plots probability cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot probability cubes — plot.probs_cube","text":"","code":"# S3 method for class 'probs_cube' plot(   x,   ...,   tile = x[[\"tile\"]][[1L]],   roi = NULL,   labels = NULL,   palette = \"YlGn\",   rev = FALSE,   quantile = NULL,   scale = 1,   max_cog_size = 512L,   legend_position = \"outside\",   legend_title = \"probs\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot probability cubes — plot.probs_cube","text":"x Object class \"probs_cube\". ... specifications plot. tile Tile plotted. roi Spatial extent plot WGS 84 - named vector (see notes ) labels Labels plot. palette RColorBrewer palette rev Reverse order colors palette? quantile Minimum quantile plot scale Scale plot map (0.4 1.0) max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"outside\") legend_title Title legend (default = \"probs\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot probability cubes — plot.probs_cube","text":"plot containing probabilities associated                       class pixel. define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",             \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",              \"ymin\", \"ymax\") XY coordinates. Defining region interest using SpatExtent XY values      WGS84 requires crs parameter specified.      sits_regularize() function crop images      contain region interest().","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot probability cubes — plot.probs_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot probability cubes — plot.probs_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # plot the resulting probability cube     plot(probs_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_vector_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot probability vector cubes — plot.probs_vector_cube","title":"Plot probability vector cubes — plot.probs_vector_cube","text":"Plots probability vector cube, result first running segmentation sits_segment running machine learning classification model. result set polygons, assigned probability belonging specific class.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_vector_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot probability vector cubes — plot.probs_vector_cube","text":"","code":"# S3 method for class 'probs_vector_cube' plot(   x,   ...,   tile = x[[\"tile\"]][[1L]],   labels = NULL,   palette = \"YlGn\",   rev = FALSE,   scale = 1,   legend_position = \"outside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_vector_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot probability vector cubes — plot.probs_vector_cube","text":"x Object class \"probs_vector_cube\". ... specifications plot. tile Tile plotted. labels Labels plot palette RColorBrewer palette rev Reverse order colors palette? scale Scale plot map (0.4 1.0) legend_position place legend (default = \"outside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_vector_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot probability vector cubes — plot.probs_vector_cube","text":"plot containing probabilities associated                       class pixel.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_vector_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot probability vector cubes — plot.probs_vector_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.probs_vector_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot probability vector cubes — plot.probs_vector_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # segment the image     segments <- sits_segment(         cube = cube,         seg_fn = sits_slic(             step = 5,             compactness = 1,             dist_fun = \"euclidean\",             avg_fun = \"median\",             iter = 20,             minarea = 10,             verbose = FALSE         ),         output_dir = tempdir()     )     # classify a data cube     probs_vector_cube <- sits_classify(         data = segments,         ml_model = rfor_model,         output_dir = tempdir()     )     # plot the resulting probability cube     plot(probs_vector_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RGB data cubes — plot.raster_cube","title":"Plot RGB data cubes — plot.raster_cube","text":"Plot RGB raster cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RGB data cubes — plot.raster_cube","text":"","code":"# S3 method for class 'raster_cube' plot(   x,   ...,   band = NULL,   red = NULL,   green = NULL,   blue = NULL,   tile = x[[\"tile\"]][[1L]],   dates = NULL,   roi = NULL,   palette = \"RdYlGn\",   rev = FALSE,   scale = 1,   first_quantile = 0.02,   last_quantile = 0.98,   max_cog_size = 1024L,   legend_position = \"inside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RGB data cubes — plot.raster_cube","text":"x Object class \"raster_cube\". ... specifications plot. band Band plotting grey images. red Band red color. green Band green color. blue Band blue color. tile Tile plotted. dates Dates plotted roi Spatial extent plot WGS 84 - named vector either (lon_min, lon_max, lat_min, lat_max) (xmin, xmax, ymin, ymax) palette RColorBrewer palette rev Reverse color order palette? scale Scale plot map (0.4 1.0) first_quantile First quantile stretching images last_quantile Last quantile stretching images max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"inside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot RGB data cubes — plot.raster_cube","text":"plot object RGB image                       B/W image color scale","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot RGB data cubes — plot.raster_cube","text":"Use scale parameter general output control.       dates parameter indicates       date allows plotting different dates       single band three dates provided, `sits` plot       multi-temporal RGB image single band (useful case       SAR data). RGB bands multi-dates, multiple plots       produced. user provide band names b/w RGB plots, also provide dates, plot.raster_cube tries display reasonable color composites, using following algorithm: image sits associated source collection (e.g, \"MPC\" \"SENTINEL-2-L2A\"). source/collection pair, sits set possible color composites stored \"./extdata/config_colors.yml\". example, following composites available \"SENTINEL-2\" images: AGRICULTURE: (\"B11\", \"B08\", \"B02\") AGRICULTURE2: (\"B11\", \"B8A\", \"B02\") SWIR: (\"B11\", \"B08\", \"B04\") SWIR2: (\"B12\", \"B08\", \"B04\") SWIR3: (\"B12\", \"B8A\", \"B04\") RGB: (\"B04\", \"B03\", \"B02\") RGB-FALSE1  : (\"B08\", \"B06\", \"B04\") RGB-FALSE2  : (\"B08\", \"B11\", \"B04\") sits tries find bands required one       color composites part cube. exist,       RGB composite selected. Otherwise, first       available band chosen. selecting bands, algorithm looks       date smallest percentage cloud cover       selects date displayed. . following optional parameters available allow detailed       control plot output: graticules_labels_size: size coord labels (default = 0.7) legend_title_size: size legend title (default = 0.7) legend_text_size: size legend text (default = 0.7) legend_bg_color: color legend background (default = \"white\") legend_bg_alpha: legend opacity (default = 0.3)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot RGB data cubes — plot.raster_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.raster_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot RGB data cubes — plot.raster_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # plot NDVI band of the least cloud cover date     plot(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Random Forest model — plot.rfor_model","title":"Plot Random Forest model — plot.rfor_model","text":"Plots important variables random forest model.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Random Forest model — plot.rfor_model","text":"","code":"# S3 method for class 'rfor_model' plot(x, y, ...)"},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Random Forest model — plot.rfor_model","text":"x Object class \"rf_model\". y Ignored. ... specifications plot.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Random Forest model — plot.rfor_model","text":"random forest object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Random Forest model — plot.rfor_model","text":"Please refer sits documentation available https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Random Forest model — plot.rfor_model","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.rfor_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Random Forest model — plot.rfor_model","text":"","code":"if (sits_run_examples()) {     # Retrieve the samples for Mato Grosso     # train a random forest model     rf_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor())     # plot the model     plot(rf_model) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SAR data cubes — plot.sar_cube","title":"Plot SAR data cubes — plot.sar_cube","text":"Plot SAR raster cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SAR data cubes — plot.sar_cube","text":"","code":"# S3 method for class 'sar_cube' plot(   x,   ...,   band = NULL,   red = NULL,   green = NULL,   blue = NULL,   tile = x[[\"tile\"]][[1L]],   dates = NULL,   roi = NULL,   palette = \"Greys\",   rev = FALSE,   scale = 1,   first_quantile = 0.05,   last_quantile = 0.95,   max_cog_size = 1024L,   legend_position = \"inside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SAR data cubes — plot.sar_cube","text":"x Object class \"raster_cube\". ... specifications plot. band Band plotting grey images. red Band red color. green Band green color. blue Band blue color. tile Tile plotted. dates Dates plotted. roi Spatial extent plot WGS 84 - named vector either (lon_min, lon_max, lat_min, lat_max) (xmin, xmax, ymin, ymax) palette RColorBrewer palette rev Reverse color order palette? scale Scale plot map (0.4 1.0) first_quantile First quantile stretching images last_quantile Last quantile stretching images max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"inside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SAR data cubes — plot.sar_cube","text":"plot object RGB image                       B/W image color scale SAR cubes","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot SAR data cubes — plot.sar_cube","text":"Use scale parameter general output control.       dates parameter indicates date       allows plotting different dates       single band three dates provided, `sits` plot       multi-temporal RGB image single band (useful case       SAR data). RGB bands multi-dates, multiple plots       produced. following optional parameters available allow detailed       control plot output: graticules_labels_size: size coord labels (default = 0.7) legend_title_size: relative size legend title (default = 0.7) legend_text_size: relative size legend text (default = 0.7) legend_bg_color: color legend background (default = \"white\") legend_bg_alpha: legend opacity (default = 0.3)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot SAR data cubes — plot.sar_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sar_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot SAR data cubes — plot.sar_cube","text":"","code":"if (sits_run_examples()) {     # create a SAR data cube from cloud services     cube_s1_grd <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-1-GRD\",         bands = c(\"VV\", \"VH\"),         orbit = \"descending\",         tiles = c(\"21LUJ\"),         start_date = \"2021-08-01\",         end_date = \"2021-09-30\"     )     # plot VH band of the first date of the data cube     plot(cube_s1_grd, band = \"VH\") }"},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot confusion matrix — plot.sits_accuracy","title":"Plot confusion matrix — plot.sits_accuracy","text":"Plot bar graph informations confusion matrix","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot confusion matrix — plot.sits_accuracy","text":"","code":"# S3 method for class 'sits_accuracy' plot(x, y, ..., title = \"Confusion matrix\")"},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot confusion matrix — plot.sits_accuracy","text":"x Object class \"plot.sits_accuracy\". y Ignored. ... specifications plot. title Title plot.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot confusion matrix — plot.sits_accuracy","text":"plot object produced ggplot2 package                      containing color bars showing confusion                      classes.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_accuracy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot confusion matrix — plot.sits_accuracy","text":"Gilberto Camara gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot confusion matrix — plot.sits_accuracy","text":"","code":"if (sits_run_examples()) {     # show accuracy for a set of samples     train_data <- sits_sample(samples_modis_ndvi, frac = 0.5)     test_data <- sits_sample(samples_modis_ndvi, frac = 0.5)     # compute a random forest model     rfor_model <- sits_train(train_data, sits_rfor())     # classify training points     points_class <- sits_classify(         data = test_data, ml_model = rfor_model     )     # calculate accuracy     acc <- sits_accuracy(points_class)     # plot accuracy     plot(acc) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a dendrogram cluster — plot.sits_cluster","title":"Plot a dendrogram cluster — plot.sits_cluster","text":"Plot dendrogram","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a dendrogram cluster — plot.sits_cluster","text":"","code":"# S3 method for class 'sits_cluster' plot(x, ..., cluster, cutree_height, palette)"},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a dendrogram cluster — plot.sits_cluster","text":"x sits tibble cluster indexes. ... specifications plot. cluster cluster object produced `sits_cluster` function. cutree_height dashed horizontal line drawn indicating height dendrogram cutting. palette HCL color palette.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a dendrogram cluster — plot.sits_cluster","text":"dendrogram object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a dendrogram cluster — plot.sits_cluster","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.sits_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a dendrogram cluster — plot.sits_cluster","text":"","code":"if (sits_run_examples()) {     samples <- sits_cluster_dendro(cerrado_2classes,         bands = c(\"NDVI\", \"EVI\")     ) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.som_clean_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SOM samples evaluated — plot.som_clean_samples","title":"Plot SOM samples evaluated — plot.som_clean_samples","text":"useful visualize output SOM evaluation, classifies samples \"clean\" (good samples), \"remove\" (possible outliers), \"analyse\" (borderline cases). function plots percentual distribution SOM evaluation per class. use , please run sits_som_clean_samples using parameter \"keep\" \"c(\"clean\", \"analyze\", \"remove\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_clean_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SOM samples evaluated — plot.som_clean_samples","text":"","code":"# S3 method for class 'som_clean_samples' plot(x, ...)"},{"path":"https://e-sensing.github.io/sits/reference/plot.som_clean_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SOM samples evaluated — plot.som_clean_samples","text":"x Object class \"som_clean_samples\". ... specifications plot.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_clean_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SOM samples evaluated — plot.som_clean_samples","text":"Called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_clean_samples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot SOM samples evaluated — plot.som_clean_samples","text":"Estefania Pizarro, eapizarroa@ine.gob.cl","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_clean_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot SOM samples evaluated — plot.som_clean_samples","text":"","code":"if (sits_run_examples()) {     # create a SOM map     som_map <- sits_som_map(samples_modis_ndvi)     # plot the SOM map     eval <- sits_som_clean_samples(som_map)     plot(eval) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.som_evaluate_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot confusion between clusters — plot.som_evaluate_cluster","title":"Plot confusion between clusters — plot.som_evaluate_cluster","text":"Plot bar graph informations cluster. percentage mixture clusters.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_evaluate_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot confusion between clusters — plot.som_evaluate_cluster","text":"","code":"# S3 method for class 'som_evaluate_cluster' plot(x, y, ..., name_cluster = NULL, title = \"Confusion by cluster\")"},{"path":"https://e-sensing.github.io/sits/reference/plot.som_evaluate_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot confusion between clusters — plot.som_evaluate_cluster","text":"x Object class \"plot.som_evaluate_cluster\". y Ignored. ... specifications plot. name_cluster Choose cluster plot. title Title plot.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_evaluate_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot confusion between clusters — plot.som_evaluate_cluster","text":"plot object produced ggplot2 package                      containing color bars showing confusion                      classes.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_evaluate_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot confusion between clusters — plot.som_evaluate_cluster","text":"Lorena Santos lorena.santos@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_evaluate_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot confusion between clusters — plot.som_evaluate_cluster","text":"","code":"if (sits_run_examples()) {     # create a SOM map     som_map <- sits_som_map(samples_modis_ndvi)     # evaluate the SOM cluster     som_clusters <- sits_som_evaluate_cluster(som_map)     # plot the SOM cluster evaluation     plot(som_clusters) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.som_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a SOM map — plot.som_map","title":"Plot a SOM map — plot.som_map","text":"plots SOM map generated \"sits_som_map\". plot function produces different plots based input data. type \"codes\", plots vector weight neuron. type \"mapping\", shows samples mapped.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a SOM map — plot.som_map","text":"","code":"# S3 method for class 'som_map' plot(x, y, ..., type = \"codes\", legend = NULL, band = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/plot.som_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a SOM map — plot.som_map","text":"x Object class \"som_map\". y Ignored. ... specifications plot. type Type plot: \"codes\" neuron weight (time series) \"mapping\" number samples allocated neuron. legend Legend colors plotted band band plotted (character)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a SOM map — plot.som_map","text":"Called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a SOM map — plot.som_map","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.som_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a SOM map — plot.som_map","text":"","code":"if (sits_run_examples()) {     # create a SOM map     som_map <- sits_som_map(samples_modis_ndvi)     # plot the SOM map     plot(som_map) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Torch (deep learning) model — plot.torch_model","title":"Plot Torch (deep learning) model — plot.torch_model","text":"Plots deep learning model developed using torch.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Torch (deep learning) model — plot.torch_model","text":"","code":"# S3 method for class 'torch_model' plot(x, y, ...)"},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Torch (deep learning) model — plot.torch_model","text":"x Object class \"torch_model\". y Ignored. ... specifications plot.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Torch (deep learning) model — plot.torch_model","text":"plot object produced ggplot2 package                       showing evolution loss                       accuracy model.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Torch (deep learning) model — plot.torch_model","text":"code lifted \"keras\" package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Torch (deep learning) model — plot.torch_model","text":"Felipe Carvalho, lipecaso@gmail.com Rolf Simoes, rolfsimoes@gmail.com Alber Sanchez, alber.ipia@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.torch_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Torch (deep learning) model — plot.torch_model","text":"","code":"if (sits_run_examples()) {     # Retrieve the samples for Mato Grosso     # train a tempCNN model     ml_model <- sits_train(samples_modis_ndvi, ml_method = sits_tempcnn)     # plot the model     plot(ml_model) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot uncertainty cubes — plot.uncertainty_cube","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"plots uncertainty cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"","code":"# S3 method for class 'uncertainty_cube' plot(   x,   ...,   tile = x[[\"tile\"]][[1L]],   roi = NULL,   palette = \"RdYlGn\",   rev = TRUE,   scale = 1,   first_quantile = 0.02,   last_quantile = 0.98,   max_cog_size = 1024L,   legend_position = \"inside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"x Object class \"probs_image\". ... specifications plot. tile Tiles plotted. roi Spatial extent plot WGS 84 - named vector either (lon_min, lon_max, lat_min, lat_max) (xmin, xmax, ymin, ymax) palette RColorBrewer palette rev Reverse color order palette? scale Scale plot map (0.4 1.0) first_quantile First quantile stretching images last_quantile Last quantile stretching images max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"inside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"plot object produced showing uncertainty                       associated classified pixel.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"following optional parameters available allow detailed       control plot output: graticules_labels_size: size coord labels (default = 0.7) legend_title_size: relative size legend title (default = 1.0) legend_text_size: relative size legend text (default = 1.0) legend_bg_color: color legend background (default = \"white\") legend_bg_alpha: legend opacity (default = 0.5)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot uncertainty cubes — plot.uncertainty_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # calculate uncertainty     uncert_cube <- sits_uncertainty(probs_cube, output_dir = tempdir())     # plot the resulting uncertainty cube     plot(uncert_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_vector_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","title":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","text":"plots probability cube using stars","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_vector_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","text":"","code":"# S3 method for class 'uncertainty_vector_cube' plot(   x,   ...,   tile = x[[\"tile\"]][[1L]],   palette = \"RdYlGn\",   rev = TRUE,   scale = 1,   legend_position = \"inside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_vector_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","text":"x Object class \"probs_vector_cube\". ... specifications plot. tile Tile plotted. palette RColorBrewer palette rev Reverse order colors palette? scale Scale plot map (0.4 1.0) legend_position place legend (default = \"inside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_vector_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","text":"plot containing probabilities associated                       class pixel.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_vector_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.uncertainty_vector_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot uncertainty vector cubes — plot.uncertainty_vector_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # segment the image     segments <- sits_segment(         cube = cube,         seg_fn = sits_slic(             step = 5,             compactness = 1,             dist_fun = \"euclidean\",             avg_fun = \"median\",             iter = 20,             minarea = 10,             verbose = FALSE         ),         output_dir = tempdir()     )     # classify a data cube     probs_vector_cube <- sits_classify(         data = segments,         ml_model = rfor_model,         output_dir = tempdir()     )     # measure uncertainty     uncert_vector_cube <- sits_uncertainty(         cube = probs_vector_cube,         type = \"margin\",         output_dir = tempdir()     )     # plot the resulting uncertainty cube     plot(uncert_vector_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.variance_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot variance cubes — plot.variance_cube","title":"Plot variance cubes — plot.variance_cube","text":"Plots variance cube, useful understand local smoothing work.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.variance_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot variance cubes — plot.variance_cube","text":"","code":"# S3 method for class 'variance_cube' plot(   x,   ...,   tile = x[[\"tile\"]][[1L]],   roi = NULL,   labels = NULL,   palette = \"YlGnBu\",   rev = FALSE,   type = \"map\",   quantile = 0.75,   scale = 1,   max_cog_size = 1024L,   legend_position = \"inside\",   legend_title = \"logvar\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.variance_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot variance cubes — plot.variance_cube","text":"x Object class \"variance_cube\". ... specifications plot. tile Tile plotted. roi Spatial extent plot WGS 84 - named vector either (lon_min, lon_max, lat_min, lat_max) (xmin, xmax, ymin, ymax) labels Labels plot. palette RColorBrewer palette rev Reverse order colors palette? type Type plot (\"map\" \"hist\") quantile Minimum quantile plot scale Scale plot map (0.4 1.0) max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"inside\") legend_title Title legend (default = \"probs\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.variance_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot variance cubes — plot.variance_cube","text":"plot containing local variances associated                        logit probability pixel class.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.variance_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot variance cubes — plot.variance_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.variance_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot variance cubes — plot.variance_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # obtain a variance cube     var_cube <- sits_variance(probs_cube, output_dir = tempdir())     # plot the variance cube     plot(var_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RGB vector data cubes — plot.vector_cube","title":"Plot RGB vector data cubes — plot.vector_cube","text":"Plot vector data cube segments top raster image. Vector cubes vector raster component. vector part segments produced sits_segment. visual output controlled \"seg_color\" \"line_width\" parameters. raster output works way false color RGB plots.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RGB vector data cubes — plot.vector_cube","text":"","code":"# S3 method for class 'vector_cube' plot(   x,   ...,   band = NULL,   red = NULL,   green = NULL,   blue = NULL,   tile = x[[\"tile\"]][[1L]],   dates = NULL,   seg_color = \"yellow\",   line_width = 0.3,   palette = \"RdYlGn\",   rev = FALSE,   scale = 1,   first_quantile = 0.02,   last_quantile = 0.98,   max_cog_size = 1024L,   legend_position = \"inside\" )"},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RGB vector data cubes — plot.vector_cube","text":"x Object class \"raster_cube\". ... specifications plot. band Band plotting grey images. red Band red color. green Band green color. blue Band blue color. tile Tile plotted. dates Dates plotted. seg_color Color show segment boundaries line_width Line width plot segments boundary (pixels) palette RColorBrewer palette rev Reverse color order palette? scale Scale plot map (0.4 1.5) first_quantile First quantile stretching images last_quantile Last quantile stretching images max_cog_size Maximum size COG overviews (lines columns) legend_position place legend (default = \"inside\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot RGB vector data cubes — plot.vector_cube","text":"plot object RGB image                       B/W image color                       scale using palette","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot RGB vector data cubes — plot.vector_cube","text":"following optional parameters available allow detailed       control plot output: graticules_labels_size: size coord labels (default = 0.7) legend_title_size: relative size legend title (default = 0.7) legend_text_size: relative size legend text (default = 0.7) legend_bg_color: color legend background (default = \"white\") legend_bg_alpha: legend opacity (default = 0.3)","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot RGB vector data cubes — plot.vector_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.vector_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot RGB vector data cubes — plot.vector_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # Segment the cube     segments <- sits_segment(         cube = cube,         output_dir = tempdir(),         multicores = 2,         memsize = 4     )     # plot NDVI band of the second date date of the data cube     plot(segments, band = \"NDVI\", date = sits_timeline(cube)[1]) }"},{"path":"https://e-sensing.github.io/sits/reference/plot.xgb_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot XGB model — plot.xgb_model","title":"Plot XGB model — plot.xgb_model","text":"Plots trees extreme gradient boosting model.","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.xgb_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot XGB model — plot.xgb_model","text":"","code":"# S3 method for class 'xgb_model' plot(x, ..., trees = 0L:4L, width = 1500L, height = 1900L)"},{"path":"https://e-sensing.github.io/sits/reference/plot.xgb_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot XGB model — plot.xgb_model","text":"x Object class \"xgb_model\". ... specifications plot. trees Vector trees plotted width Width output window height Height output window","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.xgb_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot XGB model — plot.xgb_model","text":"plot","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.xgb_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot XGB model — plot.xgb_model","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/plot.xgb_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot XGB model — plot.xgb_model","text":"","code":"if (sits_run_examples()) {     # Retrieve the samples for Mato Grosso     # train an extreme gradient boosting     xgb_model <- sits_train(samples_modis_ndvi,         ml_method = sits_xgboost()     )     plot(xgb_model) }"},{"path":"https://e-sensing.github.io/sits/reference/point_mt_6bands.html","id":null,"dir":"Reference","previous_headings":"","what":"A time series sample with data from 2000 to 2016 — point_mt_6bands","title":"A time series sample with data from 2000 to 2016 — point_mt_6bands","text":"dataset containing tibble one time series samples    Mato Grosso state Brazil.    time series comes MOD13Q1 collection 6 images.","code":""},{"path":"https://e-sensing.github.io/sits/reference/point_mt_6bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A time series sample with data from 2000 to 2016 — point_mt_6bands","text":"","code":"data(point_mt_6bands)"},{"path":"https://e-sensing.github.io/sits/reference/point_mt_6bands.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A time series sample with data from 2000 to 2016 — point_mt_6bands","text":"tibble 1 rows 7 variables:   longitude: East-west coordinate time series sample (WGS 84),   latitude (North-south coordinate time series sample WGS 84),   start_date (initial date time series),   end_date (final date time series),   label (class label associated sample),   cube (name cube associated data),   time_series (list containing tibble values time series).","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the values of a confusion matrix — print.sits_accuracy","title":"Print the values of a confusion matrix — print.sits_accuracy","text":"Adaptation caret::print.confusionMatrix method              common usage Earth Observation.","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the values of a confusion matrix — print.sits_accuracy","text":"","code":"# S3 method for class 'sits_accuracy' print(x, ..., digits = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/print.sits_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the values of a confusion matrix — print.sits_accuracy","text":"x Object class confusionMatrix. ... parameters passed \"print\" function. digits Number significant digits printed.","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the values of a confusion matrix — print.sits_accuracy","text":"Called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_accuracy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the values of a confusion matrix — print.sits_accuracy","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_area_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the area-weighted accuracy — print.sits_area_accuracy","title":"Print the area-weighted accuracy — print.sits_area_accuracy","text":"Adaptation caret::print.confusionMatrix method              common usage Earth Observation.","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_area_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the area-weighted accuracy — print.sits_area_accuracy","text":"","code":"# S3 method for class 'sits_area_accuracy' print(x, ..., digits = 2L)"},{"path":"https://e-sensing.github.io/sits/reference/print.sits_area_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the area-weighted accuracy — print.sits_area_accuracy","text":"x object class sits_area_accuracy. ... parameters passed \"print\" function digits Significant digits","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_area_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the area-weighted accuracy — print.sits_area_accuracy","text":"Called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/print.sits_area_accuracy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the area-weighted accuracy — print.sits_area_accuracy","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/samples_l8_rondonia_2bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples of Amazon tropical forest biome for deforestation analysis — samples_l8_rondonia_2bands","title":"Samples of Amazon tropical forest biome for deforestation analysis — samples_l8_rondonia_2bands","text":"sits tibble time series samples Brazilian Amazonia rain forest. labels : \"Deforestation\", \"Forest\", \"NatNonForest\" \"Pasture\". time series extracted Landsat-8 BDC data cube (collection = \"LC8_30_16D_STK-1\", tiles = \"038047\"). time series comprehends period 12 months (25 observations) \"2018-07-12\" \"2019-07-28\". extracted bands NDVI EVI. Cloudy values removed interpolated.","code":""},{"path":"https://e-sensing.github.io/sits/reference/samples_l8_rondonia_2bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples of Amazon tropical forest biome for deforestation analysis — samples_l8_rondonia_2bands","text":"","code":"data(\"samples_l8_rondonia_2bands\")"},{"path":"https://e-sensing.github.io/sits/reference/samples_l8_rondonia_2bands.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Samples of Amazon tropical forest biome for deforestation analysis — samples_l8_rondonia_2bands","text":"sits tibble 160 samples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/samples_modis_ndvi.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples of nine classes for the state of Mato Grosso — samples_modis_ndvi","title":"Samples of nine classes for the state of Mato Grosso — samples_modis_ndvi","text":"dataset containing tibble time series samples   Mato Grosso state Brasil.   time series come MOD13Q1 collection 6 images.   data set following classes:   Cerrado(379 samples), Forest (131 samples),   Pasture (344 samples), Soy_Corn (364 samples).","code":""},{"path":"https://e-sensing.github.io/sits/reference/samples_modis_ndvi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples of nine classes for the state of Mato Grosso — samples_modis_ndvi","text":"","code":"data(samples_modis_ndvi)"},{"path":"https://e-sensing.github.io/sits/reference/samples_modis_ndvi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Samples of nine classes for the state of Mato Grosso — samples_modis_ndvi","text":"tibble 1308 rows 7 variables:   longitude: East-west coordinate time series sample (WGS 84),   latitude (North-south coordinate time series sample WGS 84),   start_date (initial date time series),   end_date (final date time series),   label (class label associated sample),   cube (name cube associated data),   time_series (list containing tibble values time series).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sits — sits-package","title":"sits — sits-package","text":"Satellite Image Time Series Analysis              Earth Observation Data Cubes","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"sits — sits-package","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits-package.html","id":"purpose","dir":"Reference","previous_headings":"","what":"Purpose","title":"sits — sits-package","text":"SITS package provides set tools analysis, visualization classification satellite image time series. includes methods filtering, clustering, classification, post-processing.","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/reference/sits-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sits — sits-package","text":"Maintainer: Gilberto Camara gilberto.camara.inpe@gmail.com [thesis advisor] Authors: Rolf Simoes rolfsimoes@gmail.com Felipe Souza felipe.carvalho@inpe.br Felipe Carlos efelipecarlos@gmail.com contributors: Lorena Santos lorena.santos@inpe.br [contributor] Charlotte Pelletier charlotte.pelletier@univ-ubs.fr [contributor] Estefania Pizarro eapizarroa@ine.gob.cl [contributor] Karine Ferreira karine.ferreira@inpe.br [contributor, thesis advisor] Alber Sanchez alber.ipia@inpe.br [contributor] Alexandre Assuncao alexcarssuncao@gmail.com [contributor] Daniel Falbel dfalbel@gmail.com [contributor] Gilberto Queiroz gilberto.queiroz@inpe.br [contributor] Johannes Reiche johannes.reiche@wur.nl [contributor] Pedro Andrade pedro.andrade@inpe.br [contributor] Pedro Brito pedro_brito1997@hotmail.com [contributor] Renato Assuncao assuncaoest@gmail.com [contributor] Ricardo Cartaxo rcartaxoms@gmail.com [contributor]","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess classification accuracy — sits_accuracy","title":"Assess classification accuracy — sits_accuracy","text":"function calculates accuracy classification result. input either set classified time series classified data cube. Classified time series produced sits_classify. Classified images generated using sits_classify followed sits_label_classification. set time series, sits_accuracy creates confusion matrix calculates resulting statistics using package caret. classified image, function uses area-weighted technique proposed Olofsson et al. according references [1-3] produce reliable accuracy estimates 95% confidence level. cases, provides accuracy assessment classified, including Overall Accuracy, Kappa, User's Accuracy, Producer's Accuracy error matrix (confusion matrix).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess classification accuracy — sits_accuracy","text":"","code":"sits_accuracy(data, ...)  # S3 method for class 'sits' sits_accuracy(data, ...)  # S3 method for class 'class_vector_cube' sits_accuracy(data, ..., prediction_attr, reference_attr)  # S3 method for class 'class_cube' sits_accuracy(data, ..., validation, method = \"olofsson\")  # S3 method for class 'raster_cube' sits_accuracy(data, ...)  # S3 method for class 'derived_cube' sits_accuracy(data, ...)  # S3 method for class 'tbl_df' sits_accuracy(data, ...)  # Default S3 method sits_accuracy(data, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess classification accuracy — sits_accuracy","text":"data Either data cube classified images set time series ... Specific parameters prediction_attr Name column segments object contains predicted values (vector class cubes) reference_attr Name column segments object contains reference values (vector class cubes) validation Samples validation (see ) required data raster class cube. method character 'olofsson' 'pixel' compute accuracy (raster class cubes)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess classification accuracy — sits_accuracy","text":"list lists: error_matrix, class_areas, unbiased estimated areas, standard error areas, confidence interval 95 accuracy (user, producer, overall), NULL data empty. result assigned class \"sits_accuracy\" can visualized directly screen.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assess classification accuracy — sits_accuracy","text":"`validation` data needs contain following columns: \"latitude\",  \"longitude\", \"start_date\", \"end_date\", \"label\". can either  path CSV file, sits tibble, data frame, sf object. `validation` sf object, columns \"latitude\" \"longitude\" required locations extracted geometry column. `centroid` calculated extracting location values geometry type.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Assess classification accuracy — sits_accuracy","text":"[1] Olofsson, P., Foody, G.M., Stehman, S.V., Woodcock, C.E. (2013). Making better use accuracy data land change studies: Estimating accuracy area quantifying uncertainty using stratified estimation. Remote Sensing Environment, 129, pp.122-131. [2] Olofsson, P., Foody G.M., Herold M., Stehman, S.V., Woodcock, C.E., Wulder, M.. (2014) Good practices estimating area assessing accuracy land change. Remote Sensing Environment, 148, pp. 42-57. [3] FAO, Map Accuracy Assessment Area Estimation: Practical Guide. National forest monitoring assessment working paper .46/E, 2016.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assess classification accuracy — sits_accuracy","text":"Rolf Simoes, rolfsimoes@gmail.com Alber Sanchez, alber.ipia@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess classification accuracy — sits_accuracy","text":"","code":"if (sits_run_examples()) {     # show accuracy for a set of samples     train_data <- sits_sample(samples_modis_ndvi, frac = 0.5)     test_data <- sits_sample(samples_modis_ndvi, frac = 0.5)     rfor_model <- sits_train(train_data, sits_rfor())     points_class <- sits_classify(         data = test_data, ml_model = rfor_model     )     acc <- sits_accuracy(points_class)      # show accuracy for a data cube classification     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     # obtain the ground truth for accuracy assessment     ground_truth <- system.file(\"extdata/samples/samples_sinop_crop.csv\",         package = \"sits\"     )     # make accuracy assessment     as <- sits_accuracy(label_cube, validation = ground_truth) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print accuracy summary — sits_accuracy_summary","title":"Print accuracy summary — sits_accuracy_summary","text":"Adaptation caret::print.confusionMatrix method              common usage Earth Observation.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print accuracy summary — sits_accuracy_summary","text":"","code":"sits_accuracy_summary(x, digits = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print accuracy summary — sits_accuracy_summary","text":"x Object class sits_accuracy. digits Number significant digits printed.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print accuracy summary — sits_accuracy_summary","text":"Called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_accuracy_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print accuracy summary — sits_accuracy_summary","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_add_base_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Add base maps to a time series data cube — sits_add_base_cube","title":"Add base maps to a time series data cube — sits_add_base_cube","text":"function add base maps time series data cube. Base maps information stable time (e.g, DEM) provide relevant information modelling classification. add base cube existing data cube, share sensor, resolution, bounding box, timeline, different bands.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_add_base_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add base maps to a time series data cube — sits_add_base_cube","text":"","code":"sits_add_base_cube(cube1, cube2)"},{"path":"https://e-sensing.github.io/sits/reference/sits_add_base_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add base maps to a time series data cube — sits_add_base_cube","text":"cube1 Data cube (tibble class \"raster_cube\") . cube2 Data cube (tibble class \"dem_cube\") .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_add_base_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add base maps to a time series data cube — sits_add_base_cube","text":"merged data cube inclusion base_info tibble","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_add_base_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add base maps to a time series data cube — sits_add_base_cube","text":"Felipe Carlos, efelipecarlos@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_add_base_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add base maps to a time series data cube — sits_add_base_cube","text":"","code":"if (sits_run_examples()) {     s2_cube <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-2-L2A\",         tiles = \"18HYE\",         bands = c(\"B8A\", \"CLOUD\"),         start_date = \"2022-01-01\",         end_date = \"2022-03-31\"     )     output_dir <- paste0(tempdir(), \"/reg\")     if (!dir.exists(output_dir)) {         dir.create(output_dir)     }     dem_cube <- sits_cube(         source = \"MPC\",         collection = \"COP-DEM-GLO-30\",         tiles = \"18HYE\",         bands = \"ELEVATION\"     )     s2_reg <- sits_regularize(         cube = s2_cube,         period = \"P1M\",         res = 240,         output_dir = output_dir,         multicores = 2,         memsize = 4     )     dem_reg <- sits_regularize(         cube = dem_cube,         res = 240,         tiles = \"18HYE\",         output_dir = output_dir,         multicores = 2,         memsize = 4     )     s2_reg <- sits_add_base_cube(s2_reg, dem_reg) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function on a set of time series — sits_apply","title":"Apply a function on a set of time series — sits_apply","text":"Apply named expression sits cube sits tibble evaluated generate new bands (indices). case sits cubes, creates new band output_dir.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function on a set of time series — sits_apply","text":"","code":"sits_apply(data, ...)  # S3 method for class 'sits' sits_apply(data, ...)  # S3 method for class 'raster_cube' sits_apply(   data,   ...,   window_size = 3L,   memsize = 4L,   multicores = 2L,   normalized = TRUE,   output_dir,   progress = TRUE )  # S3 method for class 'derived_cube' sits_apply(data, ...)  # Default S3 method sits_apply(data, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function on a set of time series — sits_apply","text":"data Valid sits tibble cube ... Named expressions evaluated (see details). window_size odd number representing size sliding window sits kernel functions used expressions (list supported kernel functions, please see details). memsize Memory available classification (GB). multicores Number cores used classification. normalized expression produces normalized band? output_dir Directory files saved. progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function on a set of time series — sits_apply","text":"sits tibble sits cube new bands, produced         according requested expression.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply a function on a set of time series — sits_apply","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. sits_apply() allows valid R expression compute new bands. Use R syntax pass expression function. Besides arithmetic operators, can use virtually R function can applied elements matrix (functions unaware matrix sizes, e.g. sqrt(), sin(), log()). Examples valid expressions: NDVI = (B08 - B04) / (B08 + B04) Sentinel-2 images. EVI = 2.5 * (B05 – B04) / (B05 + 6 * B04 – 7.5 * B02 + 1) Landsat-8/9 images. VV_VH_RATIO = VH/VV Sentinel-1 images. case, set normalized parameter FALSE. VV_DB = 10 * log10(VV) convert Sentinel-1 RTC images available Planetary Computer decibels. Also, set normalized parameter FALSE. sits_apply() also accepts predefined set kernel functions (see ) can applied pixels considering neighborhood. function considers neighborhood pixel set pixels equidistant (including ). neighborhood forms square window (also known kernel) around central pixel (Moore neighborhood). Users can set window_size parameter adjust size kernel window. image conceptually mirrored edges neighborhood including pixel outside image equivalent take 'mirrored' pixel inside edge. sits_apply() applies function kernel result assigned corresponding central pixel new matrix. kernel slides throughout input image process generates entire new matrix, returned new band cube. kernel functions ignores NA values inside kernel window. pixels window NA result NA. default, indexes generated sits_apply() function normalized -1 1, scaled factor 0.0001. Normalized indexes saved INT2S (Integer sign). normalized parameter FALSE, scaling factor applied index saved FLT4S (signed float) values vary -3.4e+38 3.4e+38.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"kernel-functions-available","dir":"Reference","previous_headings":"","what":"Kernel functions available","title":"Apply a function on a set of time series — sits_apply","text":"w_median(): returns median neighborhood's values. w_sum(): returns sum neighborhood's values. w_mean(): returns mean neighborhood's values. w_sd(): returns standard deviation neighborhood's   values. w_min(): returns minimum neighborhood's values. w_max(): returns maximum neighborhood's values. w_var(): returns variance neighborhood's values. w_modal(): returns modal neighborhood's values.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a function on a set of time series — sits_apply","text":"Rolf Simoes, rolfsimoes@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function on a set of time series — sits_apply","text":"","code":"if (sits_run_examples()) {     # get a time series     # Apply a normalization function      point2 <-         sits_select(point_mt_6bands, \"NDVI\") |>         sits_apply(NDVI_norm = (NDVI - min(NDVI)) / (max(NDVI) - min(NDVI)))      # Example of generation texture band with variance     # Create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )      # Generate a texture images with variance in NDVI images     cube_texture <- sits_apply(         data = cube,         NDVITEXTURE = w_median(NDVI),         window_size = 5,         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","title":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","text":"Converts sits_tibble raster_cube sf object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","text":"","code":"sits_as_sf(data, ...)  # S3 method for class 'sits' sits_as_sf(data, ..., crs = \"EPSG:4326\", as_crs = NULL)  # S3 method for class 'raster_cube' sits_as_sf(data, ..., as_crs = NULL)  # S3 method for class 'vector_cube' sits_as_sf(data, ..., as_crs = NULL)  # Default S3 method sits_as_sf(data, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","text":"data sits tibble sits cube. ... Additional parameters. crs Input coordinate reference system. as_crs Output coordinate reference system.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","text":"sf object point polygon geometry.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_sf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","text":"Felipe Carvalho, felipe.carvalho@inpe.br Alber Sanchez, alber.ipia@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a sits_tibble or raster_cube as an sf object. — sits_as_sf","text":"","code":"if (sits_run_examples()) {     # convert sits tibble to an sf object (point)     sf_object <- sits_as_sf(cerrado_2classes)      # convert sits cube to an sf object (polygon)     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     sf_object <- sits_as_sf(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data cube into a stars object — sits_as_stars","title":"Convert a data cube into a stars object — sits_as_stars","text":"Uses information files, bands dates data cube produce object class stars. User select tile data cube. default, bands dates included stars object. Users can select bands dates.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data cube into a stars object — sits_as_stars","text":"","code":"sits_as_stars(   cube,   tile = cube[1L, ]$tile,   bands = NULL,   dates = NULL,   proxy = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data cube into a stars object — sits_as_stars","text":"cube sits cube. tile Tile data cube. bands Bands data cube part stars object. dates Dates data cube part stars object. proxy Produce stars proxy object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data cube into a stars object — sits_as_stars","text":"space-time stars object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a data cube into a stars object — sits_as_stars","text":"default, stars object loaded memory. can result heavy memory usage. produce stars.proxy object, uses select single date, since stars allow proxy objects created two dimensions.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a data cube into a stars object — sits_as_stars","text":"Gilberto Camara, gilberto.camara.inpe@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_stars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data cube into a stars object — sits_as_stars","text":"","code":"if (sits_run_examples()) {     # convert sits cube to an sf object (polygon)     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     stars_object <- sits_as_stars(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_as_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","title":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","text":"Uses information files, bands dates data cube produce object class terra. User select tile date data cube. default, bands included terra object. Users can select bands.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","text":"","code":"sits_as_terra(cube, tile = cube[1L, ]$tile, ...)  # S3 method for class 'raster_cube' sits_as_terra(cube, tile = cube[1L, ]$tile, ..., bands = NULL, date = NULL)  # S3 method for class 'probs_cube' sits_as_terra(cube, tile = cube[1L, ]$tile, ...)  # S3 method for class 'class_cube' sits_as_terra(cube, tile = cube[1L, ]$tile, ...)  # S3 method for class 'variance_cube' sits_as_terra(cube, tile = cube[1L, ]$tile, ...)  # S3 method for class 'uncertainty_cube' sits_as_terra(cube, tile = cube[1L, ]$tile, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_as_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","text":"cube sits cube. tile Tile data cube. ... parameters specific types data cubes. bands Bands data cube part terra object. date Date data cube part terra object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_terra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","text":"Spatial Raster object terra.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_terra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","text":"Gilberto Camara, gilberto.camara.inpe@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_as_terra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data cube into a Spatial Raster object from terra — sits_as_terra","text":"","code":"if (sits_run_examples()) {     # convert sits cube to an sf object (polygon)     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     spat_raster <- sits_as_terra(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of the bands — sits_bands","title":"Get the names of the bands — sits_bands","text":"Finds names bands set time series data cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of the bands — sits_bands","text":"","code":"sits_bands(x)  # S3 method for class 'sits' sits_bands(x)  # S3 method for class 'raster_cube' sits_bands(x)  # S3 method for class 'patterns' sits_bands(x)  # S3 method for class 'sits_model' sits_bands(x)  # Default S3 method sits_bands(x)  sits_bands(x) <- value  # S3 method for class 'sits' sits_bands(x) <- value  # S3 method for class 'raster_cube' sits_bands(x) <- value  # Default S3 method sits_bands(x) <- value"},{"path":"https://e-sensing.github.io/sits/reference/sits_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of the bands — sits_bands","text":"x Valid sits tibble (time series cube) value New value bands","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of the bands — sits_bands","text":"vector names bands.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bands.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the names of the bands — sits_bands","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of the bands — sits_bands","text":"","code":"if (sits_run_examples()) {     # Create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # Get the bands from a daya cube     bands <- sits_bands(cube)     # Get the bands from a sits tibble     bands <- sits_bands(samples_modis_ndvi)     # Get the bands from patterns     bands <- sits_bands(sits_patterns(samples_modis_ndvi))     # Get the bands from ML model     rf_model <- sits_train(samples_modis_ndvi, sits_rfor())     bands <- sits_bands(rf_model)     # Set the bands for a SITS time series     sits_bands(samples_modis_ndvi) <- \"NDVI2\"     # Set the bands for a SITS cube     sits_bands(cube) <- \"NDVI2\" }"},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of the data — sits_bbox","title":"Get the bounding box of the data — sits_bbox","text":"Obtain vector limits (either lat/long time series               projection coordinates case cubes)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of the data — sits_bbox","text":"","code":"sits_bbox(data, ..., crs = \"EPSG:4326\", as_crs = NULL)  # S3 method for class 'sits' sits_bbox(data, ..., crs = \"EPSG:4326\", as_crs = NULL)  # S3 method for class 'raster_cube' sits_bbox(data, ..., as_crs = NULL)  # S3 method for class 'tbl_df' sits_bbox(data, ..., crs = \"EPSG:4326\", as_crs = NULL)  # Default S3 method sits_bbox(data, ..., crs = \"EPSG:4326\", as_crs = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of the data — sits_bbox","text":"data samples (class \"sits\") cube. ... parameters specific types crs CRS time series. as_crs CRS project resulting bbox.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of the data — sits_bbox","text":"bbox.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the bounding box of the data — sits_bbox","text":"Time series sits associated lat/long values WGS84, data cubes associated cartographic projection. obtain bounding box data cube different projection original, use as_crs parameter.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the bounding box of the data — sits_bbox","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of the data — sits_bbox","text":"","code":"if (sits_run_examples()) {     # get the bbox of a set of samples     sits_bbox(samples_modis_ndvi)     # get the bbox of a cube in WGS84     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     sits_bbox(cube, as_crs = \"EPSG:4326\") }"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify time series or data cubes — sits_classify","title":"Classify time series or data cubes — sits_classify","text":"function classifies set time series data cube using trained model prediction model created sits_train. sits_classify function takes three types data input    produce types output. Users call    sits_classify aware parameters    different type input. sits_classify.sits called input    set time series. output set    additional column predicted. sits_classify.raster_cube called    input regular raster data cube. output probability cube,    tiles raster cube. tile contains    multiband image; band contains probability    pixel belongs given class.    Probability cubes objects class \"probs_cube\". sits_classify.vector_cube called    vector data cubes. Vector data cubes produced    closed regions obtained raster data cubes using    sits_segment. Classification vector    data cube produces vector data structure additional    columns expressing class probabilities object.    Probability cubes vector data cubes    objects class \"probs_vector_cube\".","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify time series or data cubes — sits_classify","text":"","code":"sits_classify(data, ml_model, ...)  # S3 method for class 'tbl_df' sits_classify(data, ml_model, ...)  # S3 method for class 'derived_cube' sits_classify(data, ml_model, ...)  # Default S3 method sits_classify(data, ml_model, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify time series or data cubes — sits_classify","text":"data Data cube (tibble class \"raster_cube\") ml_model R model trained sits_train ... parameters specific functions.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify time series or data cubes — sits_classify","text":"Time series predicted labels                           point (tibble class \"sits\")                           data cube probabilities class                           (tibble class \"probs_cube\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify time series or data cubes — sits_classify","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. SITS supports following models: support vector machines:  sits_svm; random forests:  sits_rfor; extreme gradient boosting: sits_xgboost; light gradient boosting: sits_lightgbm; multi-layer perceptrons: sits_mlp; temporal CNN: sits_tempcnn; residual network encoders: sits_resnet; LSTM convolutional networks: sits_lstm_fcn; temporal self-attention encoders:         sits_lighttae         sits_tae. Please refer sits documentation available    https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Classify time series or data cubes — sits_classify","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br Felipe Carvalho, lipecaso@gmail.com Felipe Carlos, efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.raster_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify a regular raster cube — sits_classify.raster_cube","title":"Classify a regular raster cube — sits_classify.raster_cube","text":"Called input regular raster data cube.    output probability cube,    tiles raster cube. tile contains    multiband image; band contains probability    pixel belongs given class.    Probability cubes objects class \"probs_cube\".","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.raster_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify a regular raster cube — sits_classify.raster_cube","text":"","code":"# S3 method for class 'raster_cube' sits_classify(   data,   ml_model,   ...,   roi = NULL,   exclusion_mask = NULL,   filter_fn = NULL,   impute_fn = impute_linear(),   start_date = NULL,   end_date = NULL,   memsize = 8L,   multicores = 2L,   gpu_memory = 4L,   batch_size = 2L^gpu_memory,   output_dir,   version = \"v1\",   verbose = FALSE,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.raster_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify a regular raster cube — sits_classify.raster_cube","text":"data Data cube (tibble class \"raster_cube\") ml_model R model trained sits_train ... parameters specific functions. roi Region interest (either sf object, shapefile, numeric vector WGS 84 named XY values (\"xmin\", \"xmax\", \"ymin\", \"ymax\") named lat/long values (\"lon_min\", \"lat_min\", \"lon_max\", \"lat_max\"). exclusion_mask Areas excluded classification process. can defined sf object shapefile. filter_fn Smoothing filter applied - optional (closure containing object class \"function\"). impute_fn Imputation function remove NA. start_date Starting date classification (Date YYYY-MM-DD format). end_date Ending date classification (Date YYYY-MM-DD format). memsize Memory available classification GB (integer, min = 1, max = 16384). multicores Number cores used classification (integer, min = 1, max = 2048). gpu_memory Memory available GPU GB (default = 4) batch_size Batch size GPU classification. output_dir Directory output file. version Version output. verbose Logical: print information processing time? progress Logical: Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.raster_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify a regular raster cube — sits_classify.raster_cube","text":"Time series predicted labels                           point (tibble class \"sits\")                           data cube probabilities class                           (tibble class \"probs_cube\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.raster_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify a regular raster cube — sits_classify.raster_cube","text":"roi parameter defines region interest. Either: path shapefile polygons; sf object POLYGON MULTIPOLYGON geometry; named XY vector (xmin, xmax, ymin,         ymax) WGS84; name lat/long vector (lon_min, lon_max,          lat_min, lat_max); Parameter filter_fn parameter specifies smoothing filter    applied time series reducing noise. Currently, options    Savitzky-Golay (see sits_sgolay) Whittaker    (see sits_whittaker) filters. Parameter impute_fn defines 1D function used    interpolate NA values time series. Currently sits supports    impute_linear function, users can define    imputation functions defined externally. Parameter memsize controls amount memory available    classification, multicores  defines number cores    used processing. recommend using much memory possible. Parameter exclusion_mask defines region    classify. region can defined multiple polygons.    Either path shapefile polygons    sf object POLYGON MULTIPOLYGON geometry; using GPU deep learning, gpu_memory indicates    memory graphics card available processing.    parameter batch_size defines size matrix    (measured number rows) sent GPU classification.    Users can test different values batch_size    find one best fits GPU architecture. possible exact idea size Deep Learning    models GPU memory, complexity model factors    CUDA Context increase size model memory.    Therefore, recommend leave least 1GB free    video card store Deep Learning model used. users Apple M3 chips similar Neural Engine,    aware chips share memory GPU CPU.    Tests indicate memsize    set half total memory batch_size    parameter small number (suggest value 64).    aware increasing parameters may lead memory    conflicts.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.raster_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify a regular raster cube — sits_classify.raster_cube","text":"","code":"if (sits_run_examples()) {     # Retrieve the samples for Mato Grosso     # train a random forest model     rf_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor)     # Example of classification of a data cube     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube,         ml_model = rf_model,         output_dir = tempdir(),         version = \"classify\"     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir(),         version = \"ex_classify\"     )     # plot the classified image     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.segs_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify a segmented data cube — sits_classify.segs_cube","title":"Classify a segmented data cube — sits_classify.segs_cube","text":"function called input vector data cube. Vector data cubes produced closed regions obtained raster data cubes using sits_segment. Classification vector data cube produces vector data structure additional columns expressing class probabilities segment. Probability cubes vector data cubes objects class \"probs_vector_cube\".","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.segs_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify a segmented data cube — sits_classify.segs_cube","text":"","code":"# S3 method for class 'vector_cube' sits_classify(   data,   ml_model,   ...,   roi = NULL,   filter_fn = NULL,   impute_fn = impute_linear(),   start_date = NULL,   end_date = NULL,   memsize = 8L,   multicores = 2L,   gpu_memory = 4L,   batch_size = 2L^gpu_memory,   output_dir,   version = \"v1\",   n_sam_pol = 15L,   verbose = FALSE,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.segs_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify a segmented data cube — sits_classify.segs_cube","text":"data Data cube (tibble class \"raster_cube\") ml_model R model trained sits_train (closure class \"sits_model\") ... parameters specific functions. roi Region interest (either sf object, shapefile, numeric vector WGS 84 named XY values (\"xmin\", \"xmax\", \"ymin\", \"ymax\") named lat/long values (\"lon_min\", \"lat_min\", \"lon_max\", \"lat_max\"). filter_fn Smoothing filter applied - optional (closure containing object class \"function\"). impute_fn Imputation function remove NA. start_date Starting date classification (Date YYYY-MM-DD format). end_date Ending date classification (Date YYYY-MM-DD format). memsize Memory available classification GB (integer, min = 1, max = 16384). multicores Number cores used classification (integer, min = 1, max = 2048). gpu_memory Memory available GPU GB (default = 4) batch_size Batch size GPU classification. output_dir Directory output file. version Version output. n_sam_pol Number time series per segment classified (integer, min = 10, max = 50). verbose Logical: print information processing time? progress Logical: Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.segs_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify a segmented data cube — sits_classify.segs_cube","text":"Vector data cube probabilities class                           included new columns tibble.                           (tibble class \"probs_vector_cube\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.segs_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify a segmented data cube — sits_classify.segs_cube","text":"roi parameter defines region interest. Either: path shapefile polygons; sf object POLYGON MULTIPOLYGON geometry; named XY vector (xmin, xmax, ymin,         ymax) WGS84; name lat/long vector (lon_min, lon_max,          lat_min, lat_max); Parameter filter_fn parameter specifies smoothing filter    applied time series reducing noise. Currently, options    Savitzky-Golay (see sits_sgolay) Whittaker    (see sits_whittaker) filters. Parameter impute_fn defines 1D function used    interpolate NA values time series. Currently sits supports    impute_linear function, users can define    imputation functions defined externally. Parameter memsize controls amount memory available    classification, multicores  defines number cores    used processing. recommend using much memory possible. classifying vector data cubes created    sits_segment,    n_sam_pol controls number time series    classified per segment. using GPU deep learning, gpu_memory indicates    memory graphics card available processing.    parameter batch_size defines size matrix    (measured number rows) sent GPU classification.    Users can test different values batch_size    find one best fits GPU architecture. possible exact idea size Deep Learning    models GPU memory, complexity model factors    CUDA Context increase size model memory.    Therefore, recommend leave least 1GB free    video card store Deep Learning model used. users Apple M3 chips similar Neural Engine,    aware chips share memory GPU CPU.    Tests indicate memsize    set half total memory batch_size    parameter small number (suggest value 64).    aware increasing parameters may lead memory    conflicts. Please refer sits documentation available    https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.segs_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify a segmented data cube — sits_classify.segs_cube","text":"","code":"if (sits_run_examples()) {     # train a random forest model     rf_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor)     # Example of classification of a data cube     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # segment the image     segments <- sits_segment(         cube = cube,         seg_fn = sits_slic(             step = 5,             compactness = 1,             dist_fun = \"euclidean\",             avg_fun = \"median\",             iter = 50,             minarea = 10,             verbose = FALSE         ),         output_dir = tempdir()     )     # Create a classified vector cube     probs_segs <- sits_classify(         data = segments,         ml_model = rf_model,         output_dir = tempdir(),         multicores = 4,         n_sam_pol = 15,         version = \"segs\"     )     # Create a labelled vector cube     class_segs <- sits_label_classification(         cube = probs_segs,         output_dir = tempdir(),         multicores = 2,         memsize = 4,         version = \"segs_classify\"     )     # plot class_segs     plot(class_segs) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.sits.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify a set of time series — sits_classify.sits","title":"Classify a set of time series — sits_classify.sits","text":"sits_classify.sits called input    set time series. output set    additional column predicted.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.sits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify a set of time series — sits_classify.sits","text":"","code":"# S3 method for class 'sits' sits_classify(   data,   ml_model,   ...,   filter_fn = NULL,   impute_fn = impute_linear(),   multicores = 2L,   gpu_memory = 4L,   batch_size = 2L^gpu_memory,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.sits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify a set of time series — sits_classify.sits","text":"data Set time series (\"sits tibble\") ml_model R model trained sits_train (closure class \"sits_model\") ... parameters specific functions. filter_fn Smoothing filter applied - optional (closure containing object class \"function\"). impute_fn Imputation function remove NA. multicores Number cores used classification (integer, min = 1, max = 2048). gpu_memory Memory available GPU GB (default = 4) batch_size Batch size GPU classification. progress Logical: Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.sits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify a set of time series — sits_classify.sits","text":"Time series predicted labels                           point (tibble class \"sits\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.sits.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify a set of time series — sits_classify.sits","text":"Parameter filter_fn specifies smoothing filter    applied time series reducing noise. Currently, options    Savitzky-Golay (see sits_sgolay) Whittaker    (see sits_whittaker) filters. Note    parameter also applied training set obtain    model. Parameter impute_fn defines 1D function used    interpolate NA values time series. Currently sits supports    impute_linear function, users can define    imputation functions defined externally. Parameter multicores  defines number cores    used processing. recommend using much memory possible. using GPU deep learning, gpu_memory indicates    memory graphics card available processing.    parameter batch_size defines size matrix    (measured number rows) sent GPU classification.    Users can test different values batch_size    find one best fits GPU architecture. possible exact idea size Deep Learning    models GPU memory, complexity model factors    CUDA Context increase size model memory.    Therefore, recommend leave least 1GB free    video card store Deep Learning model used. users Apple M3 chips similar Neural Engine,    aware chips share memory GPU CPU.    Tests indicate memsize    set half total memory batch_size    parameter small number (suggest value 64).    aware increasing parameters may lead memory    conflicts.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_classify.sits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify a set of time series — sits_classify.sits","text":"","code":"if (sits_run_examples()) {     # Example of classification of a time series     # Retrieve the samples for Mato Grosso     # train a random forest model     rf_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor)      # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = c(\"NDVI\"))     point_class <- sits_classify(         data = point_ndvi, ml_model = rf_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans a classified map using a local window — sits_clean","title":"Cleans a classified map using a local window — sits_clean","text":"Applies modal function clean possible noisy pixels keeping frequently values within neighborhood. tie, first value vector considered. Modal functions applied classified cubes useful remove salt--pepper noise result.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans a classified map using a local window — sits_clean","text":"","code":"sits_clean(cube, ...)  # S3 method for class 'class_cube' sits_clean(   cube,   ...,   window_size = 5L,   memsize = 4L,   multicores = 2L,   output_dir,   version = \"v1-clean\",   progress = TRUE )  # S3 method for class 'raster_cube' sits_clean(cube, ...)  # S3 method for class 'derived_cube' sits_clean(cube, ...)  # Default S3 method sits_clean(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans a classified map using a local window — sits_clean","text":"cube Classified data cube (tibble class \"class_cube\"). ... Specific parameters specialised functions window_size odd integer  representing size sliding window modal function (min = 1, max = 15). memsize Memory available classification GB (integer, min = 1, max = 16384). multicores Number cores used classification (integer, min = 1, max = 2048). output_dir Valid directory output file. (character vector length 1). version Version output file (character vector length 1) progress Logical: Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans a classified map using a local window — sits_clean","text":"tibble classified map (class = \"class_cube\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cleans a classified map using a local window — sits_clean","text":"sits_clean function useful remove classification noise detected sits_smooth. improves spatial consistency classified maps.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cleans a classified map using a local window — sits_clean","text":"Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans a classified map using a local window — sits_clean","text":"","code":"if (sits_run_examples()) {     rf_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube,         ml_model = rf_model,         output_dir = tempdir()     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     # apply a mode function in the labelled cube     clean_cube <- sits_clean(         cube = label_cube,         window_size = 5,         output_dir = tempdir(),         multicores = 1     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes labels that are minority in each cluster. — sits_cluster_clean","title":"Removes labels that are minority in each cluster. — sits_cluster_clean","text":"Takes tibble time series additional `cluster` produced sits_cluster_dendro() removes labels minority cluster.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes labels that are minority in each cluster. — sits_cluster_clean","text":"","code":"sits_cluster_clean(samples)"},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes labels that are minority in each cluster. — sits_cluster_clean","text":"samples Tibble set time series additional cluster information produced sits_cluster_dendro()","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes labels that are minority in each cluster. — sits_cluster_clean","text":"Tibble time series (class \"sits\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_clean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Removes labels that are minority in each cluster. — sits_cluster_clean","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes labels that are minority in each cluster. — sits_cluster_clean","text":"","code":"if (sits_run_examples()) {     clusters <- sits_cluster_dendro(cerrado_2classes)     freq1 <- sits_cluster_frequency(clusters)     freq1     clean_clusters <- sits_cluster_clean(clusters)     freq2 <- sits_cluster_frequency(clean_clusters)     freq2 }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":null,"dir":"Reference","previous_headings":"","what":"Find clusters in time series samples — sits_cluster_dendro","title":"Find clusters in time series samples — sits_cluster_dendro","text":"functions support hierarchical agglomerative clustering sits. provide support creating dendrogram using cleaning samples. sits_cluster_dendro() takes tibble time series produces sits tibble added \"cluster\" column. function first calculates dendrogram obtains validity index best clustering using adjusted Rand Index. cutting dendrogram using chosen validity index, assigns cluster sample. sits_cluster_frequency() computes contingency table labels clusters produces matrix. input tibble produced sits_cluster_dendro(). sits_cluster_clean() takes tibble time series additional `cluster` produced sits_cluster_dendro() removes labels minority cluster.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find clusters in time series samples — sits_cluster_dendro","text":"","code":"sits_cluster_dendro(   samples,   bands = NULL,   dist_method = \"dtw_basic\",   linkage = \"ward.D2\",   k = NULL,   palette = \"RdYlGn\",   ... )"},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find clusters in time series samples — sits_cluster_dendro","text":"samples Tibble input set time series (class \"sits\"). bands Bands used clustering (character vector) dist_method One supported distances (single char vector) \"dtw\": DTW Sakoe-Chiba constraint. \"dtw2\": DTW L2 norm Sakoe-Chiba constraint. \"dtw_basic\": faster DTW less functionality. \"lbk\": Keogh's lower bound DTW. \"lbi\": Lemire's lower bound DTW. linkage Agglomeration method used (single char vector) One \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\" \"centroid\". k Desired number clusters (overrides default value) palette Color palette per `grDevices::hcl.pals()` function. ... Additional parameters passed dtwclust::tsclust() function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find clusters in time series samples — sits_cluster_dendro","text":"Tibble \"cluster\" column (class \"sits_cluster\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find clusters in time series samples — sits_cluster_dendro","text":"Please refer sits documentation available https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find clusters in time series samples — sits_cluster_dendro","text":"\"dtwclust\" R package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find clusters in time series samples — sits_cluster_dendro","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_dendro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find clusters in time series samples — sits_cluster_dendro","text":"","code":"if (sits_run_examples()) {     # default     clusters <- sits_cluster_dendro(cerrado_2classes)     # with parameters     clusters <- sits_cluster_dendro(cerrado_2classes,         bands = \"NDVI\", k = 5     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","title":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","text":"Show label frequency cluster produced dendrogram analysis","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","text":"","code":"sits_cluster_frequency(samples)"},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","text":"samples Tibble input set time series additional cluster information produced sits_cluster_dendro().","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","text":"matrix containing frequencies                        labels clusters.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_frequency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cluster_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show label frequency in each cluster produced by dendrogram analysis — sits_cluster_frequency","text":"","code":"if (sits_run_examples()) {     clusters <- sits_cluster_dendro(cerrado_2classes)     freq <- sits_cluster_frequency(clusters)     freq }"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to retrieve sits color table — sits_colors","title":"Function to retrieve sits color table — sits_colors","text":"Returns default color table.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to retrieve sits color table — sits_colors","text":"","code":"sits_colors(legend = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to retrieve sits color table — sits_colors","text":"legend One accepted legends sits","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to retrieve sits color table — sits_colors","text":"tibble color names values","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Function to retrieve sits color table — sits_colors","text":"SITS predefined color palette 238 class names. colors grouped typical legends used Earth observation community, include “IGBP”, “UMD”, “ESA_CCI_LC”, “WORLDCOVER”. Use sits_colors_show see specific palette. default color table can extended using sits_colors_set.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to retrieve sits color table — sits_colors","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to retrieve sits color table — sits_colors","text":"","code":"if (sits_run_examples()) {     # return the names of all colors supported by SITS     sits_colors() }"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_qgis.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to save color table as QML style for data cube — sits_colors_qgis","title":"Function to save color table as QML style for data cube — sits_colors_qgis","text":"Saves color table associated classified              data cube QGIS style file","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_qgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to save color table as QML style for data cube — sits_colors_qgis","text":"","code":"sits_colors_qgis(cube, file)"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_qgis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to save color table as QML style for data cube — sits_colors_qgis","text":"cube classified data cube file QGIS style file written ","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_qgis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to save color table as QML style for data cube — sits_colors_qgis","text":"return, called side effects","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_qgis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to save color table as QML style for data cube — sits_colors_qgis","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_qgis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to save color table as QML style for data cube — sits_colors_qgis","text":"","code":"if (sits_run_examples()) {     data_dir <- system.file(\"extdata/raster/classif\", package = \"sits\")     ro_class <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-2-L2A\",         data_dir = data_dir,         parse_info = c(             \"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\",             \"band\", \"version\"         ),         bands = \"class\",         labels = c(             \"1\" = \"Clear_Cut_Burned_Area\",             \"2\" = \"Clear_Cut_Bare_Soil\",             \"3\" = \"Clear_Cut_Vegetation\",             \"4\" = \"Forest\"         )     )     qml_file <- paste0(tempdir(), \"/qgis.qml\")     sits_colors_qgis(ro_class, qml_file) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to reset sits color table — sits_colors_reset","title":"Function to reset sits color table — sits_colors_reset","text":"Resets color table","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to reset sits color table — sits_colors_reset","text":"","code":"sits_colors_reset()"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to reset sits color table — sits_colors_reset","text":"return, called side effects","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_reset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to reset sits color table — sits_colors_reset","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to reset sits color table — sits_colors_reset","text":"","code":"if (sits_run_examples()) {     # reset the default colors supported by SITS     sits_colors_reset() }"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set sits color table — sits_colors_set","title":"Function to set sits color table — sits_colors_set","text":"Includes new colors SITS color sets. colors exist,              replace new HEX value. Optionally, new colors              can associated legend. case, new legend              name informed.              colors parameter data.frame tibble              name HEX code. Colour names one character              string . Composite names need combined              underscores (e.g., use \"Snow_and_Ice\" \"Snow Ice\"). function changes global sits color table              global set sits color legends. undo effects,              please use \"sits_colors_reset()\".","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set sits color table — sits_colors_set","text":"","code":"sits_colors_set(colors, legend = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to set sits color table — sits_colors_set","text":"colors New color table (tibble data.frame name HEX code) legend Legend associated color table (optional)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set sits color table — sits_colors_set","text":"modified sits color table (invisible)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_set.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to set sits color table — sits_colors_set","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to set sits color table — sits_colors_set","text":"","code":"if (sits_run_examples()) {     # Define a color table based on the Anderson Land Classification System     us_nlcd <- tibble::tibble(name = character(), color = character())     us_nlcd <- us_nlcd |>         tibble::add_row(name = \"Urban_Built_Up\", color = \"#85929E\") |>         tibble::add_row(name = \"Agricultural_Land\", color = \"#F0B27A\") |>         tibble::add_row(name = \"Rangeland\", color = \"#F1C40F\") |>         tibble::add_row(name = \"Forest_Land\", color = \"#27AE60\") |>         tibble::add_row(name = \"Water\", color = \"#2980B9\") |>         tibble::add_row(name = \"Wetland\", color = \"#D4E6F1\") |>         tibble::add_row(name = \"Barren_Land\", color = \"#FDEBD0\") |>         tibble::add_row(name = \"Tundra\", color = \"#EBDEF0\") |>         tibble::add_row(name = \"Snow_and_Ice\", color = \"#F7F9F9\")      # Load the color table into `sits`     sits_colors_set(colors = us_nlcd, legend = \"US_NLCD\")      # Show the new color table used by sits     sits_colors_show(\"US_NLCD\")      # Change colors in the sits global color table     # First show the default colors for the UMD legend     sits_colors_show(\"UMD\")     # Then change some colors associated to the UMD legend     mycolors <- tibble::tibble(name = character(), color = character())     mycolors <- mycolors |>         tibble::add_row(name = \"Savannas\", color = \"#F8C471\") |>         tibble::add_row(name = \"Grasslands\", color = \"#ABEBC6\")     sits_colors_set(colors = mycolors)     # Notice that the UMD colors change     sits_colors_show(\"UMD\")     # Reset the color table     sits_colors_reset()     # Show the default colors for the UMD legend     sits_colors_show(\"UMD\") }"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to show colors in SITS — sits_colors_show","title":"Function to show colors in SITS — sits_colors_show","text":"Shows default SITS colors","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to show colors in SITS — sits_colors_show","text":"","code":"sits_colors_show(legend = NULL, font_family = \"sans\")"},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to show colors in SITS — sits_colors_show","text":"legend One accepted legends sits font_family font family loaded SITS","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to show colors in SITS — sits_colors_show","text":"return, called side effects","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_show.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to show colors in SITS — sits_colors_show","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_colors_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to show colors in SITS — sits_colors_show","text":"","code":"if (sits_run_examples()) {     # show the colors supported by SITS     sits_colors_show() }"},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"Calculate ensemble predictor based list probability cubes. function combines output two models derive weighted average. supported types ensemble predictors 'average' 'uncertainty'. latter case, uncertainty cubes need provided using param uncert_cubes.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"","code":"sits_combine_predictions(cubes, type = \"average\", ...)  # S3 method for class 'average' sits_combine_predictions(   cubes,   type = \"average\",   ...,   weights = NULL,   memsize = 8L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = FALSE )  # S3 method for class 'uncertainty' sits_combine_predictions(   cubes,   type = \"uncertainty\",   ...,   uncert_cubes,   memsize = 8L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = FALSE )  # Default S3 method sits_combine_predictions(cubes, type, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"cubes List probability data cubes (class \"probs_cube\") type Method measure uncertainty. One \"average\" \"uncertainty\" ... Parameters specific functions. weights Weights averaging (numeric vector). memsize Memory available classification GB (integer, min = 1, max = 16384). multicores Number cores used classification (integer, min = 1, max = 2048). output_dir Valid directory output file. (character vector length 1). version Version output (character vector length 1). progress Set progress bar? uncert_cubes Uncertainty cubes used local weights type = \"uncertainty\" selected (list tibbles class \"uncertainty_cube\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"combined probability cube (tibble class \"probs_cube\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"distribution class probabilities produced machine learning models random forest quite different produced deep learning models temporal CNN. Combining result two different models recommended remove possible bias induced single model. default, function takes average class probabilities two model results. desired, users can use uncertainty estimates results compute weights pixel. case, uncertainties produced models pixel used compute weights producing combined result.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_combine_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate ensemble prediction based on list of probs cubes — sits_combine_predictions","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify a data cube using rfor model     probs_rfor_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir(),         version = \"rfor\"     )     # create an SVM model     svm_model <- sits_train(samples_modis_ndvi, sits_svm())     # classify a data cube using SVM model     probs_svm_cube <- sits_classify(         data = cube, ml_model = svm_model, output_dir = tempdir(),         version = \"svm\"     )     # create a list of predictions to be combined     pred_cubes <- list(probs_rfor_cube, probs_svm_cube)     # combine predictions     comb_probs_cube <- sits_combine_predictions(         pred_cubes,         output_dir = tempdir()     )     # plot the resulting combined prediction cube     plot(comb_probs_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_confidence_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","title":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","text":"Suggest points increasing training set. points labelled high confidence can added training set. need satisfactory margin confidence selected. input probability cube. label, algorithm finds location machine learning model high confidence choosing label compared others. algorithm also considers minimum distance new labels, minimize spatial autocorrelation effects. function best used following context: Select initial set samples. Train machine learning model. Build data cube classify using model. Run Bayesian smoothing resulting probability cube. Perform confidence sampling. Bayesian smoothing procedure reduce classification outliers thus increase likelihood resulting pixels provide good quality samples class.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_confidence_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","text":"","code":"sits_confidence_sampling(   probs_cube,   n = 20L,   min_margin = 0.5,   sampling_window = 10L,   multicores = 2L,   memsize = 4L,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_confidence_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","text":"probs_cube smoothed probability cube. See sits_classify sits_smooth. n Number suggested points per class. min_margin Minimum margin confidence select sample sampling_window Window size collecting points (pixels). minimum window size 10. multicores Number workers parallel processing (integer, min = 1, max = 2048). memsize Maximum overall memory (GB) run function. progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_confidence_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","text":"tibble longitude latitude WGS84 locations high uncertainty meet minimum distance criteria.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_confidence_sampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","text":"Alber Sanchez, alber.ipia@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_confidence_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest high confidence samples to increase the training set. — sits_confidence_sampling","text":"","code":"if (sits_run_examples()) {     # create a data cube     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # build a random forest model     rfor_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor())     # classify the cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # obtain a new set of samples for active learning     # the samples are located in uncertain places     new_samples <- sits_confidence_sampling(probs_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure parameters for sits package — sits_config","title":"Configure parameters for sits package — sits_config","text":"functions load show sits configurations. `sits` package uses configuration file contains information parameters required different functions. includes information image collections handled `sits`. sits_config() loads default configuration file user provided configuration file. final configuration obtained overriding options values provided user.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure parameters for sits package — sits_config","text":"","code":"sits_config(config_user_file = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure parameters for sits package — sits_config","text":"config_user_file YAML user configuration file (character vector file \"yml\" extension)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure parameters for sits package — sits_config","text":"Called side effects","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure parameters for sits package — sits_config","text":"Users can provide additional configuration files, specifying location file environmental variable SITS_CONFIG_USER_FILE parameter function. see key entries contents current configuration values, use link[sits]{sits_config_show()}.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure parameters for sits package — sits_config","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure parameters for sits package — sits_config","text":"","code":"yaml_user_file <- system.file(\"extdata/config_user_example.yml\",     package = \"sits\" ) sits_config(config_user_file = yaml_user_file)"},{"path":"https://e-sensing.github.io/sits/reference/sits_config_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show current sits configuration — sits_config_show","title":"Show current sits configuration — sits_config_show","text":"Prints current sits configuration options. show specific configuration options source, collection, palette, users can inform corresponding keys source collection.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show current sits configuration — sits_config_show","text":"","code":"sits_config_show()"},{"path":"https://e-sensing.github.io/sits/reference/sits_config_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show current sits configuration — sits_config_show","text":"return value, called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show current sits configuration — sits_config_show","text":"","code":"sits_config_show() #> Data sources and user configurable parameters in sits #>  #> Data sources available in sits #> AWS, BDC, CDSE-OS, CDSE, DCCHILE, DEAFRICA, DEAUSTRALIA, HLS, MPC, OGH, PLANET, SDC, TERRASCOPE, USGS #>  #> Use sits_list_collections(<source>) to get info for each source #>  #> User configurable parameters for plotting #> max_size: 1200 #> midpoint: NA #> graticules_labels_size: 0.7 #> legend_title_size: 0.7 #> legend_text_size: 0.7 #> legend_bg_color: white #> legend_bg_alpha: 0.7 #> legend_width: 1 #> legend_position: inside #> legend_height: 1 #> legend_title: values #> scale: 1 #> font_family: sans #>  #> User configurable parameters for visualisation #> [] #>  #> Use sits_config_user_file() to create a user configuration file"},{"path":"https://e-sensing.github.io/sits/reference/sits_config_user_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a user configuration file. — sits_config_user_file","title":"Create a user configuration file. — sits_config_user_file","text":"Creates user configuration file.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config_user_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a user configuration file. — sits_config_user_file","text":"","code":"sits_config_user_file(file_path, overwrite = FALSE)"},{"path":"https://e-sensing.github.io/sits/reference/sits_config_user_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a user configuration file. — sits_config_user_file","text":"file_path file store user configuration file overwrite replace current configuration file?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config_user_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a user configuration file. — sits_config_user_file","text":"Called side effects","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_config_user_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a user configuration file. — sits_config_user_file","text":"","code":"user_file <- paste0(tempdir(), \"/my_config_file.yml\") sits_config_user_file(user_file) #> Warning: save default user configuratiin #>  - please update your SITS_CONFIG_USER_FILE environmental variable  #>  to point to the chosen file"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data cubes from image collections — sits_cube","title":"Create data cubes from image collections — sits_cube","text":"Creates data cube based spatial temporal restrictions collections available cloud services local repositories. Available options : create data cubes providers support STAC protocol, use sits_cube.stac_cube. create raster data cubes local image files, use sits_cube.local_cube. create vector data cubes local image vector files, use sits_cube.vector_cube. create raster data cubes local image files classified labelled, use sits_cube.results_cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data cubes from image collections — sits_cube","text":"","code":"sits_cube(source, collection, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data cubes from image collections — sits_cube","text":"source Data source: one \"AWS\", \"BDC\", \"CDSE\", \"DEAFRICA\", \"DEAUSTRALIA\", \"HLS\", \"PLANETSCOPE\", \"MPC\", \"SDC\" \"USGS\". collection Image collection data source. find supported collections, use sits_list_collections()). ... parameters passed specific types.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data cubes from image collections — sits_cube","text":"tibble describing contents data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create data cubes from image collections — sits_cube","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. following cloud providers supported, based STAC protocol: Amazon Web Services (AWS), Brazil Data Cube (BDC), Copernicus Data Space Ecosystem (CDSE), Digital Earth Africa (DEAFRICA), Digital Earth Australia (DEAUSTRALIA), Microsoft Planetary Computer (MPC), Nasa Harmonized Landsat/Sentinel (HLS), Swiss Data Cube (SDC), TERRASCOPE USGS Landsat (USGS). Data cubes can also created using local files. sits, data cube represented tibble metadata describing set image files obtained cloud providers. contains information individual file. data cube sits : set images organized tiles grid system (e.g., MGRS). tile contains single-band images  unique zone coordinate system (e.g, tile 20LMR MGRS grid)  covering period start_date end_date. image tile associated unique temporal interval. intervals share spectral bands. Different tiles may cover different zones grid system. regular data cube data cube : tiles share set regular temporal intervals. tiles share spectral bands indices. images spatial resolution. location tile associated set multi-band time series. tile, interval band, cube reduce 2D image.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create data cubes from image collections — sits_cube","text":"Felipe Carlos, efelipecarlos@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data cubes from image collections — sits_cube","text":"","code":"if (sits_run_examples()) {     # --- Access to the Brazil Data Cube     # create a raster cube file based on the information in the BDC     cbers_tile <- sits_cube(         source = \"BDC\",         collection = \"CBERS-WFI-16D\",         bands = c(\"NDVI\", \"EVI\"),         tiles = \"007004\",         start_date = \"2018-09-01\",         end_date = \"2019-08-28\"     )     # --- Access to Digital Earth Africa     # create a raster cube file based on the information about the files     # DEAFRICA does not support definition of tiles     cube_deafrica <- sits_cube(         source = \"DEAFRICA\",         collection = \"SENTINEL-2-L2A\",         bands = c(\"B04\", \"B08\"),         roi = c(             \"lat_min\" = 17.379,             \"lon_min\" = 1.1573,             \"lat_max\" = 17.410,             \"lon_max\" = 1.1910         ),         start_date = \"2019-01-01\",         end_date = \"2019-10-28\"     )     # --- Create a cube based on a local MODIS data     # MODIS local files have names such as     # \"TERRA_MODIS_012010_NDVI_2013-09-14.jp2\"     # see the parse info parameter as an example on how to     # decode local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     modis_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir,         parse_info = c(\"satellite\", \"sensor\", \"tile\", \"band\", \"date\")     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.local_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","title":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","text":"Creates data cubes based files local directory. Assumes users downloaded data known cloud collection data created sits.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.local_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","text":"","code":"# S3 method for class 'local_cube' sits_cube(   source,   collection,   ...,   bands = NULL,   tiles = NULL,   start_date = NULL,   end_date = NULL,   data_dir,   parse_info = c(\"X1\", \"X2\", \"tile\", \"band\", \"date\"),   delim = \"_\",   multicores = 2L,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.local_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","text":"source Data source: one \"AWS\", \"BDC\", \"CDSE\", \"DEAFRICA\", \"DEAUSTRALIA\", \"HLS\", \"PLANETSCOPE\", \"MPC\", \"SDC\" \"USGS\". source data downloaded. collection Image collection data source. find supported collections, use sits_list_collections()). ... parameters passed specific types. bands Spectral bands indices included cube (optional). tiles Tiles collection included cube (see details ). start_date, end_date Initial final dates include images collection cube (optional). (Date YYYY-MM-DD format). data_dir Local directory images stored. parse_info Parsing information local files. delim Delimiter parsing local files (default = \"_\") multicores Number workers parallel processing (integer, min = 1, max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.local_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","text":"tibble describing contents data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.local_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","text":"create cube local files, please inform: source: data provider data  downloaded (e.g, \"BDC\", \"MPC\"); collection: collection data comes .  (e.g., \"SENTINEL-2-L2A\" Sentinel-2 MPC collection level 2A); data_dir: local directory image files stored. parse_info: Defines extract metadata file names  specifying order meaning part, separated  \"delim\" character. Default value  c(\"X1\", \"X2\", \"tile\", \"band\", \"date\"). delim: delimiter character used separate components  file names. Default \"_\". Please ensure local files meet following requirements: image files must spatial resolution projection; file represent single image band single date; File names must include information tile,  date, band names. parse_info parameter tells sits extract          metadata file names. default parse_info parameter          c(satellite, sensor, tile, band, date). Example supported file names : \"CBERS-4_WFI_022024_B13_2021-05-15.tif\"; \"SENTINEL-1_GRD_30TXL_VV_2023-03-10.tif\"; \"LANDSAT-8_OLI_198030_B04_2020-09-12.tif\". load local data cube specifying source (e.g., AWS, MPC) collection, sits assumes data properties (e.g., scale factor, minimum, maximum values) match defined selected provider. working custom data unsupported source data follow standard definitions providers sits, refer Technical Annex sits online book guidance handling cases (e-sensing.github.io/sitsbook/technical-annex.html).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.local_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sits cubes from cubes in flat files in a local — sits_cube.local_cube","text":"","code":"if (sits_run_examples()) {     # --- Create a cube based on a local MODIS data     # MODIS local files have names such as     # \"TERRA_MODIS_012010_NDVI_2013-09-14.jp2\"     # see the parse info parameter as an example on how to     # decode local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     modis_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir,         parse_info = c(\"satellite\", \"sensor\", \"tile\", \"band\", \"date\")     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.results_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a results cube from local files — sits_cube.results_cube","title":"Create a results cube from local files — sits_cube.results_cube","text":"Creates data cube local files produced sits operations produces results (probs_cubs class_cubes)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.results_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a results cube from local files — sits_cube.results_cube","text":"","code":"# S3 method for class 'results_cube' sits_cube(   source,   collection,   ...,   data_dir,   tiles = NULL,   bands,   labels = NULL,   parse_info = c(\"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\", \"band\", \"version\"),   version = \"v1\",   delim = \"_\",   multicores = 2L,   memsize = 2L,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.results_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a results cube from local files — sits_cube.results_cube","text":"source Data source: one \"AWS\", \"BDC\", \"CDSE\", \"DEAFRICA\", \"DEAUSTRALIA\", \"HLS\", \"PLANETSCOPE\", \"MPC\", \"SDC\" \"USGS\". source original data downloaded. collection Image collection data source original data downloaded. find supported collections, use sits_list_collections()). ... parameters passed specific types. data_dir Local directory images stored tiles Tiles collection included cube. bands Results bands retrieved (\"probs\", \"bayes\", \"variance\", \"class\", \"uncertainty\") labels Named vector labels associated classes parse_info Parsing information local files (see notes ). version Version classified /labelled files. delim Delimiter parsing local results cubes (default = \"_\") multicores Number workers parallel processing (integer, min = 1, max = 2048). memsize Memory available (GB) progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.results_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a results cube from local files — sits_cube.results_cube","text":"tibble describing contents data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.results_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a results cube from local files — sits_cube.results_cube","text":"function creates result cubes local files produced classification post-classification algorithms. case, parse_info specified differently, additional parameters required. parameter bands single character vector name associated type result: \"probs\", probability cubes produced   sits_classify. \"bayes\", smoothed cubes produced    sits_smooth. \"entropy\" using sits_uncertainty   measure entropy pixel classification. \"margin\" using sits_uncertainty  measure  probability margin pixel classification. \"least\" using sits_uncertainty  measure difference 100%  probable class pixel classification. \"class\" cubes produced          sits_label_classification. cubes type \"probs\", \"bayes\", \"class\",     labels parameter named vector associated     classification results. \"class\" cubes, names     integers associated values raster files represent     classified cube. Parameter parse_info contain parsing information   deduce values tile, start_date,   end_date band file name.   Default c(\"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\", \"band\").   Cubes processed sits adhere format.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.results_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a results cube from local files — sits_cube.results_cube","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)      # obtain and name the labels of the local probs cube     labels <- sits_labels(rfor_model)     names(labels) <- seq_along(labels)      # recover the local probability cube     probs_local_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = tempdir(),         bands = \"probs\",         labels = labels     )     # compare the two plots (they should be the same)     plot(probs_local_cube)      # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)      # recover the local smoothed cube     smooth_local_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = tempdir(),         bands = \"bayes\",         labels = labels     )     # compare the two plots (they should be the same)     plot(smooth_local_cube)      # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube)      # recover the local classified cube     class_local_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = tempdir(),         bands = \"class\",         labels = labels     )     # compare the two plots (they should be the same)     plot(class_local_cube)      # obtain an uncertainty cube with entropy     entropy_cube <- sits_uncertainty(         cube = bayes_cube,         type = \"entropy\",         output_dir = tempdir()     )     # plot entropy values     plot(entropy_cube)      # recover an uncertainty cube with entropy     entropy_local_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = tempdir(),         bands = \"entropy\"     )     # plot recovered entropy values     plot(entropy_local_cube)      # obtain an uncertainty cube with margin     margin_cube <- sits_uncertainty(         cube = bayes_cube,         type = \"margin\",         output_dir = tempdir()     )     # plot entropy values     plot(margin_cube)      # recover an uncertainty cube with entropy     margin_local_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = tempdir(),         bands = \"margin\"     )     # plot recovered entropy values     plot(margin_local_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.stac_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","title":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","text":"Creates data cube based spatial temporal restrictions collections accessible STAC protocol","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.stac_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","text":"","code":"# S3 method for class 'stac_cube' sits_cube(   source,   collection,   ...,   bands = NULL,   tiles = NULL,   roi = NULL,   crs = NULL,   start_date = NULL,   end_date = NULL,   orbit = \"descending\",   platform = NULL,   multicores = 2L,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.stac_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","text":"source Data source: one \"AWS\", \"BDC\", \"CDSE\", \"DEAFRICA\", \"DEAUSTRALIA\", \"HLS\", \"PLANETSCOPE\", \"MPC\", \"SDC\" \"USGS\". collection Image collection data source. find supported collections, use sits_list_collections()). ... parameters passed specific types. bands Spectral bands indices included cube (optional). Use sits_list_collections() find bands available collection. tiles Tiles collection included cube (see details ). roi Region interest (see ). crs Coordinate Reference System (CRS) roi. (see details ). start_date, end_date Initial final dates include images collection cube (optional). (Date YYYY-MM-DD format). orbit Orbit name (\"ascending\", \"descending\") SAR cubes. platform Optional parameter specifying platform case \"LANDSAT\" collection. Options: Landsat-5, Landsat-7, Landsat-8, Landsat-9. multicores Number workers parallel processing (integer, min = 1, max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.stac_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","text":"tibble describing contents data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.stac_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","text":"Data cubes identified cloud providers using sits_cube. result sits_cube description location requested data cloud provider. download done. create data cube objects cloud providers, users need inform: source: Name cloud provider.   One \"AWS\", \"BDC\", \"CDSE\", \"DEAFRICA\", \"DEAUSTRALIA\",  \"HLS\", \"PLANETSCOPE\", \"MPC\", \"SDC\", \"TERRASCOPE\", \"USGS\"; collection: Name image collection available         cloud provider (e.g, \"SENTINEL-1-RTC\" MPC).         Use sits_list_collections() see         collections supported; tiles: set tiles defined according collection         tiling grid (e.g, c(\"20LMR\", \"20LMP\") MGRS); roi: Region interest (see ) parameters bands, start_date, end_date  optional cubes created cloud providers. Either tiles roi must informed. tiles specify set valid tiles ARD collection. example, Landsat data tiles WRS2 tiling system Sentinel-2 data uses MGRS tiling system. roi parameter used select types images. parameter crop region; selects images intersect . define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",             \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",              \"ymin\", \"ymax\") XY coordinates. Defining region interest using SpatExtent XY values WGS84 requires crs parameter specified. get details provider collection  available sits, please read online sits book (e-sensing.github.io/sitsbook). chapter Earth Observation data cubes provides detailed description collections can use sits (e-sensing.github.io/sitsbook/earth-observation-data-cubes.html).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.stac_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data cubes from image collections accessible by STAC — sits_cube.stac_cube","text":"","code":"if (sits_run_examples()) {     # --- Creating Sentinel cube from MPC     s2_cube <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-2-L2A\",         tiles = \"20LKP\",         bands = c(\"B05\", \"CLOUD\"),         start_date = \"2018-07-18\",         end_date = \"2018-08-23\"     )      # --- Creating Landsat cube from MPC     roi <- c(         \"lon_min\" = -50.410, \"lon_max\" = -50.379,         \"lat_min\" = -10.1910, \"lat_max\" = -10.1573     )     mpc_cube <- sits_cube(         source = \"MPC\",         collection = \"LANDSAT-C2-L2\",         bands = c(\"BLUE\", \"RED\", \"CLOUD\"),         roi = roi,         start_date = \"2005-01-01\",         end_date = \"2006-10-28\"     )      ## Sentinel-1 SAR from MPC     roi_sar <- c(         \"lon_min\" = -50.410, \"lon_max\" = -50.379,         \"lat_min\" = -10.1910, \"lat_max\" = -10.1573     )      s1_cube_open <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-1-GRD\",         bands = c(\"VV\", \"VH\"),         orbit = \"descending\",         roi = roi_sar,         start_date = \"2020-06-01\",         end_date = \"2020-09-28\"     )     # --- Access to the Brazil Data Cube     # create a raster cube file based on the information in the BDC     cbers_tile <- sits_cube(         source = \"BDC\",         collection = \"CBERS-WFI-16D\",         bands = c(\"NDVI\", \"EVI\"),         tiles = \"007004\",         start_date = \"2018-09-01\",         end_date = \"2019-08-28\"     )     # --- Access to Digital Earth Africa     # create a raster cube file based on the information about the files     # DEAFRICA does not support definition of tiles     cube_deafrica <- sits_cube(         source = \"DEAFRICA\",         collection = \"SENTINEL-2-L2A\",         bands = c(\"B04\", \"B08\"),         roi = c(             \"lat_min\" = 17.379,             \"lon_min\" = 1.1573,             \"lat_max\" = 17.410,             \"lon_max\" = 1.1910         ),         start_date = \"2019-01-01\",         end_date = \"2019-10-28\"     )     # --- Access to Digital Earth Australia     cube_deaustralia <- sits_cube(         source = \"DEAUSTRALIA\",         collection = \"GA_LS8CLS9C_GM_CYEAR_3\",         bands = c(\"RED\", \"GREEN\", \"BLUE\"),         roi = c(             lon_min = 137.15991,             lon_max = 138.18467,             lat_min = -33.85777,             lat_max = -32.56690         ),         start_date = \"2018-01-01\",         end_date = \"2018-12-31\"     )     # --- Access to CDSE open data Sentinel 2/2A level 2 collection     # --- remember to set the appropriate environmental variables     # It is recommended that `multicores` be used to accelerate the process.     s2_cube <- sits_cube(         source = \"CDSE\",         collection = \"SENTINEL-2-L2A\",         tiles = c(\"20LKP\"),         bands = c(\"B04\", \"B08\", \"B11\"),         start_date = \"2018-07-18\",         end_date = \"2019-01-23\"     )      ## --- Sentinel-1 SAR from CDSE     # --- remember to set the appropriate environmental variables     # --- Obtain a AWS_ACCESS_KEY_ID and AWS_ACCESS_SECRET_KEY_ID     # --- from CDSE     roi_sar <- c(         \"lon_min\" = 33.546, \"lon_max\" = 34.999,         \"lat_min\" = 1.427, \"lat_max\" = 3.726     )     s1_cube_open <- sits_cube(         source = \"CDSE\",         collection = \"SENTINEL-1-RTC\",         bands = c(\"VV\", \"VH\"),         orbit = \"descending\",         roi = roi_sar,         start_date = \"2020-01-01\",         end_date = \"2020-06-10\"     )       # -- Access to World Cover data (2021) via Terrascope     cube_terrascope <- sits_cube(         source = \"TERRASCOPE\",         collection = \"WORLD-COVER-2021\",         roi = c(             lon_min = -62.7,             lon_max = -62.5,             lat_min = -8.83,             lat_max = -8.70         )     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.vector_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector cube from local files — sits_cube.vector_cube","title":"Create a vector cube from local files — sits_cube.vector_cube","text":"Creates data cube local files include vector file produced segmentation algorithm.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.vector_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector cube from local files — sits_cube.vector_cube","text":"","code":"# S3 method for class 'vector_cube' sits_cube(   source,   collection,   ...,   raster_cube,   vector_dir,   vector_band,   parse_info = c(\"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\", \"band\", \"version\"),   version = \"v1\",   delim = \"_\",   multicores = 2L,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.vector_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector cube from local files — sits_cube.vector_cube","text":"source Data source: one \"AWS\", \"BDC\", \"CDSE\", \"DEAFRICA\", \"DEAUSTRALIA\", \"HLS\", \"PLANETSCOPE\", \"MPC\", \"SDC\" \"USGS\". source data downloaded. collection Image collection data source. find supported collections, use sits_list_collections()). ... parameters passed specific types. raster_cube Raster cube merged vector data vector_dir Local directory vector files stored vector_band Band vector cube (\"segments\", \"probs\", \"class\") parse_info Parsing information local image files version Version classified /labelled files. delim Delimiter parsing local files (default = \"_\") multicores Number workers parallel processing (integer, min = 1, max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.vector_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector cube from local files — sits_cube.vector_cube","text":"tibble describing contents data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.vector_cube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a vector cube from local files — sits_cube.vector_cube","text":"function creates vector cubes local files produced sits_segment, sits_classify sits_label_classification output vector cube. case, parse_info specified differently c(\"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\", \"band\"). parameter vector_dir directory vector file stored. Parameter vector_band band name type vector cube: \"segments\", vector cubes produced    sits_segment. \"probs\", probability cubes produced    sits_classify.vector_cube. \"entropy\" using    sits_uncertainty.probs_vector_cube. \"class\" cubes produced    sits_label_classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube.vector_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector cube from local files — sits_cube.vector_cube","text":"","code":"if (sits_run_examples()) {     # --- Create a cube based on a local MODIS data     # MODIS local files have names such as     # \"TERRA_MODIS_012010_NDVI_2013-09-14.jp2\"     # see the parse info parameter as an example on how to     # decode local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     modis_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir,         parse_info = c(\"satellite\", \"sensor\", \"tile\", \"band\", \"date\")     )     # segment the vector cube     segs_cube <- sits_segment(         cube = modis_cube,         seg_fn = sits_slic(             step = 10,             compactness = 1,             dist_fun = \"euclidean\",             avg_fun = \"median\",             iter = 30,             minarea = 10         ),         output_dir = tempdir()     )     plot(segs_cube)      # recover the local segmented cube     local_segs_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         raster_cube = modis_cube,         vector_dir = tempdir(),         vector_band = \"segments\"     )     # plot the recover model and compare     plot(local_segs_cube)      # classify the segments     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     probs_vector_cube <- sits_classify(         data = segs_cube,         ml_model = rfor_model,         output_dir = tempdir(),         n_sam_pol = 10     )     plot(probs_vector_cube)      # recover vector cube     local_probs_vector_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         raster_cube = modis_cube,         vector_dir = tempdir(),         vector_band = \"probs\"     )     plot(local_probs_vector_cube)      # label the segments     class_vector_cube <- sits_label_classification(         cube = probs_vector_cube,         output_dir = tempdir(),     )     plot(class_vector_cube)      # recover vector cube     local_class_vector_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         raster_cube = modis_cube,         vector_dir = tempdir(),         vector_band = \"class\"     )     plot(local_class_vector_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy the images of a cube to a local directory — sits_cube_copy","title":"Copy the images of a cube to a local directory — sits_cube_copy","text":"function downloads images cube parallel. region interest (roi) can provided crop images resolution (res) resample bands. sits_cube_copy useful improve processing time regularization operation.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube_copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy the images of a cube to a local directory — sits_cube_copy","text":"","code":"sits_cube_copy(   cube,   roi = NULL,   res = NULL,   crs = NULL,   n_tries = 3L,   multicores = 2L,   output_dir,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_cube_copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy the images of a cube to a local directory — sits_cube_copy","text":"cube data cube (class \"raster_cube\") roi Region interest. Either: path shapefile polygons; sf object sf package; named vector (\"lon_min\",       \"lat_min\", \"lon_max\", \"lat_max\")       WGS84; named vector (\"xmin\", \"xmax\",       \"ymin\", \"ymax\") XY coordinates       WGS84. res integer value corresponds output spatial resolution images. Default NULL. crs Coordinate Reference System (CRS) roi. (see details ). n_tries Number attempts download image. Default 3. multicores Number cores parallel downloading (integer, min = 1, max = 2048). output_dir Output directory images saved. (character vector length 1). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube_copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy the images of a cube to a local directory — sits_cube_copy","text":"Copy input data cube (class \"raster cube\"). main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. roi parameter used crop cube images. define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",            \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",          \"ymin\", \"ymax\") XY coordinates. Defining region interest using SpatExtent XY values WGS84 requires crs parameter specified.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube_copy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Copy the images of a cube to a local directory — sits_cube_copy","text":"Felipe Carlos, efelipecarlos@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_cube_copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy the images of a cube to a local directory — sits_cube_copy","text":"","code":"if (sits_run_examples()) {     # Creating a sits cube from BDC     bdc_cube <- sits_cube(         source = \"BDC\",         collection = \"CBERS-WFI-16D\",         tiles = c(\"007004\", \"007005\"),         bands = c(\"B15\", \"CLOUD\"),         start_date = \"2018-01-01\",         end_date = \"2018-01-12\"     )     # Downloading images to a temporary directory     cube_local <- sits_cube_copy(         cube = bdc_cube,         output_dir = tempdir(),         roi = c(             lon_min = -46.5,             lat_min = -45.5,             lon_max = -15.5,             lat_max = -14.6         ),         multicores = 2L,         res = 250     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_factory_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a closure for calling functions with and without data — sits_factory_function","title":"Create a closure for calling functions with and without data — sits_factory_function","text":"function implements factory method pattern. creates generic interface closures R functions sits package can called two different ways: 1. Called directly, passing input data parameters. 2. Called second-order values (parameters another function).    second case, call pass data values    pass parameters execution factory pattern used many situations sits package, allow different alternatives filtering, pattern creation, training, cross-validation Please see chapter \"Technical Annex\" sits book details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_factory_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a closure for calling functions with and without data — sits_factory_function","text":"","code":"sits_factory_function(data, fun)"},{"path":"https://e-sensing.github.io/sits/reference/sits_factory_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a closure for calling functions with and without data — sits_factory_function","text":"data Input data. fun Function performs calculation input data.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_factory_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a closure for calling functions with and without data — sits_factory_function","text":"closure encapsulates function applied data.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_factory_function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a closure for calling functions with and without data — sits_factory_function","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_factory_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a closure for calling functions with and without data — sits_factory_function","text":"","code":"# example code if (sits_run_examples()) {     # Include a new machine learning function (multiple linear regression)     # function that returns mlr model based on a sits sample tibble      sits_mlr <- function(samples = NULL, formula = sits_formula_linear(),                          n_weights = 20000, maxit = 2000) {         train_fun <- function(samples) {             # Data normalization             ml_stats <- sits_stats(samples)             train_samples <- sits_predictors(samples)             train_samples <- sits_pred_normalize(                 pred = train_samples,                 stats = ml_stats             )             formula <- formula(train_samples[, -1])             # call method and return the trained model             result_mlr <- nnet::multinom(                 formula = formula,                 data = train_samples,                 maxit = maxit,                 MaxNWts = n_weights,                 trace = FALSE,                 na.action = stats::na.fail             )              # construct model predict closure function and returns             predict_fun <- function(values) {                 # retrieve the prediction (values and probs)                 prediction <- tibble::as_tibble(                     stats::predict(result_mlr,                         newdata = values,                         type = \"probs\"                     )                 )                 return(prediction)             }             class(predict_fun) <- c(\"sits_model\", class(predict_fun))             return(predict_fun)         }         result <- sits_factory_function(samples, train_fun)         return(result)     }     # create an mlr model using a set of samples     mlr_model <- sits_train(samples_modis_ndvi, sits_mlr)     # classify a point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     point_class <- sits_classify(point_ndvi, mlr_model, multicores = 1)     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter time series with smoothing filter — sits_filter","title":"Filter time series with smoothing filter — sits_filter","text":"Applies filter bands, using filter function  sits_whittaker  sits_sgolay.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter time series with smoothing filter — sits_filter","text":"","code":"sits_filter(data, filter = sits_whittaker())"},{"path":"https://e-sensing.github.io/sits/reference/sits_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter time series with smoothing filter — sits_filter","text":"data Time series (tibble class \"sits\") matrix. filter Filter function applied.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter time series with smoothing filter — sits_filter","text":"Filtered time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter time series with smoothing filter — sits_filter","text":"","code":"if (sits_run_examples()) {     # Retrieve a time series with values of NDVI     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # Filter the point using the Whittaker smoother     point_whit <- sits_filter(point_ndvi, sits_whittaker(lambda = 3.0))     # Merge time series     point_ndvi <- sits_merge(point_ndvi, point_whit,         suffix = c(\"\", \".WHIT\")     )     # Plot the two points to see the smoothing effect     plot(point_ndvi) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a linear formula for classification models — sits_formula_linear","title":"Define a linear formula for classification models — sits_formula_linear","text":"Provides symbolic description fitting model. Tells model linear transformation input values. `predictors_index` parameter informs positions fields corresponding formula independent variables. value given,  fields used predictors.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a linear formula for classification models — sits_formula_linear","text":"","code":"sits_formula_linear(predictors_index = -2L:0L)"},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a linear formula for classification models — sits_formula_linear","text":"predictors_index Index valid columns whose names used compose formula (default: -2:0).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a linear formula for classification models — sits_formula_linear","text":"function computes valid formula using linear function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define a linear formula for classification models — sits_formula_linear","text":"Gilberto Camara, gilberto.camara@inpe.br Alexandre Ywata de Carvalho, alexandre.ywata@ipea.gov.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a linear formula for classification models — sits_formula_linear","text":"","code":"if (sits_run_examples()) {     # Example of training a model for time series classification     # Retrieve the samples for Mato Grosso     # train an SVM model     ml_model <- sits_train(samples_modis_ndvi,         ml_method = sits_svm(formula = sits_formula_logref())     )     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # classify the point     point_class <- sits_classify(         data = point_ndvi, ml_model = ml_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_logref.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a loglinear formula for classification models — sits_formula_logref","title":"Define a loglinear formula for classification models — sits_formula_logref","text":"function used symbolic description fitting models svm random forest. function tells models log transformation inputs. `predictors_index` parameter informs positions `tb` fields corresponding formula independent variables. value given, default NULL, value indicating fields used predictors.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_logref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a loglinear formula for classification models — sits_formula_logref","text":"","code":"sits_formula_logref(predictors_index = -2L:0L)"},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_logref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a loglinear formula for classification models — sits_formula_logref","text":"predictors_index Index valid columns compose formula (default: -2:0).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_logref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a loglinear formula for classification models — sits_formula_logref","text":"function computes valid formula using log function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_logref.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define a loglinear formula for classification models — sits_formula_logref","text":"Alexandre Ywata de Carvalho, alexandre.ywata@ipea.gov.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_formula_logref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a loglinear formula for classification models — sits_formula_logref","text":"","code":"if (sits_run_examples()) {     # Example of training a model for time series classification     # Retrieve the samples for Mato Grosso     # train an SVM model     ml_model <- sits_train(samples_modis_ndvi,         ml_method = sits_svm(formula = sits_formula_logref())     )     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # classify the point     point_class <- sits_classify(         data = point_ndvi, ml_model = ml_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"Compute minimum distances among samples samples prediction points, following approach proposed Meyer Pebesma(2022).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"","code":"sits_geo_dist(samples, roi, n = 1000L, crs = \"EPSG:4326\")"},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"samples Time series (tibble class \"sits\"). roi region interest (ROI), either file containing shapefile \"sf\" object n Maximum number samples consider (integer) crs CRS samples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"tibble sample--sample sample--prediction distances         (object class \"distances\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"pointed Meyer Pebesma, many classifications using machine learning assume reference data independent well-distributed space. practice, many training samples strongly concentrated areas, many large areas samples. function compares two distributions: distribution spatial distances reference data nearest neighbor (sample--sample. distribution distances points study area nearest reference data point (sample--prediction).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"Meyer, H., Pebesma, E. \"Machine learning-based global maps ecological variables challenge assessing \", Nature Communications 13, 2208 (2022). doi:10.1038/s41467-022-29838-9 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"Alber Sanchez, alber.ipia@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_geo_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the minimum distances among samples and prediction points. — sits_geo_dist","text":"","code":"if (sits_run_examples()) {     # read a shapefile for the state of Mato Grosso, Brazil     mt_shp <- system.file(\"extdata/shapefiles/mato_grosso/mt.shp\",         package = \"sits\"     )     # convert to an sf object     mt_sf <- sf::read_sf(mt_shp)     # calculate sample-to-sample and sample-to-prediction distances     distances <- sits_geo_dist(         samples = samples_modis_ndvi,         roi = mt_sf     )     # plot sample-to-sample and sample-to-prediction distances     plot(distances) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values from classified maps — sits_get_class","title":"Get values from classified maps — sits_get_class","text":"Given set lat/long locations classified cube, retrieve class point. function useful obtain values classified cubes accuracy estimates.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values from classified maps — sits_get_class","text":"","code":"sits_get_class(cube, samples)  # Default S3 method sits_get_class(cube, samples)  # S3 method for class 'csv' sits_get_class(cube, samples)  # S3 method for class 'shp' sits_get_class(cube, samples)  # S3 method for class 'sf' sits_get_class(cube, samples)  # S3 method for class 'sits' sits_get_class(cube, samples)  # S3 method for class 'data.frame' sits_get_class(cube, samples)"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values from classified maps — sits_get_class","text":"cube Classified data cube. samples Location samples retrieved. Either tibble class \"sits\", \"sf\" object, name shapefile csv file, data.frame columns \"longitude\" \"latitude\"","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values from classified maps — sits_get_class","text":"tibble columns                        <longitude, latitude, start_date, end_date, label>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get values from classified maps — sits_get_class","text":"four ways specifying data retrieved using samples parameter: () CSV file: CSV file columns longitude, latitude; (b) SHP file: shapefile POINT geometry; (c) sits object: sits tibble; (d) sf object: link[sf]{sf} object POINT geometry; (e) data.frame: data.frame longitude latitude.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get values from classified maps — sits_get_class","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get values from classified maps — sits_get_class","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # obtain the a set of points for sampling     ground_truth <- system.file(\"extdata/samples/samples_sinop_crop.csv\",         package = \"sits\"     )     # get the classification values for a selected set of locations     labels_samples <- sits_get_class(label_cube, ground_truth) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series using CSV files — sits_get_data.csv","title":"Get time series using CSV files — sits_get_data.csv","text":"Retrieve set time series data cube put result \"sits tibble\", contains satellite image time series metadata. samples parameter must point file extension \".csv\", mandatory columns longitude, latitude, label, start_date  end_date.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series using CSV files — sits_get_data.csv","text":"","code":"# S3 method for class 'csv' sits_get_data(   cube,   samples,   ...,   bands = NULL,   crs = \"EPSG:4326\",   impute_fn = impute_linear(),   multicores = 2L,   progress = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series using CSV files — sits_get_data.csv","text":"cube Data cube data retrieved. (tibble class \"raster_cube\"). samples Location csv file. ... Specific parameters kind input. bands Bands retrieved - optional. crs character samples crs. Default \"EPSG:4326\". impute_fn Imputation function remove NA. multicores Number threads process time series (integer, min = 1 max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series using CSV files — sits_get_data.csv","text":"tibble class \"sits\" set time series metadata <longitude, latitude, start_date, end_date, label, time_series>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time series using CSV files — sits_get_data.csv","text":"","code":"if (sits_run_examples()) {     # reading a lat/long from a local cube     # create a cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     raster_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # reading samples from a cube based on a  CSV file     csv_file <- system.file(\"extdata/samples/samples_sinop_crop.csv\",         package = \"sits\"     )     points <- sits_get_data(cube = raster_cube, samples = csv_file) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series using sits objects — sits_get_data.data.frame","title":"Get time series using sits objects — sits_get_data.data.frame","text":"Retrieve set time series data cube put result sits tibble. samples parameter data.frame contains mandatory columns longitude latitude, optional columns start_date, end_date label sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series using sits objects — sits_get_data.data.frame","text":"","code":"# S3 method for class 'data.frame' sits_get_data(   cube,   samples,   ...,   start_date = NULL,   end_date = NULL,   bands = NULL,   impute_fn = impute_linear(),   label = \"NoClass\",   crs = \"EPSG:4326\",   multicores = 2,   progress = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series using sits objects — sits_get_data.data.frame","text":"cube Data cube data retrieved. (tibble class \"raster_cube\"). samples data.frame mandatory columns longitude, latitude, optional columns start_date, end_date, label. ... Specific parameters specific cases. start_date Start interval time series - optional (Date \"YYYY-MM-DD\" format). end_date End interval time series - optional (Date \"YYYY-MM-DD\" format). bands Bands retrieved - optional. impute_fn Imputation function remove NA. label Label assigned time series column label provided data.frame. crs character samples crs. Default \"EPSG:4326\". multicores Number threads process time series (integer, min = 1 max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series using sits objects — sits_get_data.data.frame","text":"tibble class \"sits\" set time series <longitude, latitude, start_date, end_date, label>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time series using sits objects — sits_get_data.data.frame","text":"","code":"if (sits_run_examples()) {     # create a cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     raster_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # read a lat/long from a local cube     samples <- data.frame(longitude = -55.66738, latitude = -11.76990)     point_ndvi <- sits_get_data(raster_cube, samples) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series from data cubes and cloud services — sits_get_data","title":"Get time series from data cubes and cloud services — sits_get_data","text":"Retrieve set time series data cube put result sits tibble, contains satellite image time series metadata. five options specifying input samples parameter: CSV file: see sits_get_data.csv. shapefile: see sits_get_data.shp. sf object: see sits_get_data.sf. sits tibble: see sits_get_data.sits. data.frame: see sits_get_data.data.frame.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series from data cubes and cloud services — sits_get_data","text":"","code":"sits_get_data(cube, samples, ...)  # Default S3 method sits_get_data(cube, samples, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series from data cubes and cloud services — sits_get_data","text":"cube Data cube data retrieved. (tibble class \"raster_cube\"). samples Location samples retrieved. Either tibble class \"sits\", \"sf\" object, name shapefile csv file, data.frame columns \"longitude\" \"latitude\". ... Specific parameters input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series from data cubes and cloud services — sits_get_data","text":"tibble class \"sits\" set time series <longitude, latitude, start_date, end_date, label, time_series>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get time series from data cubes and cloud services — sits_get_data","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. able build machine learning model classify data cube, one needs use set labelled time series. time series created taking set known samples, expressed labelled points polygons. sits_get_data function  uses samples extract time series data cube. needs cube parameter points regularized data cube, samples parameter describes locations training set.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get time series from data cubes and cloud services — sits_get_data","text":"Felipe Carlos, efelipecarlos@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time series from data cubes and cloud services — sits_get_data","text":"","code":"if (sits_run_examples()) {     # reading a lat/long from a local cube     # create a cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     raster_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     samples <- tibble::tibble(longitude = -55.66738, latitude = -11.76990)     point_ndvi <- sits_get_data(raster_cube, samples)     #     # reading samples from a cube based on a  CSV file     csv_file <- system.file(\"extdata/samples/samples_sinop_crop.csv\",         package = \"sits\"     )     points <- sits_get_data(cube = raster_cube, samples = csv_file)      # reading a shapefile from BDC (Brazil Data Cube)     bdc_cube <- sits_cube(         source = \"BDC\",         collection = \"CBERS-WFI-16D\",         bands = c(\"NDVI\", \"EVI\"),         tiles = c(\"007004\", \"007005\"),         start_date = \"2018-09-01\",         end_date = \"2018-10-28\"     )     # define a shapefile to be read from the cube     shp_file <- system.file(\"extdata/shapefiles/bdc-test/samples.shp\",         package = \"sits\"     )     # get samples from the BDC based on the shapefile     time_series_bdc <- sits_get_data(         cube = bdc_cube,         samples = shp_file     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series using sf objects — sits_get_data.sf","title":"Get time series using sf objects — sits_get_data.sf","text":"Retrieve set time series data cube put result \"sits tibble\", contains satellite image time series metadata. samples parameter must sf object POINT POLYGON geometry. start_date end_date informed, function uses data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series using sf objects — sits_get_data.sf","text":"","code":"# S3 method for class 'sf' sits_get_data(   cube,   samples,   ...,   start_date = NULL,   end_date = NULL,   bands = NULL,   impute_fn = impute_linear(),   label = \"NoClass\",   label_attr = NULL,   n_sam_pol = 30L,   pol_avg = FALSE,   sampling_type = \"random\",   multicores = 2L,   progress = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series using sf objects — sits_get_data.sf","text":"cube Data cube data retrieved. (tibble class \"raster_cube\"). samples name shapefile. ... Specific parameters specific cases. start_date Start interval time series - optional (Date \"YYYY-MM-DD\" format). end_date End interval time series - optional (Date \"YYYY-MM-DD\" format). bands Bands retrieved - optional (character vector). impute_fn Imputation function remove NA. label Label assigned time series - optional label_attr Attribute sf object used polygon label. n_sam_pol Number samples per polygon read POLYGON MULTIPOLYGON objects. pol_avg Logical: summarize samples polygon? sampling_type Spatial sampling type: random, hexagonal, regular, Fibonacci. multicores Number threads process time series (integer, min = 1 max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series using sf objects — sits_get_data.sf","text":"tibble class \"sits\" set time series <longitude, latitude, start_date, end_date, label>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get time series using sf objects — sits_get_data.sf","text":"sf objects, following parameters relevant: label: label assigned samples. used geometries single label. label_attr: defines attribute used label, required POINT POLYGON geometries label set. n_sam_pol: indicates many points extracted polygon, required POLYGON geometry (default = 15). sampling_type: defines sampling done, required POLYGON geometry (default = \"random\"). pol_avg: indicates average values POLYGON geometry computed (default = \"FALSE\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time series using sf objects — sits_get_data.sf","text":"","code":"if (sits_run_examples()) {     # reading a shapefile from BDC (Brazil Data Cube)     bdc_cube <- sits_cube(         source = \"BDC\",         collection = \"CBERS-WFI-16D\",         bands = c(\"NDVI\", \"EVI\"),         tiles = c(\"007004\", \"007005\"),         start_date = \"2018-09-01\",         end_date = \"2018-10-28\"     )     # define a shapefile to be read from the cube     shp_file <- system.file(\"extdata/shapefiles/bdc-test/samples.shp\",         package = \"sits\"     )     # read a shapefile into an sf object     sf_object <- sf::st_read(shp_file)     # get samples from the BDC using an sf object     time_series_bdc <- sits_get_data(         cube = bdc_cube,         samples = sf_object     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series using shapefiles — sits_get_data.shp","title":"Get time series using shapefiles — sits_get_data.shp","text":"Retrieve set time series data cube put result sits tibble, contains satellite image time series metadata. samples parameter must point file extension \".shp\" valid shapefile POINT POLYGON geometry. start_date end_date informed, function uses data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series using shapefiles — sits_get_data.shp","text":"","code":"# S3 method for class 'shp' sits_get_data(   cube,   samples,   ...,   start_date = NULL,   end_date = NULL,   bands = NULL,   impute_fn = impute_linear(),   label = \"NoClass\",   label_attr = NULL,   n_sam_pol = 30L,   pol_avg = FALSE,   sampling_type = \"random\",   multicores = 2L,   progress = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series using shapefiles — sits_get_data.shp","text":"cube Data cube data retrieved. (tibble class \"raster_cube\"). samples name shapefile. ... Specific parameters specific cases. start_date Start interval time series - optional (Date \"YYYY-MM-DD\" format). end_date End interval time series - optional (Date \"YYYY-MM-DD\" format). bands Bands retrieved - optional impute_fn Imputation function remove NA. label Label assigned time series - optional label_attr Attribute shapefile used polygon label. n_sam_pol Number samples per polygon read POLYGON MULTIPOLYGON shapefiles. pol_avg Logical: summarize samples polygon? sampling_type Spatial sampling type: random, hexagonal, regular, Fibonacci. multicores Number threads process time series (integer, min = 1 max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series using shapefiles — sits_get_data.shp","text":"tibble class \"sits\" set time series metadata <longitude, latitude, start_date, end_date, label, time_series>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.shp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get time series using shapefiles — sits_get_data.shp","text":"shapefiles, following parameters relevant: label: label assigned samples. used geometries single label. label_attr: defines attribute used label, required POINT POLYGON geometries label set. n_sam_pol: indicates many points extracted polygon, required POLYGON geometry (default = 15). sampling_type: defines sampling done, required POLYGON geometry (default = \"random\"). pol_avg: indicates average values POLYGON geometry computed (default = \"FALSE\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time series using shapefiles — sits_get_data.shp","text":"","code":"if (sits_run_examples()) {     # reading a shapefile from BDC (Brazil Data Cube)     bdc_cube <- sits_cube(         source = \"BDC\",         collection = \"CBERS-WFI-16D\",         bands = c(\"NDVI\", \"EVI\"),         tiles = c(\"007004\", \"007005\"),         start_date = \"2018-09-01\",         end_date = \"2018-10-28\"     )     # define a shapefile to be read from the cube     shp_file <- system.file(\"extdata/shapefiles/bdc-test/samples.shp\",         package = \"sits\"     )     # get samples from the BDC based on the shapefile     time_series_bdc <- sits_get_data(         cube = bdc_cube,         samples = shp_file     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series using sits objects — sits_get_data.sits","title":"Get time series using sits objects — sits_get_data.sits","text":"Retrieve set time series data cube put result sits tibble. samples parameter valid sits tibble contains columns longitude, latitude, start_date, end_date label sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series using sits objects — sits_get_data.sits","text":"","code":"# S3 method for class 'sits' sits_get_data(   cube,   samples,   ...,   bands = NULL,   crs = \"EPSG:4326\",   impute_fn = impute_linear(),   multicores = 2L,   progress = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series using sits objects — sits_get_data.sits","text":"cube Data cube data retrieved. (tibble class \"raster_cube\"). samples Location samples retrieved. Either tibble class \"sits\", \"sf\" object, name shapefile csv file, data.frame columns \"longitude\" \"latitude\". ... Specific parameters specific cases. bands Bands retrieved - optional. crs character samples crs. Default \"EPSG:4326\". impute_fn Imputation function remove NA. multicores Number threads process time series (integer, min = 1 max = 2048). progress Logical: show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_data.sits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series using sits objects — sits_get_data.sits","text":"tibble class \"sits\" set time series <longitude, latitude, start_date, end_date, label>.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values from probability maps — sits_get_probs","title":"Get values from probability maps — sits_get_probs","text":"Given set lat/long locations probability cube, retrieve prob values point. function useful estimate probability distributions assess differences classifiers.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values from probability maps — sits_get_probs","text":"","code":"sits_get_probs(cube, samples, window_size = NULL)  # S3 method for class 'csv' sits_get_probs(cube, samples, window_size = NULL)  # S3 method for class 'shp' sits_get_probs(cube, samples, window_size = NULL)  # S3 method for class 'sf' sits_get_probs(cube, samples, window_size = NULL)  # S3 method for class 'sits' sits_get_probs(cube, samples, window_size = NULL)  # S3 method for class 'data.frame' sits_get_probs(cube, samples, window_size = NULL)  # Default S3 method sits_get_probs(cube, samples, window_size = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values from probability maps — sits_get_probs","text":"cube Probability data cube. samples Location samples retrieved. Either tibble class \"sits\", \"sf\" object POINT geometry, location POINT shapefile, location csv file  columns \"longitude\" \"latitude\", data.frame columns \"longitude\" \"latitude\" window_size Size window around pixel (optional)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values from probability maps — sits_get_probs","text":"tibble columns                        <longitude, latitude, values> case windows                        requested <longitude, latitude, neighbors>                        case windows requested","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get values from probability maps — sits_get_probs","text":"four ways specifying data retrieved using samples parameter: CSV: CSV file columns longitude, latitude. SHP: shapefile POINT geometry. sf object:  link[sf]{sf} object POINT geometry. sits object: valid tibble sits timeseries. data.frame: data.frame longitude latitude.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get values from probability maps — sits_get_probs","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_get_probs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get values from probability maps — sits_get_probs","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # obtain the a set of points for sampling     ground_truth <- system.file(\"extdata/samples/samples_sinop_crop.csv\",         package = \"sits\"     )     # get the classification values for a selected set of locations     probs_samples <- sits_get_probs(probs_cube, ground_truth) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_impute.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NA values in time series with imputation function — sits_impute","title":"Replace NA values in time series with imputation function — sits_impute","text":"Remove NA","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NA values in time series with imputation function — sits_impute","text":"","code":"sits_impute(samples, impute_fn = impute_linear())"},{"path":"https://e-sensing.github.io/sits/reference/sits_impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NA values in time series with imputation function — sits_impute","text":"samples time series tibble impute_fn Imputation function","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_impute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace NA values in time series with imputation function — sits_impute","text":"set filtered time series using                       imputation function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_impute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace NA values in time series with imputation function — sits_impute","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validate time series samples — sits_kfold_validate","title":"Cross-validate time series samples — sits_kfold_validate","text":"Splits set time series training validation perform k-fold cross-validation.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validate time series samples — sits_kfold_validate","text":"","code":"sits_kfold_validate(   samples,   folds = 5L,   ml_method = sits_rfor(),   filter_fn = NULL,   impute_fn = impute_linear(),   multicores = 2L,   gpu_memory = 4L,   batch_size = 2L^gpu_memory,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validate time series samples — sits_kfold_validate","text":"samples Time series. folds Number partitions create. ml_method Machine learning method. filter_fn Smoothing filter applied - optional (closure containing object class \"function\"). impute_fn Imputation function remove NA. multicores Number cores process parallel. gpu_memory Memory available GPU GB (default = 4) batch_size Batch size GPU classification. progress Logical: Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validate time series samples — sits_kfold_validate","text":"caret::confusionMatrix object used         validation assessment.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validate time series samples — sits_kfold_validate","text":"Cross-validation technique assessing results statistical analysis generalize independent data set. mainly used settings goal prediction, one wants estimate accurately predictive model perform. One round cross-validation involves partitioning sample data complementary subsets, performing analysis one subset (called training set), validating analysis subset (called validation set testing set). k-fold cross validation method involves splitting dataset k-subsets. subset held model trained subsets. process completed accuracy determine instance dataset, overall accuracy estimate provided. function returns confusion matrix, Kappa values.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross-validate time series samples — sits_kfold_validate","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_kfold_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validate time series samples — sits_kfold_validate","text":"","code":"if (sits_run_examples()) {     # A dataset containing a tibble with time series samples     # for the Mato Grosso state in Brasil     # create a list to store the results     results <- list()     # accuracy assessment lightTAE     acc_rfor <- sits_kfold_validate(         samples_modis_ndvi,         folds = 5,         ml_method = sits_rfor()     )     # use a name     acc_rfor$name <- \"Rfor\"     # put the result in a list     results[[length(results) + 1]] <- acc_rfor     # save to xlsx file     sits_to_xlsx(         results,         file = tempfile(\"accuracy_mato_grosso_dl_\", fileext = \".xlsx\")     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a labelled image from a probability cube — sits_label_classification","title":"Build a labelled image from a probability cube — sits_label_classification","text":"Takes set classified raster layers probabilities, labels based maximum probability pixel. function final step main land classification workflow.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a labelled image from a probability cube — sits_label_classification","text":"","code":"sits_label_classification(cube, ...)  # S3 method for class 'probs_cube' sits_label_classification(   cube,   ...,   memsize = 4L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = TRUE )  # S3 method for class 'probs_vector_cube' sits_label_classification(   cube,   ...,   output_dir,   version = \"v1\",   progress = TRUE )  # S3 method for class 'raster_cube' sits_label_classification(cube, ...)  # S3 method for class 'derived_cube' sits_label_classification(cube, ...)  # Default S3 method sits_label_classification(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a labelled image from a probability cube — sits_label_classification","text":"cube Classified image data cube. ... parameters specific functions. memsize maximum overall memory (GB) label classification. multicores Number workers label classification parallel. output_dir Output directory classified files. version Version resulting image (case multiple runs). progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a labelled image from a probability cube — sits_label_classification","text":"data cube image classified map.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build a labelled image from a probability cube — sits_label_classification","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. Please refer sits documentation available https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build a labelled image from a probability cube — sits_label_classification","text":"Rolf Simoes, rolfsimoes@gmail.com Felipe Souza, felipe.souza@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_label_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a labelled image from a probability cube — sits_label_classification","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.class_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the labels of a set of time series — sits_labels<-.class_cube","title":"Change the labels of a set of time series — sits_labels<-.class_cube","text":"Change labels set time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.class_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the labels of a set of time series — sits_labels<-.class_cube","text":"","code":"# S3 method for class 'class_cube' sits_labels(data) <- value"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.class_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the labels of a set of time series — sits_labels<-.class_cube","text":"data Data cube time series. value character vector used convert labels. Labels renamed respective value positioned labels order returned sits_labels.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the labels of a set of time series — sits_labels<-.default","title":"Change the labels of a set of time series — sits_labels<-.default","text":"Change labels set time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the labels of a set of time series — sits_labels<-.default","text":"","code":"# Default S3 method sits_labels(data) <- value"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the labels of a set of time series — sits_labels<-.default","text":"data Data cube time series. value character vector used convert labels. Labels renamed respective value positioned labels order returned sits_labels.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.probs_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the labels of a set of time series — sits_labels<-.probs_cube","title":"Change the labels of a set of time series — sits_labels<-.probs_cube","text":"Change labels set time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.probs_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the labels of a set of time series — sits_labels<-.probs_cube","text":"","code":"# S3 method for class 'probs_cube' sits_labels(data) <- value"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.probs_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the labels of a set of time series — sits_labels<-.probs_cube","text":"data Data cube time series. value character vector used convert labels. Labels renamed respective value positioned labels order returned sits_labels.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.sits.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the labels of a set of time series — sits_labels<-.sits","title":"Change the labels of a set of time series — sits_labels<-.sits","text":"Change labels set time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.sits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the labels of a set of time series — sits_labels<-.sits","text":"","code":"# S3 method for class 'sits' sits_labels(data) <- value"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set-.sits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the labels of a set of time series — sits_labels<-.sits","text":"data Data cube time series. value character vector used convert labels. Labels renamed respective value positioned labels order returned sits_labels.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the labels of a set of time series — sits_labels<-","title":"Change the labels of a set of time series — sits_labels<-","text":"Given sits tibble set labels, renames labels specified value.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the labels of a set of time series — sits_labels<-","text":"","code":"sits_labels(data) <- value"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the labels of a set of time series — sits_labels<-","text":"data Data cube time series. value character vector used convert labels. Labels renamed respective value positioned labels order returned sits_labels.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the labels of a set of time series — sits_labels<-","text":"sits tibble data cube modified labels.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the labels of a set of time series — sits_labels<-","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the labels of a set of time series — sits_labels<-","text":"","code":"# show original samples (\"Cerrado\" and \"Pasture\") sits_labels(cerrado_2classes) #> [1] \"Cerrado\" \"Pasture\" # rename label samples to \"Savanna\" and \"Grasslands\" sits_labels(cerrado_2classes) <- c(\"Savanna\", \"Grasslands\") # see the change sits_labels(cerrado_2classes) #> [1] \"Grasslands\" \"Savanna\""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get labels associated to a data set — sits_labels","title":"Get labels associated to a data set — sits_labels","text":"Finds labels sits tibble data cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get labels associated to a data set — sits_labels","text":"","code":"sits_labels(data)  # S3 method for class 'sits' sits_labels(data)  # S3 method for class 'derived_cube' sits_labels(data)  # S3 method for class 'derived_vector_cube' sits_labels(data)  # S3 method for class 'raster_cube' sits_labels(data)  # S3 method for class 'patterns' sits_labels(data)  # S3 method for class 'sits_model' sits_labels(data)  # Default S3 method sits_labels(data)"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get labels associated to a data set — sits_labels","text":"data Time series (tibble class \"sits\"), patterns (tibble class \"patterns\"), data cube (tibble class \"raster_cube\"), model (closure class \"sits_model\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get labels associated to a data set — sits_labels","text":"labels input data (character vector).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get labels associated to a data set — sits_labels","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get labels associated to a data set — sits_labels","text":"","code":"if (sits_run_examples()) {     # get the labels for a time series set     labels_ts <- sits_labels(samples_modis_ndvi)     # get labels for a set of patterns     labels_pat <- sits_labels(sits_patterns(samples_modis_ndvi))     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # get lables for the model     labels_mod <- sits_labels(rfor_model)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # get the labels for a probs cube     labels_probs <- sits_labels(probs_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Inform label distribution of a set of time series — sits_labels_summary","title":"Inform label distribution of a set of time series — sits_labels_summary","text":"Describes labels sits tibble","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inform label distribution of a set of time series — sits_labels_summary","text":"","code":"sits_labels_summary(data)  # S3 method for class 'sits' sits_labels_summary(data)"},{"path":"https://e-sensing.github.io/sits/reference/sits_labels_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inform label distribution of a set of time series — sits_labels_summary","text":"data Data.frame - Valid sits tibble","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inform label distribution of a set of time series — sits_labels_summary","text":"tibble frequency label.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inform label distribution of a set of time series — sits_labels_summary","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_labels_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inform label distribution of a set of time series — sits_labels_summary","text":"","code":"# read a tibble with 400 samples of Cerrado and 346 samples of Pasture data(cerrado_2classes) # print the labels sits_labels_summary(cerrado_2classes) #> Warning: this function is deprecated; please use summary() #> # A tibble: 2 × 3 #>   label   count  prop #>   <chr>   <int> <dbl> #> 1 Cerrado   400 0.536 #> 2 Pasture   346 0.464"},{"path":"https://e-sensing.github.io/sits/reference/sits_lightgbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Train light gradient boosting model — sits_lightgbm","title":"Train light gradient boosting model — sits_lightgbm","text":"Use LightGBM algorithm classify samples. function front-end lightgbm package. LightGBM (short Light Gradient Boosting Machine) gradient boosting framework developed Microsoft designed fast, scalable, efficient training decision tree-based models. widely used machine learning classification, regression, ranking, tasks, especially large-scale data.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lightgbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train light gradient boosting model — sits_lightgbm","text":"","code":"sits_lightgbm(   samples = NULL,   boosting_type = \"gbdt\",   objective = \"multiclass\",   min_samples_leaf = 20,   max_depth = 6,   learning_rate = 0.1,   num_iterations = 100,   n_iter_no_change = 10,   validation_split = 0.2,   ... )"},{"path":"https://e-sensing.github.io/sits/reference/sits_lightgbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train light gradient boosting model — sits_lightgbm","text":"samples Time series training samples. boosting_type Type boosting algorithm (default = \"gbdt\") objective Aim classifier (default = \"multiclass\"). min_samples_leaf Minimal number data one leaf. Can used deal -fitting. max_depth Limit max depth tree model. learning_rate Shrinkage rate leaf-based algorithm. num_iterations Number iterations train model. n_iter_no_change Number iterations without improvements training stops. validation_split Fraction training data validation. model set apart fraction evaluate loss model metrics data end epoch. ... parameters passed `lightgbm::lightgbm` function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lightgbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train light gradient boosting model — sits_lightgbm","text":"Model fitted input data                   (passed sits_classify).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lightgbm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train light gradient boosting model — sits_lightgbm","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lightgbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train light gradient boosting model — sits_lightgbm","text":"","code":"if (sits_run_examples()) {     # Example of training a model for time series classification     # Retrieve the samples for Mato Grosso     # train a random forest model     lgb_model <- sits_train(samples_modis_ndvi,         ml_method = sits_lightgbm     )     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # classify the point     point_class <- sits_classify(         data = point_ndvi, ml_model = lgb_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"Implementation Light Temporal Attention Encoder (L-TAE) satellite image time series. lightweight version temporal attention encoder proposed Garnot et al. TAE, please see sits_tae. TAE simplified version well-known self-attention architeture used large language models. modified self-attention scheme uses input embeddings values. TAE defines single master query sequence, computed temporal average queries. master query compared sequence keys produce single attention mask used weight temporal mean values single feature vector. lightweight version TAE simplifies TAE model. defines master query head model parameter instead results linear layer, done TAE. authors argue simplification reduces number parameters, lack flexibility compensated larger number available heads.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"","code":"sits_lighttae(   samples = NULL,   samples_validation = NULL,   epochs = 150L,   batch_size = 128L,   validation_split = 0.2,   optimizer = torch::optim_adamw,   opt_hparams = list(lr = 5e-04, eps = 1e-08, weight_decay = 7e-04),   lr_decay_epochs = 50L,   lr_decay_rate = 1,   patience = 20L,   min_delta = 0.01,   seed = NULL,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"samples Time series training samples (tibble class \"sits\"). samples_validation Time series validation samples (tibble class \"sits\"). samples_validation parameter provided, validation_split ignored. epochs Number iterations train model (integer, min = 1, max = 20000). batch_size Number samples per gradient update (integer, min = 16L, max = 2048L) validation_split Fraction training data used validation data. optimizer Optimizer function used. opt_hparams Hyperparameters optimizer: lr : Learning rate optimizer eps: Term added denominator      improve numerical stability. weight_decay:       L2 regularization rate. lr_decay_epochs Number epochs reduce learning rate. lr_decay_rate Decay factor reducing learning rate. patience Number epochs without improvements training stops. min_delta Minimum improvement loss function reset patience counter. seed Seed random values. verbose Verbosity mode (TRUE/FALSE). Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"fitted model used classification data cubes.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"sits provides set default values classification models. settings chosen based testing authors. Nevertheless, users can control parameters model. Novice users can rely default values, experienced ones can fine-tune deep learning models using sits_tuning. function based paper Vivien Garnot referenced code available github https://github.com/VSainteuf/lightweight-temporal-attention-pytorch use method, please cite original TAE LTAE paper. also used code made available Maja Schneider work Marco Körner referenced available https://github.com/maja601/RC2020-psetae.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"Vivien Garnot, Loic Landrieu, Sebastien Giordano, Nesrine Chehata, \"Satellite Image Time Series Classification Pixel-Set Encoders Temporal Self-Attention\", 2020 Conference Computer Vision Pattern Recognition. pages 12322-12331. DOI: 10.1109/CVPR42600.2020.01234 Vivien Garnot, Loic Landrieu, \"Lightweight Temporal Self-Attention  Classifying Satellite Images Time Series\", arXiv preprint arXiv:2007.00586, 2020. Schneider, Maja; Körner, Marco, \"[Re] Satellite Image Time Series Classification Pixel-Set Encoders Temporal Self-Attention.\" ReScience C 7 (2), 2021. DOI: 10.5281/zenodo.4835356","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com Charlotte Pelletier, charlotte.pelletier@univ-ubs.fr","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lighttae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a model using Lightweight Temporal Self-Attention Encoder — sits_lighttae","text":"","code":"if (sits_run_examples()) {     # create a lightTAE model     torch_model <- sits_train(samples_modis_ndvi, sits_lighttae())     # plot the model     plot(torch_model)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = torch_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_list_collections.html","id":null,"dir":"Reference","previous_headings":"","what":"List the cloud collections supported by sits — sits_list_collections","title":"List the cloud collections supported by sits — sits_list_collections","text":"Prints collections available cloud service supported sits. Users can select get information single service using source parameter.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_list_collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the cloud collections supported by sits — sits_list_collections","text":"","code":"sits_list_collections(source = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_list_collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the cloud collections supported by sits — sits_list_collections","text":"source Data source shown detail.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_list_collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the cloud collections supported by sits — sits_list_collections","text":"Prints collections available         cloud service supported sits.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_list_collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the cloud collections supported by sits — sits_list_collections","text":"","code":"if (sits_run_examples()) {     # show the names of the colors supported by SITS     sits_list_collections() }"},{"path":"https://e-sensing.github.io/sits/reference/sits_lstm_fcn.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","title":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","text":"Uses branched neural network consisting  lstm (long short term memory) branch three-layer fully  convolutional branch (FCN)  followed concatenation classify time series data. function based paper Fazle Karim, Somshubra Majumdar, Houshang Darabi. use method, please cite original LSTM FCN paper. torch version based code made available titu1994. original python code available website https://github.com/titu1994/LSTM-FCN. code licensed GPL-3.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lstm_fcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","text":"","code":"sits_lstm_fcn(   samples = NULL,   samples_validation = NULL,   cnn_layers = c(128, 256, 128),   cnn_kernels = c(8, 5, 3),   cnn_dropout_rates = c(0, 0, 0),   lstm_width = 8,   lstm_dropout = 0.8,   epochs = 5,   batch_size = 64,   validation_split = 0.2,   optimizer = torch::optim_adamw,   opt_hparams = list(lr = 5e-04, eps = 1e-08, weight_decay = 1e-06),   lr_decay_epochs = 1,   lr_decay_rate = 0.95,   patience = 20,   min_delta = 0.01,   seed = NULL,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_lstm_fcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","text":"samples Time series training samples. samples_validation Time series validation samples. samples_validation parameter provided, validation_split parameter ignored. cnn_layers Number 1D convolutional filters per layer cnn_kernels Size 1D convolutional kernels. cnn_dropout_rates Dropout rates 1D convolutional filters. lstm_width Number neuros lstm's hidden layer. lstm_dropout Dropout rate lstm layer. epochs Number iterations train model. batch_size Number samples per gradient update. validation_split Fraction training data used validation. optimizer Optimizer function used. opt_hparams Hyperparameters optimizer: lr : Learning rate optimizer eps: Term added denominator      improve numerical stability. weight_decay:       L2 regularization lr_decay_epochs Number epochs reduce learning rate. lr_decay_rate Decay factor reducing learning rate. patience Number epochs without improvements training stops. min_delta Minimum improvement loss function reset patience counter. seed Seed random values. verbose Verbosity mode (TRUE/FALSE). Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lstm_fcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","text":"fitted model used classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lstm_fcn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","text":"F. Karim, S. Majumdar, H. Darabi S. Chen, \"LSTM Fully Convolutional Networks Time Series Classification,\"  IEEE Access, vol. 6, pp. 1662-1669, 2018,  doi: 10.1109/ACCESS.2017.2779939.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_lstm_fcn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train a Long Short Term Memory Fully Convolutional Network — sits_lstm_fcn","text":"Alexandre Assuncao, alexcarssuncao@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two data sets (time series or cubes) — sits_merge","title":"Merge two data sets (time series or cubes) — sits_merge","text":"merge two series, consider contain different attributes refer data cube spatiotemporal location. function useful merging different bands location. example, one may want put raw smoothed bands set locations tibble. case data cubes, function merges images based following conditions: two cubes different bands compatible timelines, bands combined, timeline adjusted overlap. create overlap, align timelines like \"zipper\": interval defined pair consecutive dates first timeline, include matching dates second timeline. second timeline multiple dates interval, minimum date kept. ensures final timeline avoids duplicates consistent. useful merging data different sensors (e.g., Sentinel-1 Sentinel-2). bands , cube combined timeline cubes. useful merging data sensors different satellites (e.g., Sentinel-2A Sentinel-2B). otherwise, function produce error.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two data sets (time series or cubes) — sits_merge","text":"","code":"sits_merge(data1, data2, ...)  # S3 method for class 'sits' sits_merge(data1, data2, ..., suffix = c(\".1\", \".2\"))  # S3 method for class 'raster_cube' sits_merge(data1, data2, ...)  # Default S3 method sits_merge(data1, data2, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two data sets (time series or cubes) — sits_merge","text":"data1 Time series (tibble class \"sits\") data cube (tibble class \"raster_cube\") . data2 Time series (tibble class \"sits\") data cube (tibble class \"raster_cube\") . ... Additional parameters suffix data1 data2 tibble duplicate bands, suffix added (character vector).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two data sets (time series or cubes) — sits_merge","text":"merged data sets (tibble class \"sits\"         tibble class \"raster_cube\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_merge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge two data sets (time series or cubes) — sits_merge","text":"Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos,   efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two data sets (time series or cubes) — sits_merge","text":"","code":"if (sits_run_examples()) {     # Retrieve a time series with values of NDVI     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")      # Filter the point using the Whittaker smoother     point_whit <- sits_filter(point_ndvi, sits_whittaker(lambda = 3.0))     # Merge time series     point_ndvi <- sits_merge(point_ndvi, point_whit, suffix = c(\"\", \".WHIT\"))      # Plot the two points to see the smoothing effect     plot(point_ndvi) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_mgrs_to_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MGRS tile information to ROI in WGS84 — sits_mgrs_to_roi","title":"Convert MGRS tile information to ROI in WGS84 — sits_mgrs_to_roi","text":"Takes list MGRS tiles produces ROI covering ","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mgrs_to_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MGRS tile information to ROI in WGS84 — sits_mgrs_to_roi","text":"","code":"sits_mgrs_to_roi(tiles)"},{"path":"https://e-sensing.github.io/sits/reference/sits_mgrs_to_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MGRS tile information to ROI in WGS84 — sits_mgrs_to_roi","text":"tiles Character vector names MGRS tiles","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mgrs_to_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MGRS tile information to ROI in WGS84 — sits_mgrs_to_roi","text":"roi                  Valid ROI use SITS functions","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mgrs_to_roi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert MGRS tile information to ROI in WGS84 — sits_mgrs_to_roi","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolf.simoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple endmember spectral mixture analysis — sits_mixture_model","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"Create multiple endmember spectral mixture analyses fractions images. use non-negative least squares (NNLS) solver calculate fractions endmember. NNLS implemented Jakob Schwalb-Willmann RStoolbox package (licensed GPL>=3).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"","code":"sits_mixture_model(data, endmembers, ...)  # S3 method for class 'sits' sits_mixture_model(   data,   endmembers,   ...,   rmse_band = TRUE,   multicores = 2L,   progress = TRUE )  # S3 method for class 'raster_cube' sits_mixture_model(   data,   endmembers,   ...,   rmse_band = TRUE,   memsize = 4L,   multicores = 2L,   output_dir,   progress = TRUE )  # S3 method for class 'derived_cube' sits_mixture_model(data, endmembers, ...)  # S3 method for class 'tbl_df' sits_mixture_model(data, endmembers, ...)  # Default S3 method sits_mixture_model(data, endmembers, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"data sits data cube sits tibble. endmembers Reference spectral endmembers. (see details ). ... Parameters specific functions. rmse_band boolean indicating whether error associated linear model generated. true, new band errors pixel generated using root mean square measure (RMSE). Default TRUE. multicores Number cores used generate mixture model. progress Show progress bar? Default TRUE. memsize Memory available mixture model (GB). output_dir Directory output images.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"case cube, sits cube fractions endmember         returned. sum fractions restricted         1 (scaled 0 10000), corresponding abundance         endmembers pixels.         case sits tibble, time series returned         values corresponding fraction.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"Many pixels images medium-resolution satellites Landsat Sentinel-2 contain mixture spectral responses different land cover types. many applications, desirable obtain proportion given class inside mixed pixel. purpose, literature proposes mixture models; models represent pixel values combination multiple pure land cover types. Assuming spectral response pure land cover classes (called endmembers) known, spectral mixture analysis derives new bands containing proportion endmember inside pixel. endmembers parameter tibble, csv shapefile. endmembers parameter must following columns: type, defines endmembers created columns corresponding bands used mixture model. band values must follow product scale. example, case sentinel-2 images bands range 0 1. See example documentation details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"RStoolbox R package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos,   efelipecarlos@gmail.com Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mixture_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple endmember spectral mixture analysis — sits_mixture_model","text":"","code":"if (sits_run_examples()) {     # Create a sentinel-2 cube     s2_cube <- sits_cube(         source = \"AWS\",         collection = \"SENTINEL-2-L2A\",         tiles = \"20LKP\",         bands = c(\"B02\", \"B03\", \"B04\", \"B8A\", \"B11\", \"B12\", \"CLOUD\"),         start_date = \"2019-06-13\",         end_date = \"2019-06-30\"     )     # create a directory to store the regularized file     reg_dir <- paste0(tempdir(), \"/mix_model\")     dir.create(reg_dir)     # Cube regularization for 16 days and 160 meters     reg_cube <- sits_regularize(         cube = s2_cube,         period = \"P16D\",         res = 160,         roi = c(             lon_min = -65.54870165,             lat_min = -10.63479162,             lon_max = -65.07629670,             lat_max = -10.36046639         ),         multicores = 2,         output_dir = reg_dir     )      # Create the endmembers tibble     em <- tibble::tribble(         ~class, ~B02, ~B03, ~B04, ~B8A, ~B11, ~B12,         \"forest\", 0.02, 0.0352, 0.0189, 0.28, 0.134, 0.0546,         \"land\", 0.04, 0.065, 0.07, 0.36, 0.35, 0.18,         \"water\", 0.07, 0.11, 0.14, 0.085, 0.004, 0.0026     )      # Generate the mixture model     mm <- sits_mixture_model(         data = reg_cube,         endmembers = em,         memsize = 4,         multicores = 2,         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"Train multi-layer perceptron models using torch — sits_mlp","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"Use multi-layer perceptron algorithm classify data. function uses R \"torch\" \"luz\" packages. Please refer documentation package details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"","code":"sits_mlp(   samples = NULL,   samples_validation = NULL,   layers = c(512L, 512L, 512L),   dropout_rates = c(0.2, 0.3, 0.4),   optimizer = torch::optim_adamw,   opt_hparams = list(lr = 0.001, eps = 1e-08, weight_decay = 1e-06),   epochs = 100L,   batch_size = 64L,   validation_split = 0.2,   patience = 20L,   min_delta = 0.01,   seed = NULL,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"samples Time series training samples. samples_validation Time series validation samples. samples_validation parameter provided, validation_split parameter ignored. layers Vector number hidden nodes layer. dropout_rates Vector dropout rates (0,1) layer. optimizer Optimizer function used. opt_hparams Hyperparameters optimizer: lr : Learning rate optimizer eps: Term added denominator      improve numerical stability.. weight_decay:       L2 regularization epochs Number iterations train model. batch_size Number samples per gradient update. validation_split Number 0 1. Fraction training data validation. model set apart fraction evaluate loss model metrics data end epoch. patience Number epochs without improvements training stops. min_delta Minimum improvement loss function reset patience counter. seed Seed random values. verbose Verbosity mode (TRUE/FALSE). Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"torch mlp model used classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"sits provides set default values classification models. settings chosen based testing authors. Nevertheless, users can control parameters model. Novice users can rely default values, experienced ones can fine-tune deep learning models using sits_tuning. default parameters MLP chosen based work Wang et al. 2017 takes multilayer perceptrons baseline time series classifications: () Three layers 512 neurons , specified parameter `layers`; (b) dropout rates 10 (c) \"optimizer_adam\" optimizer (default value); (d) number training steps (`epochs`) 100; (e) `batch_size` 64, indicates many time series used input given steps; (f) validation percentage 20 randomly set side validation. (g) \"relu\" activation function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"Zhiguang Wang, Weizhong Yan, Tim Oates, \"Time series classification scratch deep neural networks:  strong baseline\",  2017 international joint conference neural networks (IJCNN).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train multi-layer perceptron models using torch — sits_mlp","text":"","code":"if (sits_run_examples()) {     # create an MLP model     torch_model <- sits_train(         samples_modis_ndvi,         sits_mlp(epochs = 20, verbose = TRUE)     )     # plot the model     plot(torch_model)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = torch_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_model_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export classification models — sits_model_export","title":"Export classification models — sits_model_export","text":"Given trained machine learning deep learning model, exports model object exploration outside sits package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_model_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export classification models — sits_model_export","text":"","code":"sits_model_export(ml_model)  # S3 method for class 'sits_model' sits_model_export(ml_model)"},{"path":"https://e-sensing.github.io/sits/reference/sits_model_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export classification models — sits_model_export","text":"ml_model trained machine learning model","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_model_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export classification models — sits_model_export","text":"R object containing model original format machine learning deep learning package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_model_export.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export classification models — sits_model_export","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_model_export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export classification models — sits_model_export","text":"","code":"if (sits_run_examples()) {     # create a classification model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # export the model     rfor_object <- sits_model_export(rfor_model) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Mosaic classified cubes — sits_mosaic","title":"Mosaic classified cubes — sits_mosaic","text":"Creates mosaic tiles sits cube. Mosaics can created regularized ARD images classified maps. case ARD images, mosaic produce band/date combination. better first regularize data cubes use sits_mosaic.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mosaic classified cubes — sits_mosaic","text":"","code":"sits_mosaic(   cube,   crs = \"EPSG:3857\",   roi = NULL,   multicores = 2L,   output_dir,   version = \"v1\",   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mosaic classified cubes — sits_mosaic","text":"cube sits data cube. crs target coordinate reference system raster mosaic. provided crs string (e.g, \"EPSG:4326\" proj4string), EPSG code number (e.g. 4326). Default \"EPSG:3857\" - WGS 84 / Pseudo-Mercator. roi Region interest (see ). multicores Number cores used crop images parallel. output_dir Directory output images. version Version resulting image (case multiple tests) progress Show progress bar? Default TRUE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mosaic classified cubes — sits_mosaic","text":"sits cube one tile.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mosaic classified cubes — sits_mosaic","text":"define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",             \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",              \"ymin\", \"ymax\") XY coordinates. user specify CRS mosaic. use  \"EPSG:3857\" (Pseudo-Mercator) default.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mosaic classified cubes — sits_mosaic","text":"Felipe Carvalho, felipe.carvalho@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Carlos,   efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_mosaic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mosaic classified cubes — sits_mosaic","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # create roi     roi <- sf::st_sfc(         sf::st_polygon(             list(rbind(                 c(-55.64768, -11.68649),                 c(-55.69654, -11.66455),                 c(-55.62973, -11.61519),                 c(-55.64768, -11.68649)             ))         ),         crs = \"EPSG:4326\"     )     # crop and mosaic classified image     mosaic_cube <- sits_mosaic(         cube = label_cube,         roi = roi,         crs = \"EPSG:4326\",         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Find temporal patterns associated to a set of time series — sits_patterns","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"function takes set time series samples input estimates set patterns. patterns calculated using GAM model. idea use formula type y ~ s(x), x temporal reference y value signal. time, many predictions sample values. GAM model predicts suitable approximation fits assumptions statistical model, based smooth function. method based \"createPatterns\" method R dtwSat package, also described reference paper.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"","code":"sits_patterns(data = NULL, freq = 8L, formula = y ~ s(x), ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"data Time series. freq Interval days estimates. formula Formula applied estimate. ... additional parameters.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"Time series patterns.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"Maus V, Camara G, Cartaxo R, Sanchez , Ramos F, Queiroz GR. Time-Weighted Dynamic Time Warping Method Land-Use Land-Cover Mapping. IEEE Journal Selected Topics Applied Earth Observations Remote Sensing, 9(8):3729-3739, August 2016. ISSN 1939-1404. doi:10.1109/JSTARS.2016.2517118. Maus, V., Câmara, G., Appel, M., & Pebesma, E. (2019). dtwSat: Time-Weighted Dynamic Time Warping Satellite Image Time Series Analysis R. Journal Statistical Software, 88(5), 1–31. doi:10.18637/jss.v088.i05 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"Victor Maus, vwmaus1@gmail.com Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find temporal patterns associated to a set of time series — sits_patterns","text":"","code":"if (sits_run_examples()) {     patterns <- sits_patterns(cerrado_2classes)     plot(patterns) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain numerical values of predictors for time series samples — sits_pred_features","title":"Obtain numerical values of predictors for time series samples — sits_pred_features","text":"Predictors X-Y values required machine learning algorithms, organized data table row corresponds training sample. first two columns predictors table categorical (\"label_id\" \"label\"). columns values band time, organized first band time. function returns numeric values associated sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain numerical values of predictors for time series samples — sits_pred_features","text":"","code":"sits_pred_features(pred)"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain numerical values of predictors for time series samples — sits_pred_features","text":"pred X-Y predictors: data.frame one row per sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain numerical values of predictors for time series samples — sits_pred_features","text":"Y predictors sample: data.frame one row per sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_features.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain numerical values of predictors for time series samples — sits_pred_features","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain numerical values of predictors for time series samples — sits_pred_features","text":"","code":"if (sits_run_examples()) {     pred <- sits_predictors(samples_modis_ndvi)     features <- sits_pred_features(pred) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize predictor values — sits_pred_normalize","title":"Normalize predictor values — sits_pred_normalize","text":"machine learning algorithms require data normalized. applies \"SVM\" method deep learning ones. normalize predictors, required statistics per band sample obtained \"sits_stats\" function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize predictor values — sits_pred_normalize","text":"","code":"sits_pred_normalize(pred, stats)"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize predictor values — sits_pred_normalize","text":"pred X-Y predictors: data.frame one row per sample. stats Values time series Q02 Q98 data (list numeric values two elements)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize predictor values — sits_pred_normalize","text":"data.frame normalized predictor values","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_normalize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normalize predictor values — sits_pred_normalize","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize predictor values — sits_pred_normalize","text":"","code":"if (sits_run_examples()) {     stats <- sits_stats(samples_modis_ndvi)     pred <- sits_predictors(samples_modis_ndvi)     pred_norm <- sits_pred_normalize(pred, stats) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_references.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","title":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","text":"Predictors X-Y values required machine learning algorithms, organized data table row corresponds training sample. first two columns predictors table categorical (\"label_id\" \"label\"). columns values band time, organized first band time. function returns numeric values associated sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_references.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","text":"","code":"sits_pred_references(pred)"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_references.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","text":"pred X-Y predictors: data.frame one row per sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_references.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","text":"character vector labels associated training samples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_references.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_references.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain categorical id and predictor labels for time series samples — sits_pred_references","text":"","code":"if (sits_run_examples()) {     pred <- sits_predictors(samples_modis_ndvi)     ref <- sits_pred_references(pred) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a fraction of the predictors data frame — sits_pred_sample","title":"Obtain a fraction of the predictors data frame — sits_pred_sample","text":"Many machine learning algorithms (especially deep learning) use part original samples test data adjust hyperparameters find optimal point convergence using gradient descent. function extracts fraction predictors serve test values deep learning algorithm.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a fraction of the predictors data frame — sits_pred_sample","text":"","code":"sits_pred_sample(pred, frac)"},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a fraction of the predictors data frame — sits_pred_sample","text":"pred X-Y predictors: data.frame one row per sample. frac Fraction X-Y predictors extracted","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a fraction of the predictors data frame — sits_pred_sample","text":"data.frame chosen fraction X-Y predictors.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain a fraction of the predictors data frame — sits_pred_sample","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_pred_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a fraction of the predictors data frame — sits_pred_sample","text":"","code":"if (sits_run_examples()) {     pred <- sits_predictors(samples_modis_ndvi)     pred_frac <- sits_pred_sample(pred, frac = 0.5) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predictors for time series samples — sits_predictors","title":"Obtain predictors for time series samples — sits_predictors","text":"Predictors X-Y values required machine learning algorithms, organized data table row corresponds training sample. first two columns predictors table categorical (label_id label). columns values band time, organized first band time.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predictors for time series samples — sits_predictors","text":"","code":"sits_predictors(samples)"},{"path":"https://e-sensing.github.io/sits/reference/sits_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predictors for time series samples — sits_predictors","text":"samples Time series sits format (tibble class \"sits\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predictors for time series samples — sits_predictors","text":"predictors sample: data.frame one row per sample.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain predictors for time series samples — sits_predictors","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain predictors for time series samples — sits_predictors","text":"","code":"if (sits_run_examples()) {     # Include a new machine learning function (multiple linear regression)     # function that returns mlr model based on a sits sample tibble      sits_mlr <- function(samples = NULL, formula = sits_formula_linear(),                          n_weights = 20000, maxit = 2000) {         # create a training function         train_fun <- function(samples) {             # Data normalization             ml_stats <- sits_stats(samples)             train_samples <- sits_predictors(samples)             train_samples <- sits_pred_normalize(                 pred = train_samples,                 stats = ml_stats             )             formula <- formula(train_samples[, -1])             # call method and return the trained model             result_mlr <- nnet::multinom(                 formula = formula,                 data = train_samples,                 maxit = maxit,                 MaxNWts = n_weights,                 trace = FALSE,                 na.action = stats::na.fail             )              # construct model predict closure function and returns             predict_fun <- function(values) {                 # retrieve the prediction (values and probs)                 prediction <- tibble::as_tibble(                     stats::predict(result_mlr,                         newdata = values,                         type = \"probs\"                     )                 )                 return(prediction)             }             class(predict_fun) <- c(\"sits_model\", class(predict_fun))             return(predict_fun)         }         result <- sits_factory_function(samples, train_fun)         return(result)     }     # create an mlr model using a set of samples     mlr_model <- sits_train(samples_modis_ndvi, sits_mlr)     # classify a point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     point_class <- sits_classify(point_ndvi, mlr_model, multicores = 1)     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":null,"dir":"Reference","previous_headings":"","what":"Reclassify a classified cube — sits_reclassify","title":"Reclassify a classified cube — sits_reclassify","text":"Apply set named expressions reclassify classified image. expressions use character values refer labels logical expressions.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reclassify a classified cube — sits_reclassify","text":"","code":"sits_reclassify(cube, ...)  # S3 method for class 'class_cube' sits_reclassify(   cube,   ...,   mask,   rules,   memsize = 4L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = TRUE )  # Default S3 method sits_reclassify(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reclassify a classified cube — sits_reclassify","text":"cube Image cube reclassified (class = \"class_cube\") ... parameters specific functions. mask Image cube additional information used expressions (class = \"class_cube\"). rules Expressions evaluated (named list). memsize Memory available classification GB (integer, min = 1, max = 16384). multicores Number cores used classification (integer, min = 1, max = 2048). output_dir Directory files saved (character vector length 1 valid location). version Version resulting image (character). progress Set progress bar??","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reclassify a classified cube — sits_reclassify","text":"object class \"class_cube\" (reclassified cube).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reclassify a classified cube — sits_reclassify","text":"Reclassification remote sensing map refers changing classes assigned different pixels image. Reclassification involves assigning new classes pixels based additional information reference map. Users define rules according desired outcome. rules applied classified map produce new map updated classes. sits_reclassify() allow valid R expression compute reclassification. User refer cube mask construct logical expressions. Users can use can use R expression evaluates logical. TRUE values relabeled expression name. Updates done asynchronous manner, , expressions evaluated using original classified values. Expressions evaluated sequentially resulting values assigned output cube. Last expressions precedence first ones.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reclassify a classified cube — sits_reclassify","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reclassify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reclassify a classified cube — sits_reclassify","text":"","code":"if (sits_run_examples()) {     # Open mask map     data_dir <- system.file(\"extdata/raster/prodes\", package = \"sits\")     prodes2021 <- sits_cube(         source = \"USGS\",         collection = \"LANDSAT-C2L2-SR\",         data_dir = data_dir,         parse_info = c(             \"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\",             \"band\", \"version\"         ),         bands = \"class\",         version = \"v20220606\",         labels = c(             \"1\" = \"Forest\", \"2\" = \"Water\", \"3\" = \"NonForest\",             \"4\" = \"NonForest2\", \"6\" = \"d2007\", \"7\" = \"d2008\",             \"8\" = \"d2009\", \"9\" = \"d2010\", \"10\" = \"d2011\",             \"11\" = \"d2012\", \"12\" = \"d2013\", \"13\" = \"d2014\",             \"14\" = \"d2015\", \"15\" = \"d2016\", \"16\" = \"d2017\",             \"17\" = \"d2018\", \"18\" = \"r2010\", \"19\" = \"r2011\",             \"20\" = \"r2012\", \"21\" = \"r2013\", \"22\" = \"r2014\",             \"23\" = \"r2015\", \"24\" = \"r2016\", \"25\" = \"r2017\",             \"26\" = \"r2018\", \"27\" = \"d2019\", \"28\" = \"r2019\",             \"29\" = \"d2020\", \"31\" = \"r2020\", \"32\" = \"Clouds2021\",             \"33\" = \"d2021\", \"34\" = \"r2021\"         ),         progress = FALSE     )     #' Open classification map     data_dir <- system.file(\"extdata/raster/classif\", package = \"sits\")     ro_class <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-2-L2A\",         data_dir = data_dir,         parse_info = c(             \"X1\", \"X2\", \"tile\", \"start_date\", \"end_date\",             \"band\", \"version\"         ),         bands = \"class\",         labels = c(             \"1\" = \"ClearCut_Fire\", \"2\" = \"ClearCut_Soil\",             \"3\" = \"ClearCut_Veg\", \"4\" = \"Forest\"         ),         progress = FALSE     )     # Reclassify cube     ro_mask <- sits_reclassify(         cube = ro_class,         mask = prodes2021,         rules = list(             \"Old_Deforestation\" = mask %in% c(                 \"d2007\", \"d2008\", \"d2009\",                 \"d2010\", \"d2011\", \"d2012\",                 \"d2013\", \"d2014\", \"d2015\",                 \"d2016\", \"d2017\", \"d2018\",                 \"r2010\", \"r2011\", \"r2012\",                 \"r2013\", \"r2014\", \"r2015\",                 \"r2016\", \"r2017\", \"r2018\",                 \"d2019\", \"r2019\", \"d2020\",                 \"r2020\", \"r2021\"             ),             \"Water_Mask\" = mask == \"Water\",             \"NonForest_Mask\" = mask %in% c(\"NonForest\", \"NonForest2\")         ),         memsize = 4,         multicores = 2,         output_dir = tempdir(),         version = \"ex_reclassify\"     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduces a cube or samples from a summarization function — sits_reduce","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"Apply temporal reduction named expression cube sits tibble. case cubes, materializes new band output_dir. result cube one date raster reduced function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"","code":"sits_reduce(data, ...)  # S3 method for class 'sits' sits_reduce(data, ...)  # S3 method for class 'raster_cube' sits_reduce(   data,   ...,   impute_fn = impute_linear(),   memsize = 4L,   multicores = 2L,   output_dir,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"data Valid sits tibble cube ... Named expressions evaluated (see details). impute_fn Imputation function remove NA values. memsize Memory available classification (GB). multicores Number cores used classification. output_dir Directory files saved. progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"sits tibble sits cube new bands, produced         according requested expression.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"sits_reduce() allows valid R expression compute new bands. Use R syntax pass expression function. Besides arithmetic operators, can use virtually R function can applied elements matrix. provided functions must operate line level order perform temporal reduction pixel. sits_reduce() Applies function row matrix. matrix, row represents pixel column represents single date. provide operations already implemented package perform reduce operation. See list available functions :","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"t_sum(), t_std(), t_skewness(),  t_kurtosis, t_mse indexes generate values greater  limit two-byte integer. Therefore, save images  generated Float-32 scale.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"summarizing-temporal-functions","dir":"Reference","previous_headings":"","what":"Summarizing temporal functions","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"t_max(): Returns maximum value series. t_min(): Returns minimum value series t_mean(): Returns mean series. t_median(): Returns median series. t_std(): Returns standard deviation series. t_skewness(): Returns skewness series. t_kurtosis(): Returns kurtosis series. t_amplitude(): Returns difference maximum  minimum values cycle. small amplitude means stable cycle. t_fslope(): Returns maximum value first slope  cycle. Indicates cycle presents abrupt change  curve. slope two values relates speed growth  senescence phases t_mse(): Returns average spectral energy density.  energy time series distributed frequency. t_fqr(): Returns value first quartile  series (0.25). t_tqr(): Returns value third quartile  series (0.75). t_iqr(): Returns interquartile range  (difference third first quartiles).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"Felipe Carvalho, felipe.carvalho@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduces a cube or samples from a summarization function — sits_reduce","text":"","code":"if (sits_run_examples()) {     # Reduce summarization function      point2 <-         sits_select(point_mt_6bands, \"NDVI\") |>         sits_reduce(NDVI_MEDIAN = t_median(NDVI))      # Example of generation mean summarization from a cube     # Create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )      # Reduce NDVI band with mean function     cube_mean <- sits_reduce(         data = cube,         NDVIMEAN = t_mean(NDVI),         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce imbalance in a set of samples — sits_reduce_imbalance","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"Takes sits tibble different labels returns new tibble. Deals class imbalance using synthetic minority oversampling technique (SMOTE) oversampling. Undersampling done using SOM methods available sits package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"","code":"sits_reduce_imbalance(   samples,   n_samples_over = 200L,   n_samples_under = 400L,   method = \"smote\",   multicores = 2L )"},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"samples Sample set rebalance n_samples_over Number samples oversample classes samples less number. n_samples_under Number samples undersample classes samples number. method Method oversampling (default = \"smote\") multicores Number cores process data (default 2).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"sits tibble reduced sample imbalance.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"Many training samples Earth observation data analysis imbalanced. situation arises distribution samples associated label uneven. Sample imbalance undesirable property training set. Reducing sample imbalance improves classification accuracy. function sits_reduce_imbalance increases number samples least frequent labels, reduces number samples frequent labels. generate new samples, sits uses SMOTE method estimates new samples considering cluster formed nearest neighbors minority label. perform undersampling, sits_reduce_imbalance) builds SOM map majority label based required number samples. dimension SOM set ceiling(sqrt(new_number_samples/4)) allow reasonable number neurons group similar samples. calculating SOM map, algorithm extracts four samples per neuron generate reduced set samples approximates variation original one. See also sits_som_map.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"reference paper SMOTE N. V. Chawla, K. W. Bowyer, L. O.Hall, W. P. Kegelmeyer, “SMOTE: synthetic minority -sampling technique,” Journal artificial intelligence research, 321-357, 2002. SOM map technique time series described paper: Lorena Santos, Karine Ferreira, Gilberto Camara, Michelle Picoli, Rolf Simoes, “Quality control class noise reduction satellite image time series”. ISPRS Journal Photogrammetry Remote Sensing, vol. 177, pp 75-88, 2021. doi:10.1016/j.isprsjprs.2021.04.014 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_reduce_imbalance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce imbalance in a set of samples — sits_reduce_imbalance","text":"","code":"if (sits_run_examples()) {     # print the labels summary for a sample set     summary(samples_modis_ndvi)     # reduce the sample imbalance     new_samples <- sits_reduce_imbalance(samples_modis_ndvi,         n_samples_over = 200,         n_samples_under = 200,         multicores = 1     )     # print the labels summary for the rebalanced set     summary(new_samples) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a regular data cube from an irregular one — sits_regularize","title":"Build a regular data cube from an irregular one — sits_regularize","text":"Produces regular data cubes analysis-ready data (ARD) image collections. Analysis-ready data (ARD) collections available AWS, MPC, USGS DEAfrica regular space time. Bands may different resolutions, images may cover entire time, time intervals regular. reason, subsets collection need converted regular data cubes processing data analysis. function requires users include cloud band ARD-based data cubes. function uses gdalcubes package.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a regular data cube from an irregular one — sits_regularize","text":"","code":"sits_regularize(cube, ...)  # S3 method for class 'raster_cube' sits_regularize(   cube,   ...,   period,   res,   output_dir,   timeline = NULL,   roi = NULL,   crs = NULL,   tiles = NULL,   grid_system = NULL,   multicores = 2L,   progress = TRUE )  # S3 method for class 'sar_cube' sits_regularize(   cube,   ...,   period,   res,   output_dir,   timeline = NULL,   grid_system = \"MGRS\",   roi = NULL,   crs = NULL,   tiles = NULL,   multicores = 2L,   progress = TRUE )  # S3 method for class 'combined_cube' sits_regularize(   cube,   ...,   period,   res,   output_dir,   grid_system = NULL,   roi = NULL,   crs = NULL,   tiles = NULL,   multicores = 2L,   progress = TRUE )  # S3 method for class 'rainfall_cube' sits_regularize(   cube,   ...,   period,   res,   output_dir,   timeline = NULL,   grid_system = \"MGRS\",   roi = NULL,   crs = NULL,   tiles = NULL,   multicores = 2L,   progress = TRUE )  # S3 method for class 'dem_cube' sits_regularize(   cube,   ...,   res,   output_dir,   grid_system = \"MGRS\",   roi = NULL,   crs = NULL,   tiles = NULL,   multicores = 2L,   progress = TRUE )  # S3 method for class 'ogh_cube' sits_regularize(   cube,   ...,   period,   res,   output_dir,   timeline = NULL,   grid_system = \"MGRS\",   roi = NULL,   crs = NULL,   tiles = NULL,   multicores = 2L,   progress = TRUE )  # S3 method for class 'derived_cube' sits_regularize(cube, ...)  # Default S3 method sits_regularize(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a regular data cube from an irregular one — sits_regularize","text":"cube raster_cube object whose observation period /spatial resolution constant. ... Additional parameters. period ISO8601-compliant time period regular data cubes, number unit, \"D\", \"M\" \"Y\" stand days, month year;  e.g., \"P16D\" 16 days. res Spatial resolution regularized images (meters). output_dir Valid directory storing regularized images. timeline User-defined timeline regularized cube. roi Region interest (see notes ). crs Coordinate Reference System (CRS) roi. (see details ). tiles Tiles produced. grid_system Grid system used output images. multicores Number cores used regularization; used parallel processing input (integer) progress show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a regular data cube from an irregular one — sits_regularize","text":"raster_cube object aggregated images.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build a regular data cube from an irregular one — sits_regularize","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. regularization operation converts subsets image collections      available cloud providers regular data cubes. essential      part sits workflow.      input sits_regularize ARD cube      includes cloud band. aggregation method used      sits_regularize sorts images based cloud cover,      putting images least clouds top stack.      stack images sorted, method uses first valid value      create temporal aggregation. \"period\" parameter mandatory, defines time interval      two images regularized cube. combining      Sentinel-1A Sentinel-1B images, experiments show      16-day period (\"P16D\") good default. Landsat images require      longer period one three months. default, date first image input cube      taken starting      date regular cube. many situations, users may want      pre-define required times using \"timeline\" parameter.      \"timeline\" parameter, used, must contain set      dates compatible input cube. define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",             \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",              \"ymin\", \"ymax\") XY coordinates. Defining region interest using SpatExtent XY values      WGS84 requires crs parameter specified.      sits_regularize() function crop images      contain region interest(). optional tiles parameter indicates tiles      input cube used regularization. grid_system parameter allows user      reproject files grid system      different used ARD image collection      provider. Currently, package supports      use MGRS grid system used Brazil      Data Cube (\"BDC_LG_V2\" \"BDC_MD_V2\" \"BDC_SM_V2\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build a regular data cube from an irregular one — sits_regularize","text":"Appel, Marius; Pebesma, Edzer. -demand processing data cubes  satellite image collections gdalcubes library. Data, v. 4,  n. 3, p. 92, 2019. doi:10.3390/data4030092 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build a regular data cube from an irregular one — sits_regularize","text":"Felipe Carvalho, felipe.carvalho@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_regularize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a regular data cube from an irregular one — sits_regularize","text":"","code":"if (sits_run_examples()) {     # define a non-regular Sentinel-2 cube in AWS     s2_cube_open <- sits_cube(         source = \"AWS\",         collection = \"SENTINEL-2-L2A\",         tiles = c(\"20LKP\", \"20LLP\"),         bands = c(\"B8A\", \"CLOUD\"),         start_date = \"2018-10-01\",         end_date = \"2018-11-01\"     )     # regularize the cube     rg_cube <- sits_regularize(         cube = s2_cube_open,         period = \"P16D\",         res = 60,         multicores = 2,         output_dir = tempdir()     )      ## Sentinel-1 SAR     roi <- c(         \"lon_min\" = -50.410, \"lon_max\" = -50.379,         \"lat_min\" = -10.1910, \"lat_max\" = -10.1573     )     s1_cube_open <- sits_cube(         source = \"MPC\",         collection = \"SENTINEL-1-GRD\",         bands = c(\"VV\", \"VH\"),         orbit = \"descending\",         roi = roi,         start_date = \"2020-06-01\",         end_date = \"2020-09-28\"     )     # regularize the cube     rg_cube <- sits_regularize(         cube = s1_cube_open,         period = \"P12D\",         res = 60,         roi = roi,         multicores = 2,         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Train ResNet classification models — sits_resnet","title":"Train ResNet classification models — sits_resnet","text":"Use ResNet architecture classifying image time series. ResNet (deep residual network) proposed team Microsoft Research 2D image classification. ResNet tries address degradation accuracy deep network. idea replace deep network combination shallow ones. paper Fawaz et al. (2019), ResNet considered best method time series classification, using UCR dataset. Please refer paper details. R-torch version based code made available Zhiguang Wang, author original paper. code developed python using keras. https://github.com/cauchyturing (repo: UCR_Time_Series_Classification_Deep_Learning_Baseline) R-torch version also considered code Ignacio Oguiza, whose implementation available https://github.com/timeseriesAI/tsai/blob/main/tsai/models/ResNet.py. differences Wang's Keras code Oguiza torch code. case, used Wang's keras code main reference.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train ResNet classification models — sits_resnet","text":"","code":"sits_resnet(   samples = NULL,   samples_validation = NULL,   blocks = c(64, 128, 128),   kernels = c(7, 5, 3),   epochs = 100,   batch_size = 64,   validation_split = 0.2,   optimizer = torch::optim_adamw,   opt_hparams = list(lr = 0.001, eps = 1e-08, weight_decay = 1e-06),   lr_decay_epochs = 1,   lr_decay_rate = 0.95,   patience = 20,   min_delta = 0.01,   seed = NULL,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train ResNet classification models — sits_resnet","text":"samples Time series training samples. samples_validation Time series validation samples.  parameter provided, validation_split ignored. blocks Number 1D convolutional filters block three layers. kernels Size 1D convolutional kernels epochs Number iterations train model. layer block. batch_size Number samples per gradient update. validation_split Fraction training data used validation data. optimizer Optimizer function used. opt_hparams Hyperparameters optimizer: lr : Learning rate optimizer eps: Term added denominator      improve numerical stability. weight_decay:       L2 regularization lr_decay_epochs Number epochs reduce learning rate. lr_decay_rate Decay factor reducing learning rate. patience Number epochs without improvements training stops. min_delta Minimum improvement loss function reset patience counter. seed Seed random values. verbose Verbosity mode (TRUE/FALSE). Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train ResNet classification models — sits_resnet","text":"fitted model used classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train ResNet classification models — sits_resnet","text":"Hassan Fawaz, Germain Forestier, Jonathan Weber, Lhassane Idoumghar,  Pierre-Alain Muller, \"Deep learning time series classification: review\", Data Mining Knowledge Discovery, 33(4): 917–963, 2019. Zhiguang Wang, Weizhong Yan, Tim Oates, \"Time series classification scratch deep neural networks:  strong baseline\",  2017 International Joint conference Neural Networks (IJCNN).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train ResNet classification models — sits_resnet","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolf.simoes@inpe.br Felipe Souza, lipecaso@gmail.com Felipe Carlos, efelipecarlos@gmail.com Charlotte Pelletier, charlotte.pelletier@univ-ubs.fr Daniel Falbel, dfalbel@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_resnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train ResNet classification models — sits_resnet","text":"","code":"if (sits_run_examples()) {     # create a ResNet model     torch_model <- sits_train(samples_modis_ndvi, sits_resnet())     # plot the model     plot(torch_model)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = torch_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube, output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_rfor.html","id":null,"dir":"Reference","previous_headings":"","what":"Train random forest models — sits_rfor","title":"Train random forest models — sits_rfor","text":"Use Random Forest algorithm classify samples. function front-end randomForest package. Please refer documentation package details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_rfor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train random forest models — sits_rfor","text":"","code":"sits_rfor(samples = NULL, num_trees = 100L, mtry = NULL, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_rfor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train random forest models — sits_rfor","text":"samples Time series training samples (tibble class \"sits\"). num_trees Number trees grow. set small number, ensure every input row gets predicted least times (default: 100) (integer, min = 50, max = 150). mtry Number variables randomly sampled candidates split (default: NULL - use default value randomForest::randomForest() function, .e. floor(sqrt(features))). ... parameters passed `randomForest::randomForest` function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_rfor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train random forest models — sits_rfor","text":"Model fitted input data                   (passed sits_classify).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_rfor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train random forest models — sits_rfor","text":"Alexandre Ywata de Carvalho, alexandre.ywata@ipea.gov.br Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_rfor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train random forest models — sits_rfor","text":"","code":"if (sits_run_examples()) {     # Example of training a model for time series classification     # Retrieve the samples for Mato Grosso     # train a random forest model     rf_model <- sits_train(samples_modis_ndvi,         ml_method = sits_rfor     )     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # classify the point     point_class <- sits_classify(         data = point_ndvi, ml_model = rf_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"Takes ROI produces list MGRS tiles intersecting ","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"","code":"sits_roi_to_mgrs(roi)"},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"roi Valid ROI use SITS functions","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"tiles                Character vector names MGRS tiles","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",             \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",              \"ymin\", \"ymax\") XY coordinates. Defining region interest using SpatExtent XY values      WGS84 requires crs parameter specified.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos, efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_mgrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Given a ROI, find MGRS tiles intersecting it. — sits_roi_to_mgrs","text":"","code":"if (sits_run_examples()) { # Defining a ROI roi <- c(   lon_min = -64.037,   lat_min = -9.644,   lon_max = -63.886,   lat_max = -9.389 ) # Finding tiles tiles <- sits_roi_to_mgrs(roi) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"Given ROI grid system, function finds intersected tiles returns SF object.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"","code":"sits_roi_to_tiles(roi, crs = NULL, grid_system = \"MGRS\")"},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"roi Region interest (see notes ). crs Coordinate Reference System (CRS) roi. (see details ). grid_system Grid system used output images. (Default \"MGRS\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"sf object intersect tiles three columns tile_id, epsg, percentage coverage area.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"define roi use one : path shapefile polygons; sfc sf object sf package; SpatExtent object terra package; named vector (\"lon_min\",             \"lat_min\", \"lon_max\", \"lat_max\") WGS84; named vector (\"xmin\", \"xmax\",              \"ymin\", \"ymax\") XY coordinates. Defining region interest using SpatExtent XY values      WGS84 requires crs parameter specified. grid_system parameter allows user      reproject files grid system      different used ARD image collection      provider. Currently, package supports      use MGRS grid system used Brazil      Data Cube (\"BDC_LG_V2\" \"BDC_MD_V2\" \"BDC_SM_V2\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos, efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_roi_to_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find tiles of a given ROI and Grid System — sits_roi_to_tiles","text":"","code":"if (sits_run_examples()) { # Defining a ROI roi <- c(   lon_min = -64.037,   lat_min = -9.644,   lon_max = -63.886,   lat_max = -9.389 ) # Finding tiles tiles <- sits_roi_to_tiles(roi, grid_system = \"MGRS\") }"},{"path":"https://e-sensing.github.io/sits/reference/sits_run_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Informs if sits examples should run — sits_run_examples","title":"Informs if sits examples should run — sits_run_examples","text":"function informs sits examples run. run examples, set \"SITS_RUN_EXAMPLES\" \"YES\" using Sys.setenv(\"SITS_RUN_EXAMPLES\" = \"YES\") come back default behaviour, please set Sys.setenv(\"SITS_RUN_EXAMPLES\" = \"\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_run_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Informs if sits examples should run — sits_run_examples","text":"","code":"sits_run_examples()"},{"path":"https://e-sensing.github.io/sits/reference/sits_run_examples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Informs if sits examples should run — sits_run_examples","text":"logical value","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_run_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Informs if sits tests should run — sits_run_tests","title":"Informs if sits tests should run — sits_run_tests","text":"run tests, set \"SITS_RUN_TESTS\" environment \"YES\" using Sys.setenv(\"SITS_RUN_TESTS\" = \"YES\") come back default behaviour, please set Sys.setenv(\"SITS_RUN_TESTS\" = \"\")","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_run_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Informs if sits tests should run — sits_run_tests","text":"","code":"sits_run_tests()"},{"path":"https://e-sensing.github.io/sits/reference/sits_run_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Informs if sits tests should run — sits_run_tests","text":"TRUE/FALSE","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a percentage of a time series — sits_sample","title":"Sample a percentage of a time series — sits_sample","text":"Takes sits tibble different labels              returns new tibble. given field group criterion,              new tibble contains percentage              total number samples per group.              frac > 1 , sampling done replacement.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a percentage of a time series — sits_sample","text":"","code":"sits_sample(data, frac = 0.2, oversample = TRUE)"},{"path":"https://e-sensing.github.io/sits/reference/sits_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a percentage of a time series — sits_sample","text":"data Sits time series tibble frac Percentage samples extract (range: 0.0 2.0, default = 0.2) oversample Logical: oversample classes small number samples? (TRUE/FALSE)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a percentage of a time series — sits_sample","text":"sits tibble fixed quantity samples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample a percentage of a time series — sits_sample","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a percentage of a time series — sits_sample","text":"","code":"# Retrieve a set of time series with 2 classes data(cerrado_2classes) # Print the labels of the resulting tibble summary(cerrado_2classes) #> # A tibble: 2 × 3 #>   label   count  prop #>   <chr>   <int> <dbl> #> 1 Cerrado   400 0.536 #> 2 Pasture   346 0.464 # Sample by fraction data_02 <- sits_sample(cerrado_2classes, frac = 0.2) # Print the labels summary(data_02) #> # A tibble: 2 × 3 #>   label   count  prop #>   <chr>   <int> <dbl> #> 1 Cerrado    80 0.537 #> 2 Pasture    69 0.463"},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocation of sample size to strata — sits_sampling_design","title":"Allocation of sample size to strata — sits_sampling_design","text":"Takes class cube different labels allocates number sample sizes per strata obtain suitable values error-adjusted area, providing five allocation strategies.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocation of sample size to strata — sits_sampling_design","text":"","code":"sits_sampling_design(   cube,   expected_ua = 0.75,   alloc_options = c(100L, 75L, 50L),   std_err = 0.01,   rare_class_prop = 0.1 )"},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocation of sample size to strata — sits_sampling_design","text":"cube Classified cube expected_ua Expected values user's accuracy alloc_options Fixed sample allocation rare classes std_err Standard error like achieve rare_class_prop Proportional area limit rare classes","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocation of sample size to strata — sits_sampling_design","text":"matrix options decide allocation sample size class. matrix uses format Table 5 Olofsson et al.(2014).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Allocation of sample size to strata — sits_sampling_design","text":"[1] Olofsson, P., Foody, G.M., Stehman, S.V., Woodcock, C.E. (2013). Making better use accuracy data land change studies: Estimating accuracy area quantifying uncertainty using stratified estimation. Remote Sensing Environment, 129, pp.122-131. [2] Olofsson, P., Foody G.M., Herold M., Stehman, S.V., Woodcock, C.E., Wulder, M.. (2014) Good practices estimating area assessing accuracy land change. Remote Sensing Environment, 148, pp. 42-57.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allocation of sample size to strata — sits_sampling_design","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sampling_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocation of sample size to strata — sits_sampling_design","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     # estimated UA for classes     expected_ua <- c(         Cerrado = 0.75, Forest = 0.9,         Pasture = 0.8, Soy_Corn = 0.8     )     sampling_design <- sits_sampling_design(label_cube, expected_ua) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment an image — sits_segment","title":"Segment an image — sits_segment","text":"Apply spatial-temporal segmentation data cube based user defined segmentation function. function applies segmentation algorithm \"seg_fn\" tile. output vector data cube, data cube additional vector file \"geopackage\" format.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment an image — sits_segment","text":"","code":"sits_segment(   cube,   seg_fn = sits_slic(),   roi = NULL,   impute_fn = impute_linear(),   start_date = NULL,   end_date = NULL,   memsize = 4L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment an image — sits_segment","text":"cube Regular data cube seg_fn Function apply segmentation roi Region interest (see ) impute_fn Imputation function remove NA values. start_date Start date segmentation end_date End date segmentation. memsize Memory available classification (GB). multicores Number cores used classification. output_dir Directory output file. version Version output (multiple segmentations). progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment an image — sits_segment","text":"tibble class 'segs_cube' representing segmentation.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Segment an image — sits_segment","text":"Segmentation requires following steps: Create regular data cube sits_cube        sits_regularize; Run sits_segment obtain vector data cube        polygons define boundary segments; Classify time series associated segments        sits_classify, get obtain        vector probability cube; Use sits_label_classification label      vector probability cube; Display results plot        sits_view. \"roi\" parameter defines region interest. can    sf_object, shapefile, bounding box vector    named XY values (\"xmin\", \"xmax\", \"ymin\", \"ymax\")    named lat/long values (\"lon_min\", \"lat_min\", \"lon_max\", \"lat_max\"). version 1.5.3, seg_fn function available    sits_slic, uses Simple Linear    Iterative Clustering (SLIC) algorithm clusters pixels    generate compact, nearly uniform superpixels. algorithm    adapted Nowosad Stepinski work multispectral    multitemporal images. SLIC uses spectral similarity    proximity spectral temporal space    segment image superpixels. Superpixels clusters pixels    similar spectral temporal responses spatially close. result sits_segment data cube tibble additional    vector file geopackage format. location vector    file included data cube tibble new column, called    vector_info.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Segment an image — sits_segment","text":"Achanta, Radhakrishna, Appu Shaji, Kevin Smith, Aurelien Lucchi,         Pascal Fua, Sabine Süsstrunk. 2012. “SLIC Superpixels Compared         State---Art Superpixel Methods.” IEEE Transactions         Pattern Analysis Machine Intelligence 34 (11): 2274–82. Nowosad, Jakub, Tomasz F. Stepinski. 2022. “Extended SLIC         Superpixels Algorithm Applications Non-Imagery Geospatial         Rasters.” International Journal Applied Earth Observation         Geoinformation 112 (August): 102935.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Segment an image — sits_segment","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos, efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment an image — sits_segment","text":"","code":"if (sits_run_examples()) {     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     # create a data cube     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # segment the vector cube     segments <- sits_segment(         cube = cube,         seg_fn = sits_slic(             step = 10,             compactness = 1,             dist_fun = \"euclidean\",             avg_fun = \"median\",             iter = 30,             minarea = 10         ),         output_dir = tempdir()     )     # create a classification model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify the segments     seg_probs <- sits_classify(         data = segments,         ml_model = rfor_model,         output_dir = tempdir()     )     # label the probability segments     seg_label <- sits_label_classification(         cube = seg_probs,         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","title":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","text":"Filter bands, tiles, dates labels set  time series data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","text":"","code":"sits_select(data, ...)  # S3 method for class 'sits' sits_select(   data,   ...,   bands = NULL,   start_date = NULL,   end_date = NULL,   dates = NULL,   labels = NULL )  # S3 method for class 'raster_cube' sits_select(   data,   ...,   bands = NULL,   start_date = NULL,   end_date = NULL,   dates = NULL,   tiles = NULL )  # Default S3 method sits_select(data, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","text":"data Tibble time series data cube. ... Additional parameters provided bands Character vector names bands. start_date Date YYYY-MM-DD format: start date filtered. end_date Date YYYY-MM-DD format: end date filtered. dates Character vector sparse dates selected. labels Character vector sparse labels selected (applied sits tibble data). tiles Character vector names tiles.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","text":"Tibble time series data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","text":"Rolf Simoes, rolfsimoes@gmail.com Felipe Carlos, efelipecarlos@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a data set (tibble or cube) for bands, tiles, and dates — sits_select","text":"","code":"# Retrieve a set of time series with 2 classes data(cerrado_2classes) # Print the original bands sits_bands(cerrado_2classes) #> [1] \"NDVI\" \"EVI\"  # Select only the NDVI band data <- sits_select(cerrado_2classes, bands = c(\"NDVI\")) # Print the labels of the resulting tibble sits_bands(data) #> [1] \"NDVI\" # select start and end date point_2010 <- sits_select(point_mt_6bands,     start_date = \"2000-09-13\",     end_date = \"2017-08-29\" )"},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter time series with Savitzky-Golay filter — sits_sgolay","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":"optimal polynomial warping time series. degree smoothing depends filter order (usually 3.0). order polynomial uses parameter `order` (default = 3), size temporal window uses parameter `length` (default = 5).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":"","code":"sits_sgolay(data = NULL, order = 3L, length = 5L)"},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":"data Time series matrix. order Filter order (integer). length Filter length (must odd).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":"Filtered time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":". Savitzky, M. Golay, \"Smoothing Differentiation Data Simplified Least Squares Procedures\". Analytical Chemistry, 36 (8): 1627–39, 1964.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_sgolay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter time series with Savitzky-Golay filter — sits_sgolay","text":"","code":"if (sits_run_examples()) {     # Retrieve a time series with values of NDVI     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")      # Filter the point using the Savitzky-Golay smoother     point_sg <- sits_filter(point_ndvi,         filter = sits_sgolay(order = 3, length = 5)     )     # Merge time series     point_ndvi <- sits_merge(point_ndvi, point_sg, suffix = c(\"\", \".SG\"))      # Plot the two points to see the smoothing effect     plot(point_ndvi) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_show_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Shows the predicted labels for a classified tibble — sits_show_prediction","title":"Shows the predicted labels for a classified tibble — sits_show_prediction","text":"function takes tibble classified time series machine learning method displays result.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_show_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows the predicted labels for a classified tibble — sits_show_prediction","text":"","code":"sits_show_prediction(class)"},{"path":"https://e-sensing.github.io/sits/reference/sits_show_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows the predicted labels for a classified tibble — sits_show_prediction","text":"class SITS tibble classified.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_show_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shows the predicted labels for a classified tibble — sits_show_prediction","text":"Tibble columns \"\", \"\", \"class\"","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_show_prediction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shows the predicted labels for a classified tibble — sits_show_prediction","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_show_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shows the predicted labels for a classified tibble — sits_show_prediction","text":"","code":"if (sits_run_examples()) {     # Retrieve the samples for Mato Grosso     # train an SVM model     ml_model <- sits_train(samples_modis_ndvi, ml_method = sits_svm)     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     point_class <- sits_classify(         data = point_ndvi, ml_model = ml_model     )     sits_show_prediction(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment an image using SLIC — sits_slic","title":"Segment an image using SLIC — sits_slic","text":"Apply segmentation data cube based supercells package. adaptation extension remote sensing data SLIC superpixels algorithm proposed Achanta et al. (2012). See references details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment an image using SLIC — sits_slic","text":"","code":"sits_slic(   data = NULL,   step = 30L,   compactness = 1,   dist_fun = \"euclidean\",   avg_fun = \"median\",   iter = 30L,   minarea = 10L,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment an image using SLIC — sits_slic","text":"data matrix time series. step Distance (number cells) initial supercells' centers. compactness compactness value. Larger values cause clusters compact/even (square). dist_fun Distance function. Currently implemented: euclidean, jsd, dtw, distance function philentropy package. See philentropy::getDistMethods(). avg_fun Averaging function calculate values supercells' centers. Accepts fitting R function (e.g., base::mean() stats::median()) one internally implemented \"mean\" \"median\". Default: \"median\" iter Number iterations create output. minarea Specifies minimal size supercell (cells). verbose Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment an image using SLIC — sits_slic","text":"Set segments single tile","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Segment an image using SLIC — sits_slic","text":"Achanta, Radhakrishna, Appu Shaji, Kevin Smith, Aurelien Lucchi,         Pascal Fua, Sabine Süsstrunk. 2012. “SLIC Superpixels Compared         State---Art Superpixel Methods.” IEEE Transactions         Pattern Analysis Machine Intelligence 34 (11): 2274–82. Nowosad, Jakub, Tomasz F. Stepinski. 2022. “Extended SLIC         Superpixels Algorithm Applications Non-Imagery Geospatial         Rasters.” International Journal Applied Earth Observation         Geoinformation 112 (August): 102935.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Segment an image using SLIC — sits_slic","text":"Rolf Simoes, rolfsimoes@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos, efelipecarlos@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_slic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment an image using SLIC — sits_slic","text":"","code":"if (sits_run_examples()) {     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     # create a data cube     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # segment the vector cube     segments <- sits_segment(         cube = cube,         seg_fn = sits_slic(             step = 10,             compactness = 1,             dist_fun = \"euclidean\",             avg_fun = \"median\",             iter = 30,             minarea = 10         ),         output_dir = tempdir(),         version = \"slic-demo\"     )     # create a classification model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify the segments     seg_probs <- sits_classify(         data = segments,         ml_model = rfor_model,         output_dir = tempdir(),         version = \"slic-demo\"     )     # label the probability segments     seg_label <- sits_label_classification(         cube = seg_probs,         output_dir = tempdir(),         version = \"slic-demo\"     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth probability cubes with spatial predictors — sits_smooth","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"Takes set classified raster layers probabilities,              whose metadata created sits_cube,              applies Bayesian smoothing function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"","code":"sits_smooth(cube, ...)  # S3 method for class 'probs_cube' sits_smooth(   cube,   ...,   window_size = 9L,   neigh_fraction = 0.5,   smoothness = 20,   exclusion_mask = NULL,   memsize = 4L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = TRUE )  # S3 method for class 'probs_vector_cube' sits_smooth(cube, ...)  # S3 method for class 'raster_cube' sits_smooth(cube, ...)  # S3 method for class 'derived_cube' sits_smooth(cube, ...)  # Default S3 method sits_smooth(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"cube Probability data cube. ... parameters specific functions. window_size Size neighborhood (integer, min = 3, max = 21) neigh_fraction Fraction neighbors high probabilities used Bayesian inference. (numeric, min = 0.1, max = 1.0) smoothness Estimated variance logit class probabilities (Bayesian smoothing parameter) (integer vector scalar, min = 1, max = 200). exclusion_mask Areas excluded classification process. can defined sf object shapefile. memsize Memory available classification GB (integer, min = 1, max = 16384). multicores Number cores used classification (integer, min = 1, max = 2048). output_dir Valid directory output file. (character vector length 1). version Version output (character vector length 1). progress Check progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. Machine learning algorithms rely training samples derived “pure” pixels, hand-picked users represent desired output classes. Given presence mixed pixels images regardless resolution, considerable data variability within class, classifiers often produce results misclassified pixels. Post-processing results sits_classify using sits_smooth reduces salt--pepper border effects. minimizing noise, sits_smooth brings significant gain overall accuracy interpretability final output.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"Gilberto Camara, Renato Assunção, Alexandre Carvalho, Rolf Simões, Felipe Souza, Felipe Carlos, Anielli Souza, Ana Rorato, Ana Paula Dal’Asta, “Bayesian inference post-processing remote sensing image classification”. Remote Sensing, 16(23), 4572, 2024. doi:10.3390/rs16234572 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth probability cubes with spatial predictors — sits_smooth","text":"","code":"if (sits_run_examples()) {     # create am xgboost model     xgb_model <- sits_train(samples_modis_ndvi, sits_xgboost())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = xgb_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans the samples based on SOM map information — sits_som_clean_samples","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"sits_som_clean_samples() evaluates quality samples based results SOM map.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"","code":"sits_som_clean_samples(   som_map,   prior_threshold = 0.6,   posterior_threshold = 0.6,   keep = c(\"clean\", \"analyze\", \"remove\") )"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"som_map Returned sits_som_map. prior_threshold Threshold conditional probability (frequency samples assigned  SOM neuron). posterior_threshold Threshold posterior probability (influenced SOM neighborhood). keep types evaluation maintained data.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"tibble two additional columns. first indicates sample clean, analyzed removed. second posterior probability sample. \"keep\" parameter indicates ","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"algorithm identifies noisy samples, using `prior_threshold` prior probability `posterior_threshold` posterior probability. sample receives evaluation tag, according following rule: () prior probability < `prior_threshold`, sample tagged \"remove\"; (b) prior probability >= `prior_threshold` posterior probability >=`posterior_threshold`, sample tagged \"clean\"; (c) prior probability >= `posterior_threshold` posterior probability < `posterior_threshold`, sample tagged \"analyze\" inspection. user can define tagged samples returned using \"keep\" parameter, following options: \"clean\", \"analyze\", \"remove\".","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"Lorena Alves, lorena.santos@inpe.br Karine Ferreira. karine.ferreira@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_clean_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans the samples based on SOM map information — sits_som_clean_samples","text":"","code":"if (sits_run_examples()) {     # create a som map     som_map <- sits_som_map(samples_modis_ndvi)     # plot the som map     plot(som_map)     # evaluate the som map and create clusters     clusters_som <- sits_som_evaluate_cluster(som_map)     # plot the cluster evaluation     plot(clusters_som)     # clean the samples     new_samples <- sits_som_clean_samples(som_map) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_evaluate_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate cluster — sits_som_evaluate_cluster","title":"Evaluate cluster — sits_som_evaluate_cluster","text":"sits_som_evaluate_cluster() produces tibble clusters found SOM map. cluster, provides percentage classes inside .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_evaluate_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate cluster — sits_som_evaluate_cluster","text":"","code":"sits_som_evaluate_cluster(som_map)"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_evaluate_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate cluster — sits_som_evaluate_cluster","text":"som_map SOM map produced som_map() function","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_evaluate_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate cluster — sits_som_evaluate_cluster","text":"tibble stating purity cluster","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_evaluate_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate cluster — sits_som_evaluate_cluster","text":"Lorena Alves, lorena.santos@inpe.br Karine Ferreira. karine.ferreira@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_evaluate_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate cluster — sits_som_evaluate_cluster","text":"","code":"if (sits_run_examples()) {     # create a som map     som_map <- sits_som_map(samples_modis_ndvi)     # plot the som map     plot(som_map)     # evaluate the som map and create clusters     clusters_som <- sits_som_evaluate_cluster(som_map)     # plot the cluster evaluation     plot(clusters_som)     # clean the samples     new_samples <- sits_som_clean_samples(som_map) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a SOM for quality analysis of time series samples — sits_som_map","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"function use self-organized maps perform quality analysis satellite image time series.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"","code":"sits_som_map(   data,   grid_xdim = 10L,   grid_ydim = 10L,   alpha = 1,   rlen = 100L,   distance = \"dtw\",   som_radius = 2L,   mode = \"online\" )"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"data tibble samples clustered. grid_xdim X dimension SOM grid (default = 25). grid_ydim Y dimension SOM grid. alpha Starting learning rate (decreases according number iterations). rlen Number iterations produce SOM. distance type similarity measure (distance). following similarity measurements supported: \"euclidean\" \"dtw\". default similarity measure \"dtw\". som_radius Radius SOM neighborhood. mode Type learning algorithm. following learning algorithm available: \"online\", \"batch\", \"pbatch\". default learning algorithm \"online\".","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"sits_som_map() produces list three members: (1) samples tibble, one additional column indicating neuron sample mapped; (2) Kohonen map, used plotting cluster quality measures; (3) tibble labelled neurons, class neuron associated two values: () prior probability class belongs cluster based frequency samples class allocated neuron; (b) posterior probability class belongs cluster, using data neighbours SOM map.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"sits_som_map creates SOM map, high-dimensional data mapped two dimensional map, keeping topological relations data patterns. sample assigned neuron, neurons placed grid based similarity. sits_som_evaluate_cluster analyses neurons SOM map, builds clusters based . cluster neuron set neuron categorized label. produces tibble percentage mixture classes cluster. sits_som_clean_samples evaluates sample quality based results SOM map.  algorithm identifies noisy samples, using `prior_threshold` prior probability `posterior_threshold` posterior probability. sample receives evaluation tag, according following rule: () prior probability < `prior_threshold`, sample tagged \"remove\"; (b) prior probability >= `prior_threshold` posterior probability >=`posterior_threshold`, sample tagged \"clean\"; (c) prior probability >= `posterior_threshold` posterior probability < `posterior_threshold`, sample tagged \"analyze\" inspection. user can define tagged samples returned using \"keep\" parameter, following options: \"clean\", \"analyze\", \"remove\". learn learning algorithms, check       kohonen::supersom function. sits package implements \"dtw\" (Dynamic Time       Warping) similarity measure. \"euclidean\" similarity       measurement come       kohonen::supersom (dist.fcts) function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"Lorena Santos, Karine Ferreira, Gilberto Camara, Michelle Picoli, Rolf Simoes, “Quality control class noise reduction satellite image time series”. ISPRS Journal Photogrammetry Remote Sensing, vol. 177, pp 75-88, 2021. doi:10.1016/j.isprsjprs.2021.04.014 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"Lorena Alves, lorena.santos@inpe.br Karine Ferreira. karine.ferreira@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a SOM for quality analysis of time series samples — sits_som_map","text":"","code":"if (sits_run_examples()) {     # create a som map     som_map <- sits_som_map(samples_modis_ndvi)     # plot the som map     plot(som_map)     # evaluate the som map and create clusters     clusters_som <- sits_som_evaluate_cluster(som_map)     # plot the cluster evaluation     plot(clusters_som)     # clean the samples     new_samples <- sits_som_clean_samples(som_map) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_remove_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate cluster — sits_som_remove_samples","title":"Evaluate cluster — sits_som_remove_samples","text":"Remove samples given class inside neuron another class","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_remove_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate cluster — sits_som_remove_samples","text":"","code":"sits_som_remove_samples(som_map, som_eval, class_cluster, class_remove)"},{"path":"https://e-sensing.github.io/sits/reference/sits_som_remove_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate cluster — sits_som_remove_samples","text":"som_map SOM map produced som_map() function som_eval evaluation produced som_eval() function class_cluster Dominant class set neurons class_remove Class removed neurons \"class_cluster\"","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_remove_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate cluster — sits_som_remove_samples","text":"new set samples desired class neurons remove","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_remove_samples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate cluster — sits_som_remove_samples","text":"Lorena Alves, lorena.santos@inpe.br Karine Ferreira. karine.ferreira@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_som_remove_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate cluster — sits_som_remove_samples","text":"","code":"if (sits_run_examples()) {     # create a som map     som_map <- sits_som_map(samples_modis_ndvi)     # evaluate the som map and create clusters     som_eval <- sits_som_evaluate_cluster(som_map)     # clean the samples     new_samples <- sits_som_remove_samples(         som_map, som_eval,         \"Pasture\", \"Cerrado\"     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain statistics for all sample bands — sits_stats","title":"Obtain statistics for all sample bands — sits_stats","text":"machine learning algorithms require data normalized. applies \"SVM\" method deep learning ones. normalize predictors, necessary extract statistics band samples. function computes 2 distribution band samples. values used minimum maximum values normalization operation performed sits_pred_normalize() function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain statistics for all sample bands — sits_stats","text":"","code":"sits_stats(samples)"},{"path":"https://e-sensing.github.io/sits/reference/sits_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain statistics for all sample bands — sits_stats","text":"samples Time series samples uses training data.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain statistics for all sample bands — sits_stats","text":"list 2 training data.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain statistics for all sample bands — sits_stats","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain statistics for all sample bands — sits_stats","text":"","code":"if (sits_run_examples()) {     stats <- sits_stats(samples_modis_ndvi) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_stratified_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocation of sample size to strata — sits_stratified_sampling","title":"Allocation of sample size to strata — sits_stratified_sampling","text":"Takes class cube different labels sampling design number samples per class allocates set locations class","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stratified_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocation of sample size to strata — sits_stratified_sampling","text":"","code":"sits_stratified_sampling(   cube,   sampling_design,   alloc = \"alloc_prop\",   overhead = 1.2,   multicores = 2L,   memsize = 2L,   shp_file = NULL,   progress = TRUE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_stratified_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocation of sample size to strata — sits_stratified_sampling","text":"cube Classified cube sampling_design Result sits_sampling_design alloc Allocation method chosen overhead Additional percentage account border points multicores Number cores used sample images parallel. memsize Memory available sampling. shp_file Name shapefile saved (optional) progress Show progress bar? Default TRUE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stratified_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocation of sample size to strata — sits_stratified_sampling","text":"samples              Point sf object required samples","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stratified_sampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allocation of sample size to strata — sits_stratified_sampling","text":"Gilberto Camara, gilberto.camara@inpe.br Felipe Carlos, efelipecarlos@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_stratified_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocation of sample size to strata — sits_stratified_sampling","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     # estimated UA for classes     expected_ua <- c(         Cerrado = 0.95, Forest = 0.95,         Pasture = 0.95, Soy_Corn = 0.95     )     # design sampling     sampling_design <- sits_sampling_design(label_cube, expected_ua)     # select samples     samples <- sits_stratified_sampling(         label_cube,         sampling_design, \"alloc_prop\"     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":null,"dir":"Reference","previous_headings":"","what":"Train support vector machine models — sits_svm","title":"Train support vector machine models — sits_svm","text":"function receives tibble set attributes X observation Y. attributes values time series band. SVM algorithm used multiclass-classification. purpose, uses \"one--one\" approach, k(k-1)/2 binary classifiers trained; appropriate class found voting scheme. function front-end \"svm\" method \"e1071\" package. Please refer documentation package details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train support vector machine models — sits_svm","text":"","code":"sits_svm(   samples = NULL,   formula = sits_formula_linear(),   scale = FALSE,   cachesize = 1000L,   kernel = \"radial\",   degree = 3L,   coef0 = 0L,   cost = 10,   tolerance = 0.001,   epsilon = 0.1,   cross = 10L,   ... )"},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train support vector machine models — sits_svm","text":"samples Time series training samples. formula Symbolic description model fit. (default: sits_formula_linear). scale Logical vector indicating variables scaled. cachesize Cache memory MB (default = 1000). kernel Kernel used training predicting. options: \"linear\", \"polynomial\", \"radial\", \"sigmoid\" (default: \"radial\"). degree Exponential polynomial type kernel (default: 3). coef0 Parameter needed kernels type polynomial sigmoid (default: 0). cost Cost constraints violation (default: 10). tolerance Tolerance termination criterion (default: 0.001). epsilon Epsilon insensitive-loss function (default: 0.1). cross Number cross validation folds applied assess quality model (default: 10). ... parameters passed e1071::svm function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train support vector machine models — sits_svm","text":"Model fitted input data                         (passed sits_classify)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train support vector machine models — sits_svm","text":"Please refer sits documentation available https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train support vector machine models — sits_svm","text":"Alexandre Ywata de Carvalho, alexandre.ywata@ipea.gov.br Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_svm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train support vector machine models — sits_svm","text":"","code":"if (sits_run_examples()) {     # Example of training a model for time series classification     # Retrieve the samples for Mato Grosso     # train an SVM model     ml_model <- sits_train(samples_modis_ndvi, ml_method = sits_svm)     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # classify the point     point_class <- sits_classify(         data = point_ndvi, ml_model = ml_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a model using Temporal Self-Attention Encoder — sits_tae","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"Implementation Temporal Attention Encoder (TAE) satellite image time series classification. TAE simplified version well-known self-attention architeture used large language models. modified self-attention scheme uses input embeddings values. TAE defines single master query sequence, computed temporal average queries. master query compared sequence keys produce single attention mask used weight temporal mean values single feature vector.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"","code":"sits_tae(   samples = NULL,   samples_validation = NULL,   epochs = 150L,   batch_size = 64L,   validation_split = 0.2,   optimizer = torch::optim_adamw,   opt_hparams = list(lr = 0.001, eps = 1e-08, weight_decay = 1e-06),   lr_decay_epochs = 1L,   lr_decay_rate = 0.95,   patience = 20L,   min_delta = 0.01,   seed = NULL,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"samples Time series training samples. samples_validation Time series validation samples. samples_validation parameter provided, validation_split parameter ignored. epochs Number iterations train model. batch_size Number samples per gradient update. validation_split Number 0 1. Fraction training data used validation data. optimizer Optimizer function used. opt_hparams Hyperparameters optimizer: lr : Learning rate optimizer eps: Term added denominator      improve numerical stability. weight_decay:       L2 regularization lr_decay_epochs Number epochs reduce learning rate. lr_decay_rate Decay factor reducing learning rate. patience Number epochs without improvements training stops. min_delta Minimum improvement reset patience counter. seed Seed random values. verbose Verbosity mode (TRUE/FALSE). Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"fitted model used classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"sits provides set default values classification models. settings chosen based testing authors. Nevertheless, users can control parameters model. Novice users can rely default values, experienced ones can fine-tune deep learning models using sits_tuning. function based paper Vivien Garnot referenced code available github https://github.com/VSainteuf/pytorch-psetae. also used code made available Maja Schneider work Marco Körner referenced available https://github.com/maja601/RC2020-psetae. use method, please cite Garnot's Schneider's work.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"Vivien Garnot, Loic Landrieu, Sebastien Giordano, Nesrine Chehata, \"Satellite Image Time Series Classification Pixel-Set Encoders Temporal Self-Attention\", 2020 Conference Computer Vision Pattern Recognition. pages 12322-12331. DOI: 10.1109/CVPR42600.2020.01234 Schneider, Maja; Körner, Marco, \"[Re] Satellite Image Time Series Classification Pixel-Set Encoders Temporal Self-Attention.\" ReScience C 7 (2), 2021. DOI: 10.5281/zenodo.4835356","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"Charlotte Pelletier, charlotte.pelletier@univ-ubs.fr Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Souza, lipecaso@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a model using Temporal Self-Attention Encoder — sits_tae","text":"","code":"if (sits_run_examples()) {     # create a TAE model     torch_model <- sits_train(samples_modis_ndvi, sits_tae())     # plot the model     plot(torch_model)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = torch_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Train temporal convolutional neural network models — sits_tempcnn","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"Use TempCNN algorithm classify data, two stages: 1D CNN  multi-layer perceptron. Users can define depth 1D network, well number perceptron layers.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"","code":"sits_tempcnn(   samples = NULL,   samples_validation = NULL,   cnn_layers = c(64L, 64L, 64L),   cnn_kernels = c(5L, 5L, 5L),   cnn_dropout_rates = c(0.2, 0.2, 0.2),   dense_layer_nodes = 256L,   dense_layer_dropout_rate = 0.5,   epochs = 150L,   batch_size = 64L,   validation_split = 0.2,   optimizer = torch::optim_adamw,   opt_hparams = list(lr = 5e-04, eps = 1e-08, weight_decay = 1e-06),   lr_decay_epochs = 1L,   lr_decay_rate = 0.95,   patience = 20L,   min_delta = 0.01,   seed = NULL,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"samples Time series training samples. samples_validation Time series validation samples. samples_validation parameter provided, validation_split parameter ignored. cnn_layers Number 1D convolutional filters per layer cnn_kernels Size 1D convolutional kernels. cnn_dropout_rates Dropout rates 1D convolutional filters. dense_layer_nodes Number nodes dense layer. dense_layer_dropout_rate Dropout rate (0,1) dense layer. epochs Number iterations train model. batch_size Number samples per gradient update. validation_split Fraction training data used validation. optimizer Optimizer function used. opt_hparams Hyperparameters optimizer: lr : Learning rate optimizer eps: Term added denominator      improve numerical stability. weight_decay:       L2 regularization lr_decay_epochs Number epochs reduce learning rate. lr_decay_rate Decay factor reducing learning rate. patience Number epochs without improvements training stops. min_delta Minimum improvement loss function reset patience counter. seed Seed random values. verbose Verbosity mode (TRUE/FALSE). Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"fitted model used classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"sits provides set default values classification models. settings chosen based testing authors. Nevertheless, users can control parameters model. Novice users can rely default values, experienced ones can fine-tune deep learning models using sits_tuning. function based paper Charlotte Pelletier referenced . use method, please cite original tempCNN paper. torch version based code made available BreizhCrops team: Marc Russwurm, Charlotte Pelletier, Marco Korner, Maximilian Zollner. original python code available website https://github.com/dl4sits/BreizhCrops. code licensed GPL-3.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"Charlotte Pelletier, Geoffrey Webb François Petitjean, \"Temporal Convolutional Neural Network Classification Satellite Image Time Series\", Remote Sensing, 11,523, 2019. doi:10.3390/rs11050523 .","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"Charlotte Pelletier, charlotte.pelletier@univ-ubs.fr Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Souza, lipecaso@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tempcnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train temporal convolutional neural network models — sits_tempcnn","text":"","code":"if (sits_run_examples()) {     # create a TempCNN model     torch_model <- sits_train(         samples_modis_ndvi,         sits_tempcnn(epochs = 20, verbose = TRUE)     )     # plot the model     plot(torch_model)     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = torch_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     bayes_cube <- sits_smooth(probs_cube, output_dir = tempdir())     # plot the smoothed cube     plot(bayes_cube)     # label the probability cube     label_cube <- sits_label_classification(         bayes_cube,         output_dir = tempdir()     )     # plot the labelled cube     plot(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a set of texture measures on a data cube. — sits_texture","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"set texture measures based Grey Level Co-occurrence Matrix (GLCM) described Haralick. implementation follows guidelines equations described Hall-Beyer (referenced ).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"","code":"sits_texture(cube, ...)  # S3 method for class 'raster_cube' sits_texture(   cube,   ...,   window_size = 3L,   angles = 0,   memsize = 4L,   multicores = 2L,   output_dir,   progress = TRUE )  # S3 method for class 'derived_cube' sits_texture(cube, ...)  # Default S3 method sits_texture(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"cube Valid sits cube ... GLCM function (see details). window_size odd number representing size sliding window. angles direction angles radians related central pixel neighbor (See details). Default 0. memsize Memory available classification (GB). multicores Number cores used classification. output_dir Directory files saved. progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"sits cube new bands, produced according requested measure.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"spatial relation central pixel neighbor expressed radians values, : #' 0:      corresponds neighbor right-side pi/4:   corresponds neighbor top-right diagonals pi/2:   corresponds neighbor 3*pi/4: corresponds neighbor top-left diagonals implementation relies symmetric co-occurrence matrix, considers opposite directions angle. example, neighbor pixels based 0 angle rely left right direction; neighbor pixels pi/2 central pixel, . one angle provided, compute average.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"available-texture-functions","dir":"Reference","previous_headings":"","what":"Available texture functions","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"glcm_contrast(): measures contrast amount local variations present image. Low contrast values indicate regions low spatial frequency. glcm_homogeneity(): also known Inverse Difference Moment, measures image homogeneity assuming larger values smaller gray tone differences pair elements. glcm_asm(): Angular Second Moment (ASM) measures textural uniformity. High ASM values indicate constant periodic form window values. glcm_energy(): measures textural uniformity. Energy defined square root ASM. glcm_mean(): measures mean probability co-occurrence specific pixel values within neighborhood. glcm_variance(): measures heterogeneity strongly correlated first order statistical variables standard deviation. Variance values increase gray-level values deviate mean. glcm_std(): measures heterogeneity strongly correlated first order statistical variables standard deviation. STD defined square root variance. glcm_correlation(): measures gray-tone linear dependencies image. Low correlation values indicate homogeneous region edges.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"Robert M. Haralick, K. Shanmugam, 'Hak Dinstein, \"Textural Features Image Classification\", IEEE Transactions Systems, Man, Cybernetics, SMC-3, 6, 610-621, 1973, DOI: 10.1109/TSMC.1973.4309314. Hall-Beyer, M., \"GLCM Texture Tutorial\", 2007, http://www.fp.ucalgary.ca/mhallbey/tutorial.htm. Hall-Beyer, M., \"Practical guidelines choosing GLCM textures use landscape classification tasks range moderate spatial scales\", International Journal Remote Sensing, 38, 1312–1338, 2017, DOI: 10.1080/01431161.2016.1278314. . Baraldi F. Panniggiani, \"investigation textural characteristics associated gray level co-occurrence matrix statistical parameters,\" IEEE Transactions Geoscience Remote Sensing, 33, 2, 293-304, 1995, DOI: 10.1109/TGRS.1995.8746010. Shokr, M. E., \"Evaluation second-order texture parameters sea ice classification radar images\", J. Geophys. Res., 96, 10625–10640, 1991, DOI:10.1029/91JC00693. Peng Gong, Danielle J. Marceau, Philip J. Howarth, \"comparison spatial feature extraction algorithms land-use classification SPOT HRV data\", Remote Sensing Environment, 40, 2, 1992, 137-151, DOI: 10.1016/0034-4257(92)90011-8.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"Felipe Carvalho, felipe.carvalho@inpe.br Felipe Carlos, efelipecarlos@gmail.com Rolf Simoes, rolf.simoes@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_texture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a set of texture measures on a data cube. — sits_texture","text":"","code":"if (sits_run_examples()) {     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )      # Compute the NDVI variance     cube_texture <- sits_texture(         cube = cube,         NDVIVAR = glcm_variance(NDVI),         window_size = 5,         output_dir = tempdir()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_tiles_to_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MGRS tile information to ROI in WGS84 — sits_tiles_to_roi","title":"Convert MGRS tile information to ROI in WGS84 — sits_tiles_to_roi","text":"Takes list MGRS tiles produces ROI covering ","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tiles_to_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MGRS tile information to ROI in WGS84 — sits_tiles_to_roi","text":"","code":"sits_tiles_to_roi(tiles, grid_system = \"MGRS\")"},{"path":"https://e-sensing.github.io/sits/reference/sits_tiles_to_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MGRS tile information to ROI in WGS84 — sits_tiles_to_roi","text":"tiles Character vector names MGRS tiles grid_system Grid system used","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tiles_to_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MGRS tile information to ROI in WGS84 — sits_tiles_to_roi","text":"roi                  Valid ROI use SITS functions","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tiles_to_roi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert MGRS tile information to ROI in WGS84 — sits_tiles_to_roi","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolf.simoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Get timeline of a cube or a set of time series — sits_timeline","title":"Get timeline of a cube or a set of time series — sits_timeline","text":"function returns timeline given data set, either              set time series, data cube, trained model.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get timeline of a cube or a set of time series — sits_timeline","text":"","code":"sits_timeline(data)  # S3 method for class 'sits' sits_timeline(data)  # S3 method for class 'sits_model' sits_timeline(data)  # S3 method for class 'raster_cube' sits_timeline(data)  # S3 method for class 'derived_cube' sits_timeline(data)  # S3 method for class 'tbl_df' sits_timeline(data)  # Default S3 method sits_timeline(data)"},{"path":"https://e-sensing.github.io/sits/reference/sits_timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get timeline of a cube or a set of time series — sits_timeline","text":"data Tibble class \"sits\" class \"raster_cube\"","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get timeline of a cube or a set of time series — sits_timeline","text":"Vector class Date timeline samples data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get timeline of a cube or a set of time series — sits_timeline","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get timeline of a cube or a set of time series — sits_timeline","text":"","code":"sits_timeline(samples_modis_ndvi) #>  [1] \"2013-09-14\" \"2013-10-16\" \"2013-11-17\" \"2013-12-19\" \"2014-01-17\" #>  [6] \"2014-02-18\" \"2014-03-22\" \"2014-04-23\" \"2014-05-25\" \"2014-06-26\" #> [11] \"2014-07-28\" \"2014-08-29\""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeseries_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","title":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","text":"Converts metadata data sits tibble CSV file.              CSV file contain actual time              series. columns              CSV file used retrieve data              ground information (\"latitude\", \"longitude\", \"start_date\",              \"end_date\", \"cube\", \"label\"), plus time series              data","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeseries_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","text":"","code":"sits_timeseries_to_csv(data, file = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/sits_timeseries_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","text":"data Time series (tibble class \"sits\"). file Full path exported CSV file (valid file name extension \".csv\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeseries_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","text":"Return data.frame CSV columns (optional)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeseries_to_csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_timeseries_to_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a a full sits tibble to the CSV format — sits_timeseries_to_csv","text":"","code":"csv_ts <- sits_timeseries_to_csv(cerrado_2classes) csv_file <- paste0(tempdir(), \"/cerrado_2classes_ts.csv\") sits_timeseries_to_csv(cerrado_2classes, file = csv_file)"},{"path":"https://e-sensing.github.io/sits/reference/sits_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a sits tibble metadata to the CSV format — sits_to_csv","title":"Export a sits tibble metadata to the CSV format — sits_to_csv","text":"Converts metadata sits tibble CSV file.              CSV file contain actual time              series. columns              CSV file used retrieve data              ground information (\"latitude\", \"longitude\", \"start_date\",              \"end_date\", \"cube\", \"label\").              file NULL, returns data.frame object","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a sits tibble metadata to the CSV format — sits_to_csv","text":"","code":"sits_to_csv(data, file = NULL)  # S3 method for class 'sits' sits_to_csv(data, file = NULL)  # S3 method for class 'tbl_df' sits_to_csv(data, file)  # Default S3 method sits_to_csv(data, file)"},{"path":"https://e-sensing.github.io/sits/reference/sits_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a sits tibble metadata to the CSV format — sits_to_csv","text":"data Time series (tibble class \"sits\"). file Full path exported CSV file (valid file name extension \".csv\").","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a sits tibble metadata to the CSV format — sits_to_csv","text":"Return data.frame CSV columns (optional)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export a sits tibble metadata to the CSV format — sits_to_csv","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a sits tibble metadata to the CSV format — sits_to_csv","text":"","code":"csv_file <- paste0(tempdir(), \"/cerrado_2classes.csv\") sits_to_csv(cerrado_2classes, file = csv_file) #> # A tibble: 746 × 6 #>       id longitude latitude start_date end_date   label   #>    <int>     <dbl>    <dbl> <date>     <date>     <chr>   #>  1     1     -54.2    -14.0 2000-09-13 2001-08-29 Cerrado #>  2     2     -54.2    -14.0 2001-09-14 2002-08-29 Cerrado #>  3     3     -54.2    -14.0 2002-09-14 2003-08-29 Cerrado #>  4     4     -54.2    -14.0 2003-09-14 2004-08-28 Cerrado #>  5     5     -54.2    -14.0 2004-09-13 2005-08-29 Cerrado #>  6     6     -54.2    -14.0 2005-09-14 2006-08-29 Cerrado #>  7     7     -54.2    -14.0 2006-09-14 2007-08-29 Cerrado #>  8     8     -54.2    -14.0 2007-09-14 2008-08-28 Cerrado #>  9     9     -54.2    -14.0 2008-09-13 2009-08-29 Cerrado #> 10    10     -54.2    -14.0 2009-09-14 2010-08-29 Cerrado #> # ℹ 736 more rows"},{"path":"https://e-sensing.github.io/sits/reference/sits_to_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Save accuracy assessments as Excel files — sits_to_xlsx","title":"Save accuracy assessments as Excel files — sits_to_xlsx","text":"Saves confusion matrices Excel spreadsheets. function takes list accuracy assessments generated sits_accuracy saves Excel spreadsheet.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save accuracy assessments as Excel files — sits_to_xlsx","text":"","code":"sits_to_xlsx(acc, file)  # S3 method for class 'sits_accuracy' sits_to_xlsx(acc, file)  # S3 method for class 'list' sits_to_xlsx(acc, file)"},{"path":"https://e-sensing.github.io/sits/reference/sits_to_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save accuracy assessments as Excel files — sits_to_xlsx","text":"acc Accuracy statistics (either output sits_accuracy list ) file file XLSX data saved.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save accuracy assessments as Excel files — sits_to_xlsx","text":"return value, called side effects.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_xlsx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save accuracy assessments as Excel files — sits_to_xlsx","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_to_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save accuracy assessments as Excel files — sits_to_xlsx","text":"","code":"if (sits_run_examples()) {     # A dataset containing a tibble with time series samples     # for the Mato Grosso state in Brasil     # create a list to store the results     results <- list()      # accuracy assessment lightTAE     acc_ltae <- sits_kfold_validate(samples_modis_ndvi,         folds = 5,         multicores = 1,         ml_method = sits_lighttae()     )     # use a name     acc_ltae$name <- \"LightTAE\"      # put the result in a list     results[[length(results) + 1]] <- acc_ltae      # save to xlsx file     sits_to_xlsx(         results,         file = tempfile(\"accuracy_mato_grosso_dl_\", fileext = \".xlsx\")     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Train classification models — sits_train","title":"Train classification models — sits_train","text":"Given tibble set time series,    returns trained models. Currently, sits supports following models: support vector machines:  sits_svm; random forests:  sits_rfor; extreme gradient boosting: sits_xgboost; light gradient boosting: sits_lightgbm; multi-layer perceptrons: sits_mlp; temporal CNN: sits_tempcnn; residual network encoders: sits_resnet; LSTM convolutional networks: sits_lstm_fcn; temporal self-attention encoders:         sits_lighttae         sits_tae.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train classification models — sits_train","text":"","code":"sits_train(samples, ml_method = sits_svm())"},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train classification models — sits_train","text":"samples Time series training samples. ml_method Machine learning method.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train classification models — sits_train","text":"Model fitted input data                          passed sits_classify","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train classification models — sits_train","text":"main sits classification workflow following steps: sits_cube: selects ARD image collection          cloud provider. sits_cube_copy: copies ARD image collection          cloud provider local directory faster processing. sits_regularize: create regular data cube          ARD image collection. sits_apply: create new indices combining          bands  regular data cube (optional). sits_get_data: extract time series          regular data cube based user-provided labelled samples. sits_train: train machine learning          model based image time series. sits_classify: classify data cube          using machine learning model obtain probability cube. sits_smooth: post-process probability cube          using spatial smoother remove outliers          increase spatial consistency. sits_label_classification: produce          classified map selecting label highest probability          smoothed cube. sits_train  provides standard interface machine learning models. takes two mandatory parameters: training data (samples) ML algorithm (ml_method). output model can used classify individual time series data cubes sits_classify. sits provides set default values classification models. settings chosen based testing authors. Nevertheless, users can control parameters model. Novice users can rely default values, experienced ones can fine-tune deep learning models using sits_tuning.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train classification models — sits_train","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br Alexandre Ywata de Carvalho, alexandre.ywata@ipea.gov.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train classification models — sits_train","text":"","code":"if (sits_run_examples()) {     # Retrieve the set of samples for Mato Grosso     # fit a training model (rfor model)     ml_model <- sits_train(samples_modis_ndvi, sits_rfor(num_trees = 50))     # get a point and classify the point with the ml_model     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     class <- sits_classify(         data = point_ndvi, ml_model = ml_model     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning machine learning models hyper-parameters — sits_tuning","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"function performs random search values selected hyperparameters, produces data frame accuracy kappa values produced validation procedure. result allows users select appropriate hyperparameters deep learning models.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"","code":"sits_tuning(   samples,   samples_validation = NULL,   validation_split = 0.2,   ml_method = sits_tempcnn(),   params = sits_tuning_hparams(optimizer = torch::optim_adamw, opt_hparams = list(lr =     loguniform(0.01, 1e-04))),   trials = 30L,   multicores = 2L,   gpu_memory = 4L,   batch_size = 2L^gpu_memory,   progress = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"samples Time series set validated. samples_validation Time series set used validation. validation_split Percent original time series set used validation (samples_validation NULL) ml_method Machine learning method. params List hyper parameters passed ml_method. User can use uniform, choice, randint, normal, lognormal, loguniform, beta distribution functions randomize parameters. trials Number random trials perform search. multicores Number cores process parallel. gpu_memory Memory available GPU GB (default = 4) batch_size Batch size GPU classification. progress Show progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"tibble containing parameters used train trial   ordered accuracy.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"Machine learning models use stochastic gradient descent (SGD) techniques find optimal solutions. perform SGD, models use optimization algorithms hyperparameters adjusted achieve best performance application. Instead performing exhaustive test parameter combinations, sits_tuning selects randomly. Validation done using independent set samples validation split.  function returns best hyper-parameters list. Hyper-parameters passed params parameter passed calling sits_tuning_hparams. using GPU deep learning, gpu_memory indicates    memory graphics card available processing.    parameter batch_size defines size matrix    (measured number rows) sent GPU classification.    Users can test different values batch_size    find one best fits GPU architecture. possible exact idea size Deep Learning    models GPU memory, complexity model factors    CUDA Context increase size model memory.    Therefore, recommend leave least 1GB free    video card store Deep Learning model used. users Apple M3 chips similar Neural Engine,    aware chips share memory GPU CPU.    Tests indicate memsize    set half total memory batch_size    parameter small number (suggest value 64).    aware increasing parameters may lead memory    conflicts.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"James Bergstra, Yoshua Bengio,  \"Random Search Hyper-Parameter Optimization\".  Journal Machine Learning Research. 13: 281–305, 2012.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning machine learning models hyper-parameters — sits_tuning","text":"","code":"if (sits_run_examples()) {     # find best learning rate parameters for TempCNN     tuned <- sits_tuning(         samples_modis_ndvi,         ml_method = sits_tempcnn(),         params = sits_tuning_hparams(             optimizer = choice(                 torch::optim_adamw             ),             opt_hparams = list(                 lr = loguniform(10^-2, 10^-4)             )         ),         trials = 4,         multicores = 2,         progress = FALSE     )     # obtain best accuracy, kappa and best_lr     accuracy <- tuned$accuracy[[1]]     kappa <- tuned$kappa[[1]]     best_lr <- tuned$opt_hparams[[1]]$lr }"},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning_hparams.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning machine learning models hyper-parameters — sits_tuning_hparams","title":"Tuning machine learning models hyper-parameters — sits_tuning_hparams","text":"function allow user building hyper-parameters space used sits_tuning() function search randomly best parameter combination. Users pass possible values hyper-parameters constants calling following random functions: uniform(min = 0, max = 1, n = 1): returns random numbers   uniform distribution parameters min max. choice(..., replace = TRUE, n = 1): returns random objects   passed ... replacement (parameter replace). randint(min, max, n = 1): returns random integers   uniform distribution parameters min max. normal(mean = 0, sd = 1, n = 1): returns random numbers   normal distribution parameters min max. lognormal(meanlog = 0, sdlog = 1, n = 1): returns random   numbers lognormal distribution parameters min max. loguniform(minlog = 0, maxlog = 1, n = 1): returns random   numbers loguniform distribution parameters min max. beta(shape1, shape2, n = 1): returns random numbers   beta distribution parameters min max. functions accepts n parameter indicate many values returned.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning_hparams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning machine learning models hyper-parameters — sits_tuning_hparams","text":"","code":"sits_tuning_hparams(...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning_hparams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning machine learning models hyper-parameters — sits_tuning_hparams","text":"... Used prepare hyper-parameter space","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning_hparams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning machine learning models hyper-parameters — sits_tuning_hparams","text":"list containing hyper-parameter space passed   sits_tuning()'s params parameter.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_tuning_hparams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning machine learning models hyper-parameters — sits_tuning_hparams","text":"","code":"if (sits_run_examples()) {     # find best learning rate parameters for TempCNN     tuned <- sits_tuning(         samples_modis_ndvi,         ml_method = sits_tempcnn(),         params = sits_tuning_hparams(             optimizer = choice(                 torch::optim_adamw,                 torch::optim_adagrad             ),             opt_hparams = list(                 lr = loguniform(10^-2, 10^-4),                 weight_decay = loguniform(10^-2, 10^-8)             )         ),         trials = 20,         multicores = 2,         progress = FALSE     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate classification uncertainty based on probs cube — sits_uncertainty","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"Calculate uncertainty cube based probabilities produced classifier. Takes probability cube input produces uncertainty cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"","code":"sits_uncertainty(cube, ...)  # S3 method for class 'probs_cube' sits_uncertainty(   cube,   ...,   type = \"entropy\",   multicores = 2L,   memsize = 4L,   output_dir,   version = \"v1\",   progress = TRUE )  # S3 method for class 'probs_vector_cube' sits_uncertainty(   cube,   ...,   type = \"entropy\",   multicores = 2L,   memsize = 4L,   output_dir,   version = \"v1\" )  # S3 method for class 'raster_cube' sits_uncertainty(cube, ...)  # Default S3 method sits_uncertainty(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"cube Probability data cube. ... parameters specific functions. type Method measure uncertainty. See details. multicores Number cores run function. memsize Maximum overall memory (GB) run function. output_dir Output directory image files. version Version resulting image (case multiple tests). progress Check progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"uncertainty data cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"output sits_classify sits_smooth probability cube containing class probability pixels, generated machine learning model. sits_uncertainty function takes probability cube produces uncertainty code contains measure uncertainty pixel, based class probabilities. uncertainty measure relevant context active leaning, helps increase quantity quality training samples providing information confidence model. supported types uncertainty : entropy: difference predictions expressed Shannon measure entropy. least: difference 1.0 confident prediction. margin: difference two confident predictions.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"Monarch, Robert Munro. Human---Loop Machine Learning: Active learning annotation human-centered AI. Simon Schuster, 2021.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com Alber Sanchez, alber.ipia@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate classification uncertainty based on probs cube — sits_uncertainty","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # calculate uncertainty     uncert_cube <- sits_uncertainty(probs_cube, output_dir = tempdir())     # plot the resulting uncertainty cube     plot(uncert_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"Suggest samples regions high uncertainty predicted model. function selects data points confused algorithm. points labels need manually labelled experts used increase classification's training set. function best used following context:  1. Select initial set samples.  2. Train machine learning model.  3. Build data cube classify using model.  4. Run Bayesian smoothing resulting probability cube.  5. Create uncertainty cube.  6. Perform uncertainty sampling. Bayesian smoothing procedure reduce classification outliers thus increase likelihood resulting pixels high uncertainty meaningful information.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"","code":"sits_uncertainty_sampling(   uncert_cube,   n = 100L,   min_uncert = 0.4,   sampling_window = 10L,   multicores = 2L,   memsize = 4L )"},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"uncert_cube uncertainty cube. See sits_uncertainty. n Number suggested points sampled per tile. min_uncert Minimum uncertainty value select sample. sampling_window Window size collecting points (pixels). minimum window size 10. multicores Number workers parallel processing (integer, min = 1, max = 2048). memsize Maximum overall memory (GB) run function.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"tibble longitude latitude WGS84 locations high uncertainty meet minimum distance criteria.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"Robert Monarch, \"Human---Loop Machine Learning: Active learning annotation human-centered AI\". Manning Publications, 2021.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"Alber Sanchez, alber.ipia@inpe.br Rolf Simoes, rolfsimoes@gmail.com Felipe Carvalho, felipe.carvalho@inpe.br Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_uncertainty_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest samples for enhancing classification accuracy — sits_uncertainty_sampling","text":"","code":"if (sits_run_examples()) {     # create a data cube     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # build a random forest model     rfor_model <- sits_train(samples_modis_ndvi, ml_method = sits_rfor())     # classify the cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # create an uncertainty cube     uncert_cube <- sits_uncertainty(probs_cube,         type = \"entropy\",         output_dir = tempdir()     )     # obtain a new set of samples for active learning     # the samples are located in uncertain places     new_samples <- sits_uncertainty_sampling(         uncert_cube,         n = 10, min_uncert = 0.4     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate time series samples — sits_validate","title":"Validate time series samples — sits_validate","text":"One round cross-validation involves partitioning sample data complementary subsets, performing analysis one subset (called training set), validating analysis subset (called validation set testing set). function takes two arguments: set time series machine learning model another set validation samples. validation sample set provided, sample dataset split two parts, defined parameter validation_split. accuracy determined result validation test set. function returns confusion matrix, Kappa values.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate time series samples — sits_validate","text":"","code":"sits_validate(   samples,   samples_validation = NULL,   validation_split = 0.2,   ml_method = sits_rfor(),   gpu_memory = 4L,   batch_size = 2L^gpu_memory )"},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate time series samples — sits_validate","text":"samples Time series validated (class \"sits\"). samples_validation Optional: Time series used validation (class \"sits\") validation_split Percent original time series set used validation samples_validation NULL (numeric value). ml_method Machine learning method (function) gpu_memory Memory available GPU GB (default = 4) batch_size Batch size GPU classification.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate time series samples — sits_validate","text":"caret::confusionMatrix object used         validation assessment.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validate time series samples — sits_validate","text":"using GPU deep learning, gpu_memory indicates    memory graphics card available processing.    parameter batch_size defines size matrix    (measured number rows) sent GPU classification.    Users can test different values batch_size    find one best fits GPU architecture. possible exact idea size Deep Learning    models GPU memory, complexity model factors    CUDA Context increase size model memory.    Therefore, recommend leave least 1GB free    video card store Deep Learning model used. users Apple M3 chips similar Neural Engine,    aware chips share memory GPU CPU.    Tests indicate memsize    set half total memory batch_size    parameter small number (suggest value 64).    aware increasing parameters may lead memory    conflicts.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate time series samples — sits_validate","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate time series samples — sits_validate","text":"","code":"if (sits_run_examples()) {     samples <- sits_sample(cerrado_2classes, frac = 0.5)     samples_validation <- sits_sample(cerrado_2classes, frac = 0.5)     conf_matrix_1 <- sits_validate(         samples = samples,         samples_validation = samples_validation,         ml_method = sits_rfor()     )     conf_matrix_2 <- sits_validate(         samples = cerrado_2classes,         validation_split = 0.2,         ml_method = sits_rfor()     ) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the variance of a probability cube — sits_variance","title":"Calculate the variance of a probability cube — sits_variance","text":"Takes probability cube estimate local variance              logit probability,              support choice parameters Bayesian smoothing.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the variance of a probability cube — sits_variance","text":"","code":"sits_variance(cube, ...)  # S3 method for class 'probs_cube' sits_variance(   cube,   ...,   window_size = 9L,   neigh_fraction = 0.5,   memsize = 4L,   multicores = 2L,   output_dir,   version = \"v1\",   progress = TRUE )  # S3 method for class 'raster_cube' sits_variance(cube, ...)  # S3 method for class 'derived_cube' sits_variance(cube, ...)  # Default S3 method sits_variance(cube, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the variance of a probability cube — sits_variance","text":"cube Probability data cube (class \"probs_cube\") ... Parameters specific functions window_size Size neighborhood (odd integer) neigh_fraction Fraction neighbors highest probability Bayesian inference (numeric 0.0 1.0) memsize Maximum overall memory (GB) run smoothing (integer, min = 1, max = 16384) multicores Number cores run smoothing function (integer, min = 1, max = 2048) output_dir Output directory image files (character vector length 1) version Version resulting image (character vector length 1) progress Check progress bar?","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the variance of a probability cube — sits_variance","text":"variance data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_variance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the variance of a probability cube — sits_variance","text":"Gilberto Camara, gilberto.camara@inpe.br Rolf Simoes, rolfsimoes@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the variance of a probability cube — sits_variance","text":"","code":"if (sits_run_examples()) {     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # plot the probability cube     plot(probs_cube)     # smooth the probability cube using Bayesian statistics     var_cube <- sits_variance(probs_cube, output_dir = tempdir())     # plot the variance cube     plot(var_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":null,"dir":"Reference","previous_headings":"","what":"View data cubes and samples in leaflet — sits_view","title":"View data cubes and samples in leaflet — sits_view","text":"Uses leaflet visualize time series, raster cube classified images.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View data cubes and samples in leaflet — sits_view","text":"","code":"sits_view(x, ...)  # S3 method for class 'sits' sits_view(x, ..., legend = NULL, palette = \"Set3\", radius = 10L, add = FALSE)  # S3 method for class 'data.frame' sits_view(x, ..., legend = NULL, palette = \"Harmonic\", add = FALSE)  # S3 method for class 'som_map' sits_view(   x,   ...,   id_neurons,   legend = NULL,   palette = \"Harmonic\",   radius = 10L,   add = FALSE )  # S3 method for class 'raster_cube' sits_view(   x,   ...,   band = NULL,   red = NULL,   green = NULL,   blue = NULL,   tiles = x[[\"tile\"]][[1L]],   dates = NULL,   palette = \"RdYlGn\",   rev = FALSE,   opacity = 0.85,   max_cog_size = 2048L,   first_quantile = 0.02,   last_quantile = 0.98,   leaflet_megabytes = 64L,   add = FALSE )  # S3 method for class 'uncertainty_cube' sits_view(   x,   ...,   tiles = x[[\"tile\"]][[1L]],   legend = NULL,   palette = \"RdYlGn\",   rev = FALSE,   opacity = 0.85,   max_cog_size = 2048L,   first_quantile = 0.02,   last_quantile = 0.98,   leaflet_megabytes = 64L,   add = FALSE )  # S3 method for class 'class_cube' sits_view(   x,   ...,   tiles = x[[\"tile\"]],   legend = NULL,   palette = \"Set3\",   version = NULL,   opacity = 0.85,   max_cog_size = 2048L,   leaflet_megabytes = 32L,   add = FALSE )  # S3 method for class 'probs_cube' sits_view(   x,   ...,   tiles = x[[\"tile\"]][[1L]],   label = x[[\"labels\"]][[1L]][[1L]],   legend = NULL,   palette = \"YlGn\",   rev = FALSE,   opacity = 0.85,   max_cog_size = 2048L,   first_quantile = 0.02,   last_quantile = 0.98,   leaflet_megabytes = 64L,   add = FALSE )  # S3 method for class 'vector_cube' sits_view(   x,   ...,   tiles = x[[\"tile\"]][[1L]],   seg_color = \"yellow\",   line_width = 0.5,   add = FALSE )  # S3 method for class 'class_vector_cube' sits_view(   x,   ...,   tiles = x[[\"tile\"]][[1L]],   seg_color = \"yellow\",   line_width = 0.2,   version = NULL,   legend = NULL,   palette = \"Set3\",   opacity = 0.85,   add = FALSE )  # Default S3 method sits_view(x, ...)"},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View data cubes and samples in leaflet — sits_view","text":"x Object class \"sits\", \"data.frame\", \"som_map\", \"raster_cube\", \"probs_cube\", \"vector_cube\", \"class cube\". ... specifications sits_view. legend Named vector associates labels colors. palette Color palette RColorBrewer radius Radius circle markers add Add image current leaflet id_neurons Neurons SOM map shown. band Single band viewing false color images. red Band red color. green Band green color. blue Band blue color. tiles Tiles plotted (case multi-tile cube). dates Dates plotted. rev Revert color palette? opacity Opacity segment fill class cube max_cog_size Maximum size COG overviews (lines columns) first_quantile First quantile stretching images last_quantile Last quantile stretching images leaflet_megabytes Maximum size leaflet (MB) version Version name (compare different classifications) label Label plotted (case probs cube) seg_color Color segment boundaries line_width Line width segments (pixels)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View data cubes and samples in leaflet — sits_view","text":"leaflet object containing either samples                       data cubes embedded global map can                       visualized directly RStudio viewer.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"View data cubes and samples in leaflet — sits_view","text":"show false color image, use \"band\" chose one bands, \"tiles\" select tiles, \"first_quantile\" \"last_quantile\" set cutoff points. Choose one date \"dates\" parameter. color scheme defined either \"palette\" (use available color scheme) legend (user-defined color scheme). see palettes pre-defined, use cols4all::g4a_gui select ColorBrewer name. \"rev\" parameter reverts order colors palette. show RGB composite, select \"red\", \"green\" \"blue\" bands, \"tiles\", \"dates\", \"opacity\", \"first_quantile\" \"last_quantile\". One can also get RGB composite, selecting one band three dates. case, first date shown red, second green third blue. Probability cubes shown false color. parameter \"labels\" controls labels shown. left blank, first map shown. color control, use \"palette\", \"legend\", \"rev\" (described ). Vector cubes vector raster component. vector part segments produced sits_segment. visual output controlled \"seg_color\" \"line_width\" parameters. raster output works way false color RGB views described . Classified cubes need information render class. three options: () classes part existing color scheme; (b) user provides legend associates class color; (c) use generic palette (\"Spectral\") allocate colors based palette. find create customized color scheme, read chapter \"Data Visualisation sits\" sits book. compare different classifications, use \"version\" parameter distinguish different maps shown. Vector classified cubes displayed classified cubes, segments overlaid top class map, controlled \"seg_color\" \"line_width\". Samples shown map based geographical locations color classes assigned color scheme. Users can also assign legend palette choose colors. See information display classified cubes. types data cubes, following parameters apply: opacity: controls transparency map. max_cog_size: COG data, controls level aggregation used display, measured pixels, e.g., value 512 select 512 x 512 aggregated image. Small values faster show, loss visual quality. leaflet_megabytes: maximum size leaflet shown associated map (megabytes). Bigger values use memory. add: controls whether new visualisation overlaid top existing one. Default FALSE.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"View data cubes and samples in leaflet — sits_view","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View data cubes and samples in leaflet — sits_view","text":"","code":"if (sits_run_examples()) {     # view samples     sits_view(cerrado_2classes)     # create a local data cube     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     modis_cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # view the data cube     sits_view(modis_cube,         band = \"NDVI\"     )     # train a model     rf_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify the cube     modis_probs <- sits_classify(         data = modis_cube,         ml_model = rf_model,         output_dir = tempdir()     )     # generate a map     modis_label <- sits_label_classification(         modis_probs,         output_dir = tempdir()     )     # view the classified map     sits_view(modis_label)     # view the classified map with the B/W image     sits_view(modis_cube,         band = \"NDVI\",         class_cube = modis_label,         dates = sits_timeline(modis_cube)[[1]]     )     # view the classified map with the RGB image     sits_view(modis_cube,         red = \"NDVI\", green = \"NDVI\", blue = \"NDVI\",         class_cube = modis_label,         dates = sits_timeline(modis_cube)[[1]]     )     # create an uncertainty cube     modis_uncert <- sits_uncertainty(         cube = modis_probs,         output_dir = tempdir()     )     # view the uncertainty cube     sits_view(modis_uncert, rev = TRUE) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter time series with whittaker filter — sits_whittaker","title":"Filter time series with whittaker filter — sits_whittaker","text":"algorithm searches optimal warping polynomial. degree smoothing depends smoothing factor lambda (usually 0.5 10.0). Use lambda = 0.5 slight smoothing lambda = 5.0 strong smoothing.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter time series with whittaker filter — sits_whittaker","text":"","code":"sits_whittaker(data = NULL, lambda = 0.5)"},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter time series with whittaker filter — sits_whittaker","text":"data Time series matrix. lambda Smoothing factor applied (default 0.5).","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter time series with whittaker filter — sits_whittaker","text":"Filtered time series","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter time series with whittaker filter — sits_whittaker","text":"Francesco Vuolo, Wai-Tim Ng, Clement Atzberger, \"Smoothing gap-filling high resolution multi-spectral time series: Example Landsat data\", Int Journal Applied Earth Observation Geoinformation, vol. 57, pg. 202-213, 2107.","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter time series with whittaker filter — sits_whittaker","text":"Rolf Simoes, rolfsimoes@gmail.com Gilberto Camara, gilberto.camara@inpe.br Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_whittaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter time series with whittaker filter — sits_whittaker","text":"","code":"if (sits_run_examples()) {     # Retrieve a time series with values of NDVI     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # Filter the point using the Whittaker smoother     point_whit <- sits_filter(point_ndvi, sits_whittaker(lambda = 3.0))     # Merge time series     point_ndvi <- sits_merge(point_ndvi, point_whit,         suffix = c(\"\", \".WHIT\")     )     # Plot the two points to see the smoothing effect     plot(point_ndvi) }"},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Train extreme gradient boosting models — sits_xgboost","title":"Train extreme gradient boosting models — sits_xgboost","text":"function uses extreme gradient boosting algorithm. Boosting iteratively adds basis functions greedy fashion new basis function reduces selected loss function. function front-end methods \"xgboost\" package. Please refer documentation package details.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train extreme gradient boosting models — sits_xgboost","text":"","code":"sits_xgboost(   samples = NULL,   learning_rate = 0.15,   min_split_loss = 1,   max_depth = 5L,   min_child_weight = 1,   max_delta_step = 1,   subsample = 0.85,   nfold = 5L,   nrounds = 100L,   nthread = 6L,   early_stopping_rounds = 20L,   verbose = FALSE )"},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train extreme gradient boosting models — sits_xgboost","text":"samples Time series training samples. learning_rate Learning rate: scale contribution tree factor 0 < lr < 1 added current approximation. Used prevent overfitting. Default: 0.15 min_split_loss Minimum loss reduction make partition leaf.  Default: 1. max_depth Maximum depth tree. Increasing value makes model complex likely overfit. Default: 5. min_child_weight leaf node minimum sum instance weights lower min_child_weight, tree splitting stops. larger min_child_weight , conservative algorithm . Default: 1. max_delta_step Maximum delta step allow leaf output . value set 0, constraint. set positive value, can help making update step conservative. Default: 1. subsample Percentage samples supplied tree. Default: 0.8. nfold Number subsamples cross-validation. nrounds Number rounds iterate cross-validation (default: 100) nthread Number threads (default = 6) early_stopping_rounds Training validation set stop performance improve k rounds. verbose Print information statistics process","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train extreme gradient boosting models — sits_xgboost","text":"Model fitted input data                         (passed sits_classify)","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train extreme gradient boosting models — sits_xgboost","text":"Please refer sits documentation available https://e-sensing.github.io/sitsbook/ detailed examples.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train extreme gradient boosting models — sits_xgboost","text":"Tianqi Chen, Carlos Guestrin,                      \"XGBoost : Reliable Large-scale Tree Boosting System\",                      SIG KDD 2016.","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train extreme gradient boosting models — sits_xgboost","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/sits_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train extreme gradient boosting models — sits_xgboost","text":"","code":"if (sits_run_examples()) {     # Example of training a model for time series classification     # Retrieve the samples for Mato Grosso     # train a xgboost model     ml_model <- sits_train(samples_modis_ndvi, ml_method = sits_xgboost)     # classify the point     point_ndvi <- sits_select(point_mt_6bands, bands = \"NDVI\")     # classify the point     point_class <- sits_classify(         data = point_ndvi, ml_model = ml_model     )     plot(point_class) }"},{"path":"https://e-sensing.github.io/sits/reference/summary.class_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize data cubes — summary.class_cube","title":"Summarize data cubes — summary.class_cube","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.class_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize data cubes — summary.class_cube","text":"","code":"# S3 method for class 'class_cube' summary(object, ...)"},{"path":"https://e-sensing.github.io/sits/reference/summary.class_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize data cubes — summary.class_cube","text":"object Object class \"class_cube\" ... specifications summary.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.class_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize data cubes — summary.class_cube","text":"summary classified cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.class_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize data cubes — summary.class_cube","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.class_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize data cubes — summary.class_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     summary(label_cube) }"},{"path":"https://e-sensing.github.io/sits/reference/summary.raster_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize data cubes — summary.raster_cube","title":"Summarize data cubes — summary.raster_cube","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.raster_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize data cubes — summary.raster_cube","text":"","code":"# S3 method for class 'raster_cube' summary(object, ..., tile = NULL, date = NULL)"},{"path":"https://e-sensing.github.io/sits/reference/summary.raster_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize data cubes — summary.raster_cube","text":"object Object classes \"raster_cube\". ... specifications summary. tile Tile summarized date Date summarized","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.raster_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize data cubes — summary.raster_cube","text":"summary data cube.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.raster_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize data cubes — summary.raster_cube","text":"Gilberto Camara, gilberto.camara@inpe.br Felipe Souza, felipe.souza@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.raster_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize data cubes — summary.raster_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     summary(cube) }"},{"path":"https://e-sensing.github.io/sits/reference/summary.sits.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize sits — summary.sits","title":"Summarize sits — summary.sits","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize sits — summary.sits","text":"","code":"# S3 method for class 'sits' summary(object, ...)"},{"path":"https://e-sensing.github.io/sits/reference/summary.sits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize sits — summary.sits","text":"object Object class \"sits\". ... specifications summary.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize sits — summary.sits","text":"summary sits tibble.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize sits — summary.sits","text":"Gilberto Camara, gilberto.camara@inpe.br Felipe Carvalho, felipe.carvalho@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize sits — summary.sits","text":"","code":"if (sits_run_examples()) {     summary(samples_modis_ndvi) }"},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize accuracy matrix for training data — summary.sits_accuracy","title":"Summarize accuracy matrix for training data — summary.sits_accuracy","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize accuracy matrix for training data — summary.sits_accuracy","text":"","code":"# S3 method for class 'sits_accuracy' summary(object, ...)"},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize accuracy matrix for training data — summary.sits_accuracy","text":"object Object class \"sits_accuracy\". ... specifications summary.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize accuracy matrix for training data — summary.sits_accuracy","text":"summary sample accuracy","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_accuracy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize accuracy matrix for training data — summary.sits_accuracy","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize accuracy matrix for training data — summary.sits_accuracy","text":"","code":"if (sits_run_examples()) {     data(cerrado_2classes)     # split training and test data     train_data <- sits_sample(cerrado_2classes, frac = 0.5)     test_data <- sits_sample(cerrado_2classes, frac = 0.5)     # train a random forest model     rfor_model <- sits_train(train_data, sits_rfor())     # classify test data     points_class <- sits_classify(         data = test_data,         ml_model = rfor_model     )     # measure accuracy     acc <- sits_accuracy(points_class)     summary(acc) }"},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_area_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","title":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_area_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","text":"","code":"# S3 method for class 'sits_area_accuracy' summary(object, ...)"},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_area_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","text":"object Object classe \"sits_accuracy\". ... specifications summary.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_area_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","text":"summary sample accuracy","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_area_accuracy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","text":"Gilberto Camara, gilberto.camara@inpe.br","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.sits_area_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize accuracy matrix for area data — summary.sits_area_accuracy","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     # label the probability cube     label_cube <- sits_label_classification(         probs_cube,         output_dir = tempdir()     )     # obtain the ground truth for accuracy assessment     ground_truth <- system.file(\"extdata/samples/samples_sinop_crop.csv\",         package = \"sits\"     )     # make accuracy assessment     as <- sits_accuracy(label_cube, validation = ground_truth)     summary(as) }"},{"path":"https://e-sensing.github.io/sits/reference/summary.variance_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize variance cubes — summary.variance_cube","title":"Summarize variance cubes — summary.variance_cube","text":"generic function. Parameters depend specific type input.","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.variance_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize variance cubes — summary.variance_cube","text":"","code":"# S3 method for class 'variance_cube' summary(   object,   ...,   intervals = 0.05,   sample_size = 10000L,   multicores = 2L,   memsize = 2L,   quantiles = c(\"75%\", \"80%\", \"85%\", \"90%\", \"95%\", \"100%\") )"},{"path":"https://e-sensing.github.io/sits/reference/summary.variance_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize variance cubes — summary.variance_cube","text":"object Object class \"class_cube\" ... specifications summary. intervals Intervals calculate quantiles sample_size approximate size samples extracted variance cube (tile). multicores Number cores summarize data (integer, min = 1, max = 2048). memsize Memory GB available summarize data (integer, min = 1, max = 16384). quantiles Quantiles shown","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.variance_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize variance cubes — summary.variance_cube","text":"summary variance cube","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.variance_cube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize variance cubes — summary.variance_cube","text":"Gilberto Camara, gilberto.camara@inpe.br Felipe Carlos, efelipecarlos@gmail.com Felipe Souza, lipecaso@gmail.com","code":""},{"path":"https://e-sensing.github.io/sits/reference/summary.variance_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize variance cubes — summary.variance_cube","text":"","code":"if (sits_run_examples()) {     # create a data cube from local files     data_dir <- system.file(\"extdata/raster/mod13q1\", package = \"sits\")     cube <- sits_cube(         source = \"BDC\",         collection = \"MOD13Q1-6.1\",         data_dir = data_dir     )     # create a random forest model     rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())     # classify a data cube     probs_cube <- sits_classify(         data = cube, ml_model = rfor_model, output_dir = tempdir()     )     variance_cube <- sits_variance(         data = probs_cube,         output_dir = tempdir()     )     summary(variance_cube) }"},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"whats-new-in-sits-version-153","dir":"Changelog","previous_headings":"","what":"What’s new in SITS version 1.5.3","title":"What’s new in SITS version 1.5.3","text":"CRAN release: 2025-07-23 Introduce Python API SITS (pysits) New version documentation code sitsbook Implement SAR texture measures based co-occurrence matrices Refactor MPC token generation Introduce sits_roi_to_tiles function Add support HLS collection MPC Support TERRASCOPE products WORLD COVER WORLD CEREAL Support Open Geo Hub Harmonized Landsat collection Review sits_get_data() implementation Improvements sits_mosaic() Fix sits_clean() multicores operations Add WebGL default engine sits_view() using leafgl Review CDSE implementation support OpenSearch STAC endpoints Improve speed sits_summary() sits_stratified sampling Fix problems sits_regularize() Include label parameter sits_select() General bug fixes","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"whats-new-in-sits-version-152","dir":"Changelog","previous_headings":"","what":"What’s new in SITS version 1.5.2","title":"What’s new in SITS version 1.5.2","text":"CRAN release: 2025-02-12 Include exclusion_mask parameter sits_classify() sits_smooth() Support classification data cubes NA values Support multiple tiling system sits_regularize(), including MGRS Brazil Data Cube grids Review sits_merge() implementation better handle multiple scenario cases Support roi plotting data cubes Refactor sits_cube_copy() improve timeout handling efficiency Include filtering tiles regularization operation Include start end dates collection sits_list_collections() Add support SpatExtent object terra roi sits_cube() Update crs usage sits_get_data() support WKT Implement Sakoe-Chiba approximation DTW algorithm Support tmap version 4.0 Enhance performance usability visualization functions Enhance sits_classify() performance segments classification Support interactive visualization SOM samples General bug fixes","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"whats-new-in-sits-version-151","dir":"Changelog","previous_headings":"","what":"What’s new in SITS version 1.5.1","title":"What’s new in SITS version 1.5.1","text":"CRAN release: 2024-08-19 Support ESA World Cover map Support Digital Earth Australia products Support Digital Earth Africa geomedian products Support PLANET Mosaic products Improve .netrc access Harmonized Landsat-Sentinel cubes Use ROI cut data cube mosaic operation Support raster vector classification using DEM base cubes Convert ‘httr’ package ‘httr2’ package Remove deprecated class purrr::map_dfc, purrr::map_dfr similar Fix tuning torch models Add geometry validation extracting time series Add multicores processing support active learning sampling methods Remove tapply .reg_cube_split_assets() R 4.X compatibility Fix sits_merge() function merging SAR OPTICAL cubes Rename n_input_pixels back input_pixels compatibility models trained old versions package Fix torch usage Apple M3 Fix date parameter usage sits_view() Improve plot() performance using raster overviews","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-5-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.5.0","title":"What’s new in SITS version 1.5.1","text":"Support SENTINEL-1-RTC SENTINEL-2-L2A CDSE Include support DEA products SENTINEL-1-RTC, LS5-SR, LS7-SR, LS9-SR, ALOS-PALSAR-MOSAIC, NDVI ANOMALY, DAILY CHIRPS, MONTHLY CHIRPS DEM-30 Support Sentinel-1 GRD RTC collections Planetary Computer Include parameter tile select data Sentinel-1 (MPC) Include parameter tile select data Sentinel-1 Sentinel-2 (DEAFRICA) Include parameter tile select data HLS collections Improved support GPU-based classification deep learning models Support non-normalized derived indexes Support shapefiles ROI sits_cube() Fix inconsistencies HLS scale factors New function obtain ROI based MGRS tiles Add support uncertainty cubes sits_mosaic() Improve performance sits_segment() using chunk parallelization Include uncertainty measures vector probability cubes New sits_clean() function improve classified maps New functions sits_sampling_design() sits_stratified_sampling() New sits_reduce() function Include dtw distance building SOM maps","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-4","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.4.2-3","title":"What’s new in SITS version 1.4","text":"Fix font download package initialization","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-4-1","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.4.2-2","title":"What’s new in SITS version 1.4","text":"Fix integer overflow bug sits_classify() segments","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-4-2","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.4.2-1","title":"What’s new in SITS version 1.4","text":"Fix crs bug sits_apply() Update file name clean feature Fix time series extraction bug segments Fix examples","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-4","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.4.2","title":"What’s new in SITS version 1.4","text":"Support vector data cubes, including visualisation Object-based time series analysis using spatio-temporal segmentation Improved support GPU usage running deep learning algorithms New function clean values modal filter classified images Added experimental support Sentinel-1 images available MPC Summary function now includes cloud cover information General bug fixes","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-4-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.4.1","title":"What’s new in SITS version 1.4","text":"Updated access collections Brazil Data Cube, HLS, AWS Corrected errors labelling classified cubes Created factory functions segmentation","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-4-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.4.0","title":"What’s new in SITS version 1.4","text":"New function image segmentation based supercells package New version sits_get_data() extract average values time series based segments Support Harmonized Landsat Sentinel (HLS) collections NASA Support probability cubes uncertainty cubes sits_view() New summary() function show details data cubes time series tibbles General big fixes","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-3","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.3.0","title":"What’s new in SITS version 1.3","text":"Remove NOTES WARNINGS pointed CRAN New sits_mosaic() function improving visualization large data sets Add support cubes cloud coverage information sits_regularize() Improve sits_cube_copy() downloading data internet Tested validated GPU support deep learning models sits Added multithread support deep learning models sits_train() Improve sits_combine_predictions() Remove dependencies data.table package Organize clean internal APIs General bug fixes","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"whats-new-in-sits-version-120","dir":"Changelog","previous_headings":"","what":"What’s new in SITS version 1.2.0","title":"What’s new in SITS version 1.2.0","text":"CRAN release: 2022-11-16","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-2-0","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.2.0-4","title":"What’s new in SITS version 1.2.0","text":"Fix .raster_file_blocksize.terra() bug (issue #918)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-2-0-1","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.2.0-3","title":"What’s new in SITS version 1.2.0","text":"Fix stars proxy bug (issue #902) Fix purrr cross deprecation Fix ggplot2 aes_string deprecation","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-2-0-2","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.2.0-2","title":"What’s new in SITS version 1.2.0","text":"Fix tibble subsetting bug (issue #893)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-2-0-3","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.2.0-1","title":"What’s new in SITS version 1.2.0","text":"Fix sits_som_clean_samples() bug (issue #890)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-2-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.2.0","title":"What’s new in SITS version 1.2.0","text":"sits_get_data() can used retrieve samples classified cube Support mixture models (sits_mixture_model()) Joining cubes mosaic (sits_mosaic_cubes()) Extract trained ML model (sits_model()) Downloading copying data cubes (sits_cube_copy()) Combine prediction average entropy (sits_combine_predictions()) Significant performance improvement working COG files Allow plot confusion matrix (sits_plot) Support operations CLOUD band sits_apply() Bug fixes internal re-engineering better code maintenance","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"whats-new-in-sits-version-110","dir":"Changelog","previous_headings":"","what":"What’s new in SITS version 1.1.0","title":"What’s new in SITS version 1.1.0","text":"CRAN release: 2022-07-07","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-8","title":"What’s new in SITS version 1.1.0","text":"Fix support BDC cubes sits_regularize() (issue #848) Fix support classified_image cubes sits_labels()<- (issue #846)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-1","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-7","title":"What’s new in SITS version 1.1.0","text":"Fix memory error sits_label_classification() sits_smooth() (issue #850)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-2","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-6","title":"What’s new in SITS version 1.1.0","text":"Fix resume feature sits_classify() BDC cubes (issue #844)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-3","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-5","title":"What’s new in SITS version 1.1.0","text":"Fix bound box issue image blocks produced sits_apply()","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-4","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-4","title":"What’s new in SITS version 1.1.0","text":"Fix MPC cube time expiration bug","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-5","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-3","title":"What’s new in SITS version 1.1.0","text":"Fix bound box issue image blocks produced sits_apply()","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-6","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-2","title":"What’s new in SITS version 1.1.0","text":"Improve sits_values() function (issue #810) Fix sits_reduce_imbalance() function (issue #809)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"hotfix-version-1-1-0-7","dir":"Changelog","previous_headings":"","what":"Hotfix version 1.1.0-1","title":"What’s new in SITS version 1.1.0","text":"Fix sits_accuracy() function (issue #807)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-1-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.1.0","title":"What’s new in SITS version 1.1.0","text":"Introduced support kernel functions sits_apply Introduced new function sits_mixture_model spectral mixture analysis Support Swiss Data Cube (swissdatacube.org) Support mosaic visualization sits_view Introduced new function sits_as_sf convert sits objects sf Export images COG sits_regularize Add roi parameter sits_regularize function Add crs parameter sits_get_data Change Microsoft Planetary Computer source name \"MPC\" Fix several bugs improve performance","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"whats-new-in-sits-version-100","dir":"Changelog","previous_headings":"","what":"What’s new in SITS version 1.0.0","title":"What’s new in SITS version 1.0.0","text":"CRAN release: 2022-05-19 Available CRAN.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-1-0-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 1.0.0","title":"What’s new in SITS version 1.0.0","text":"Hotfix improve sits_whittaker() function process cube. Update documentation match CRAN standards","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-17-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.17.0","title":"What’s new in SITS version 0.17.0","text":"Introduced new classifier model sits_lighttae() (Lightweight Temporal Self-Attention) Introduced sits_uncertainty_sampling() active learning Introduced sits_confidence_samples() semi-supervised learning Introduced sits_geo_dist() generate samples-samples samples-predicted plot Introduced sits_tuning() random search machine learning parameters Introduced sits_reduce_imbalance() function balance class samples Introduced sits_as_sf() convert sits tibble sf object Support torchopt deep learning optimizer package New types sits_uncertainty(): least confidence margin confidence","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"improvements-in-sits-version-0-17-0","dir":"Changelog","previous_headings":"","what":"Improvements in SITS version 0.17.0","title":"What’s new in SITS version 0.17.0","text":"Implement parallel processing sits_kfold_validate() Change data samples sits machine learning classifiers (NOTE: models trained previous versions longer supported) Change deep learning functions snake case Remove file parameter sits_get_data() function Update documentation Improve several internal functions performances Fix several bugs","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-16-3","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.16.3","title":"What’s new in SITS version 0.16.3","text":"reimplemented deep learning functions using torch package remove keras dependence Introduced sits_TAE() classification model Introduced sits_lightgbm() classification model Simplified sits_regularize() parameters Improve sits_regularize() reach production level quality Improve sits_regularize() use C++ internal functions Include improved version gdalcubes Improve sits_cube() open results cube Update plot() parameters raster cubes Support multi-tile classified cube sits_view()","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-16-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.16.2","title":"What’s new in SITS version 0.16.2","text":"Improve sits_get_data() accept tibbles Remove multiples progress bar sits_cube() Improve sits_regularize() process parallel tiles, bands, dates Improve sits_regularize() check malformed files","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-16-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.16.1","title":"What’s new in SITS version 0.16.1","text":"Update AWS_NO_SIGN_REQUEST environment variable Solved bug .gc_get_valid_interval() function. Now sits_regularize fault tolerance system, processing error function delete malformed files create . sits_regularize function new parameter called multithreads. sits_cube function local cubes new parameter called multicores. Print F1 score sits_kfold_validate 2 labels.","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-16-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.16.0-1","title":"What’s new in SITS version 0.16.0","text":"hotfix sits_cube() function tolerate malformed paths STAC service;","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-16-0-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.16.0","title":"What’s new in SITS version 0.16.0","text":"Include sits_apply() function generate new bands existing ones; Improve sits_accuracy() function work multiple cubes; Add band parameter sits_view() Introduce sits_uncertainty() function provide uncertainty measure probability maps; Improve sits_regularize() taking least cloud cover default method compose images Bug fixes;","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.1-1","title":"What’s new in SITS version 0.15.1","text":"Fix bug sits_regularize generated images artifacts Fix wrong bbox sits_cube STAC AWS Sentinel-2","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-1-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.1","title":"What’s new in SITS version 0.15.1","text":"Update README.Rmd Support sits_timeline() sits model objects Update drone image Simplify config_colors.yml removing palette names Temporary python files generated check Organize color handling SITS Organize configuration files Improve preconditions sits_regularize() Compress external data bzip2 Update gdalcubes format files Update rstac version Check provided parameters sits_regularize function Use default palette SOM colors Remove start_date end_date validation csv file Use default brewer palette plot classified cube Improve package help pages Remove unused data sets Remove rarely used functions sits_regularize() producing Float64 images output Full support Microsoft Planetary Computing","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.0-4","title":"What’s new in SITS version 0.15.0","text":"Change gdalcubes_chunk_size “config.yml” improve sits_regularize().","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-0-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.0-3","title":"What’s new in SITS version 0.15.0","text":"Fix bug .source_collection_access_test pass ellipsis rstac::post_request function.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-0-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.0-2","title":"What’s new in SITS version 0.15.0","text":"Fix bug .source_collection_access_test pass ellipsis rstac::post_request function. Update drone version","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-0-3","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.0-1","title":"What’s new in SITS version 0.15.0","text":"Fix bug sits_plot Fix bug sits_timeline cubes temporal extent.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-15-0-4","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.15.0","title":"What’s new in SITS version 0.15.0","text":"Support regularization collections DEAFRICA USGS improvement Collection S2_10_16D_STK-1 removed BDC source config file Add color NoClass label improvement Change mapview leaflet package Standardize cube creation parameters Remove CLASSIFIED PROBS sources config file Change minimal version requirement terra package 1.4-11 Update sits_list_collections() indicate open data collection Geographical visualization samples Remove dependencies packages ptw, signal MASS Add support open_data collections config file Change default output_dir parameter Remove sits_cube_clone() function Plot RGB images raster cubes Fixed error sits_select() bands raster cube Update examples demo Support open data collections DEAFRICA AWS Support USGS STAC Landsat 8 catalog User can provide resampling method sits_regularize() function Add support open data collections ‘AWS’ source Remove OPENDATA source Update documentation Resolve ambiguity “bands” parameter data cubes Remove “sits_bands” assignment function Include “labels” information probs labelled data cubes Remove S2_10-1 BDC collection config bug fixes","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-14-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.14.1-1","title":"What’s new in SITS version 0.14.1","text":"Bug cube generated sits_regularize() “CLOUD” band","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-14-1-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.14.1","title":"What’s new in SITS version 0.14.1","text":"Implement new function sits_list_collections() Update gdalcubes parameters Implement .source_bands_resampling() Remove name demo file Improve sits_som_clean_samples() function Improve sits_bands<-() function Improve sits_select() function Error cloud band CBERS4 data example Include function list collections available cloud services sits_cube_copy() include information tile Get spatial resolution config file Fix partial merge configuration file Change bbox roi sits","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-14-0","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.14.0-2","title":"What’s new in SITS version 0.14.0","text":"fix sits_bbox() function","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-14-0-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.14.0-1","title":"What’s new in SITS version 0.14.0","text":"fix duplicate link AWS STAC","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-14-0-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.14.0","title":"What’s new in SITS version 0.14.0","text":"Now plot classified cube requires legend palette labels default sits palette. Support S2-SEN2COR_10_16D_STK-1 BDC collection Remove function name msg check function Add satellite sensor info config file Remove imager, ranger, proto, future packages sits Support different providers LOCAL sources LOCAL source dynamically built Remove sits_cube.local_cube() function parameters satellite sensor Add parameters origin collection sits_cube.local_cube() function Fix LOCAL source examples tests","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-13-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.13.1","title":"What’s new in SITS version 0.13.1","text":"Update add tests CI Implement new check functions Change error warning messages fix deprecated warnings keras package bug fixes","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-13-0-3","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.13.0-3","title":"What’s new in SITS version 0.13.0-3","text":"Update documentation Machine Learning methods Hotfix bug neuron labelling","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-13-0-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.13.0-2","title":"What’s new in SITS version 0.13.0-2","text":"Bug fixes BDC MODIS cube","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-13-0-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.13.0-1","title":"What’s new in SITS version 0.13.0-1","text":"Bug fixes check STAC bands Change Landsat-8 (LC8_30-1) product metadata BDC source","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-13","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.13.0","title":"What’s new in SITS version 0.13","text":"Create API source cube Update auxiliary functions config file Update config file Add support others bands values config file Add support bit mask USGS cube Support multiples directories local cubes Support MODIS cloud bands Dealing invalid areas SITS Support WTSS","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-12","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.12.1","title":"What’s new in SITS version 0.12","text":"Update README Change docker image new sits build Adjust CMASK bands values BDC cubes Support sits_config_sensor_bands accept one sensor sits cube selection shapefile Problem - sits classify","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-12-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.12.0","title":"What’s new in SITS version 0.12","text":"Bugs fixed Documentation updated Support multiple tile local cubes Improve selection using roi parameter sits_classify() function","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-11","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.11.2","title":"What’s new in SITS version 0.11","text":"Added keras serialisation TempCNN ResNet models","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-11-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.11.1","title":"What’s new in SITS version 0.11","text":"Removed LSTM FCN deep learning models","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-11-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.11.0","title":"What’s new in SITS version 0.11","text":"Important improvements classification performance Updated version deep learning methods Support STAC access Brazil Data Cube, AWS DE Africa Improved sits validation","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-10","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.10.0","title":"What’s new in SITS version 0.10","text":"Version update 0.10.0 Continuous Integration (drone.io) Bayesian smoothing improvement Introduces Snow multiprocessing architecture cube plot allow region interest (roi) Support multiple tiles Update documentation Bugs fix","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.8","title":"What’s new in SITS version 0.9","text":"Access Sentinel-2 level-2A images AWS Access Brazil Data Cube using STAC Improved raster API Code revision lintr good practices packages Improvement assertions code coverage Examples tests generate output tempdir()","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9-1","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.7","title":"What’s new in SITS version 0.9","text":"Image classification using region interest (ROI)","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9-2","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.6","title":"What’s new in SITS version 0.9","text":"Access processing tiles Brazil Data Cube Plotting data cube probability images Examples using SITS SENTINEL-2 CBERS-4 images","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9-3","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.5","title":"What’s new in SITS version 0.9","text":"Time series tibbles data cube metadata can now saved read SQLite Code coverage increased 95% Vignettes moved “sits-docs” reduce building time","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9-4","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.4","title":"What’s new in SITS version 0.9","text":"Filtering can applied classified images Band suffix filtering now set “” Improvement code coverage: code 90% coverage","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9-5","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.3","title":"What’s new in SITS version 0.9","text":"Improvements reading shapefiles: using sampling retrieve time series inside polygons Improvement plotting: uses overloading “plot” function","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-sits-version-0-9-6","dir":"Changelog","previous_headings":"","what":"New features in SITS version 0.9.2","title":"What’s new in SITS version 0.9","text":"Raster classification results can now versions: new parameter “version” included sits_classify function. Corrections sits_kohonen documentation.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-in-version-0-9","dir":"Changelog","previous_headings":"","what":"New Features in version 0.9.1","title":"What’s new in SITS version 0.9","text":"New deep learning models time series: 1D convolutional neural networks (sits_FCN), combining 1D CNN multi-layer perceptron networks (sits_TempCNN), 1D version ResNet (sits_ResNet), combination long-short term memory (LSTM) 1D CNN (sits_LSTM_FCN). New version area accuracy measures include Olofsson metrics ()","code":""},{"path":[]},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"new-features-0-8","dir":"Changelog","previous_headings":"","what":"New Features","title":"What’s new in SITS version 0.8","text":"version 0.8 onwards, package designed work data cubes. references “coverage” replaced references “cubes”. classification raster images using sits_classify now produces images information probability class pixel. allows flexibility options labeling resulting probability raster files. function sits_label_classification introduced generate labelled image class probability files, optional smoothing. choices smoothing = none (default), smoothing = bayesian (bayesian smoothing) smoothing = majority (majority smoothing). better define cube, metadata tibble associated cube requires four parameters define cube: () web service provides time series cubes; (b) URL web service; (c) name satellite; (d) name satellite sensor. provided, parameters inferred sits configuration file. functions data transformations, sits_tasseled_cap sits_savi now require sensor parameter (“MODIS” default) Functions sits_bands sits_labels now work tibbles time series data cubes.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"configuration-file-0-8","dir":"Changelog","previous_headings":"","what":"Configuration file","title":"What’s new in SITS version 0.8","text":"SITS configuration file improved include information web service providers, satellites sensor parameters. Please use sits_show_config() see default contents. Users can override parameters add creating config.yml file home directory.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"examples-and-demos-0-8","dir":"Changelog","previous_headings":"","what":"Examples and Demos","title":"What’s new in SITS version 0.8","text":"Examples demos include classification raster files now use inSitu R package, available using devtools::install_github(e-sensing/inSitu). examples tested checked correctness.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"functions-removed-0-8","dir":"Changelog","previous_headings":"","what":"Functions removed","title":"What’s new in SITS version 0.8","text":"sits_coverage replaced sits_cube. sits_raster_classification removed. Please use sits_classify. sits_classify, parameter out_prefix changed output_dir, allow better control directory write. sits_bayes_smooth removed. Please use sits_label_classification smoothing = bayesian. define cube based local files, service = RASTER replaced service = LOCALHOST.","code":""},{"path":"https://e-sensing.github.io/sits/news/index.html","id":"improvements-and-fixes-0-8","dir":"Changelog","previous_headings":"","what":"Improvements and fixes","title":"What’s new in SITS version 0.8","text":"programmers : sits_cube.R file now includes many convenience functions avoid using cumbersome indexes files vector: .sits_raster_params, .sits_cube_all_robjs, .sits_class_band_name, .sits_cube_bands, .sits_cube_service, .sits_cube_file, .sits_cube_files, .sits_cube_labels, .sits_cube_timeline, .sits_cube_robj, .sits_cube_all_robjs, .sits_cube_missing_values, .sits_cube_minimum_values, .sits_cube_maximum_values, .sits_cube_scale_factors, .sits_files_robj. Please look documentation provided sits_cube.R file. programmers : metadata describes data cube longer stores raster objects associated files associated cube.","code":""}]
